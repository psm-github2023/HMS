{"ast":null,"code":"'use strict';\n\nconst isNode = require('detect-node');\nconst flatmap = require('flatmap');\nconst {\n  Readable\n} = require('readable-stream');\nconst kindOf = require('kind-of');\nconst {\n  isSource\n} = require('is-pull-stream');\nconst isStream = require('is-stream');\nconst pullToStream = require('pull-to-stream');\nconst {\n  supportsFileReader\n} = require('ipfs-utils/src/supports');\nconst streamFromFileReader = require('ipfs-utils/src/streams/stream-from-filereader');\nfunction loadPaths(opts, file) {\n  const path = require('path');\n  const fs = require('fs');\n  const glob = require('glob');\n  const followSymlinks = opts.followSymlinks != null ? opts.followSymlinks : true;\n  file = path.resolve(file);\n  const stats = fs.statSync(file);\n  if (stats.isDirectory() && !opts.recursive) {\n    throw new Error('Can only add directories using --recursive');\n  }\n  if (stats.isDirectory() && opts.recursive) {\n    // glob requires a POSIX filename\n    file = file.split(path.sep).join('/');\n    const fullDir = file + (file.endsWith('/') ? '' : '/');\n    let dirName = fullDir.split('/');\n    dirName = dirName[dirName.length - 2] + '/';\n    const mg = new glob.sync.GlobSync('**/*', {\n      cwd: file,\n      follow: followSymlinks,\n      dot: opts.hidden,\n      ignore: opts.ignore\n    });\n    return mg.found.map(name => {\n      const fqn = fullDir + name;\n      // symlinks\n      if (mg.symlinks[fqn] === true) {\n        return {\n          path: dirName + name,\n          symlink: true,\n          dir: false,\n          content: fs.readlinkSync(fqn)\n        };\n      }\n\n      // files\n      if (mg.cache[fqn] === 'FILE') {\n        return {\n          path: dirName + name,\n          symlink: false,\n          dir: false,\n          content: fs.createReadStream(fqn)\n        };\n      }\n\n      // directories\n      if (mg.cache[fqn] === 'DIR' || mg.cache[fqn] instanceof Array) {\n        return {\n          path: dirName + name,\n          symlink: false,\n          dir: true\n        };\n      }\n      // files inside symlinks and others\n    })\n    // filter out null files\n    .filter(Boolean);\n  }\n  return {\n    path: path.basename(file),\n    content: fs.createReadStream(file)\n  };\n}\nfunction contentToStream(content) {\n  if (supportsFileReader && kindOf(content) === 'file') {\n    return streamFromFileReader(content);\n  }\n  if (kindOf(content) === 'buffer') {\n    return new Readable({\n      read() {\n        this.push(content);\n        this.push(null);\n      }\n    });\n  }\n  if (isSource(content)) {\n    return pullToStream.readable(content);\n  }\n  if (isStream.readable(content)) {\n    return content;\n  }\n  throw new Error(`Input not supported. Expected Buffer|ReadableStream|PullStream|File got ${kindOf(content)}. Check the documentation for more info https://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#add`);\n}\nfunction prepareFile(file, opts) {\n  let files = [].concat(file);\n  return flatmap(files, file => {\n    // add from fs with file path\n    if (typeof file === 'string') {\n      if (!isNode) {\n        throw new Error('Can only add file paths in node');\n      }\n      return loadPaths(opts, file);\n    }\n\n    // add with object syntax { path : <string> , content: <Buffer|ReadableStream|PullStream|File }\n    if (kindOf(file) === 'object') {\n      // treat as an empty directory when path is a string and content undefined\n      if (file.path && kindOf(file.path) === 'string' && !file.content) {\n        file.dir = true;\n        return file;\n      }\n\n      // just return when directory\n      if (file.dir) {\n        return file;\n      }\n      if (file.content) {\n        return {\n          path: file.path || '',\n          symlink: false,\n          dir: false,\n          content: contentToStream(file.content)\n        };\n      }\n    }\n    return {\n      path: '',\n      symlink: false,\n      dir: false,\n      content: contentToStream(file)\n    };\n  });\n}\nexports = module.exports = prepareFile;","map":{"version":3,"names":["isNode","require","flatmap","Readable","kindOf","isSource","isStream","pullToStream","supportsFileReader","streamFromFileReader","loadPaths","opts","file","path","fs","glob","followSymlinks","resolve","stats","statSync","isDirectory","recursive","Error","split","sep","join","fullDir","endsWith","dirName","length","mg","sync","GlobSync","cwd","follow","dot","hidden","ignore","found","map","name","fqn","symlinks","symlink","dir","content","readlinkSync","cache","createReadStream","Array","filter","Boolean","basename","contentToStream","read","push","readable","prepareFile","files","concat","exports","module"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/utils/prepare-file.js"],"sourcesContent":["'use strict'\n\nconst isNode = require('detect-node')\nconst flatmap = require('flatmap')\nconst { Readable } = require('readable-stream')\nconst kindOf = require('kind-of')\nconst { isSource } = require('is-pull-stream')\nconst isStream = require('is-stream')\nconst pullToStream = require('pull-to-stream')\nconst { supportsFileReader } = require('ipfs-utils/src/supports')\nconst streamFromFileReader = require('ipfs-utils/src/streams/stream-from-filereader')\n\nfunction loadPaths (opts, file) {\n  const path = require('path')\n  const fs = require('fs')\n  const glob = require('glob')\n\n  const followSymlinks = opts.followSymlinks != null ? opts.followSymlinks : true\n\n  file = path.resolve(file)\n  const stats = fs.statSync(file)\n\n  if (stats.isDirectory() && !opts.recursive) {\n    throw new Error('Can only add directories using --recursive')\n  }\n\n  if (stats.isDirectory() && opts.recursive) {\n    // glob requires a POSIX filename\n    file = file.split(path.sep).join('/')\n    const fullDir = file + (file.endsWith('/') ? '' : '/')\n    let dirName = fullDir.split('/')\n    dirName = dirName[dirName.length - 2] + '/'\n    const mg = new glob.sync.GlobSync('**/*', {\n      cwd: file,\n      follow: followSymlinks,\n      dot: opts.hidden,\n      ignore: opts.ignore\n    })\n\n    return mg.found\n      .map((name) => {\n        const fqn = fullDir + name\n        // symlinks\n        if (mg.symlinks[fqn] === true) {\n          return {\n            path: dirName + name,\n            symlink: true,\n            dir: false,\n            content: fs.readlinkSync(fqn)\n          }\n        }\n\n        // files\n        if (mg.cache[fqn] === 'FILE') {\n          return {\n            path: dirName + name,\n            symlink: false,\n            dir: false,\n            content: fs.createReadStream(fqn)\n          }\n        }\n\n        // directories\n        if (mg.cache[fqn] === 'DIR' || mg.cache[fqn] instanceof Array) {\n          return {\n            path: dirName + name,\n            symlink: false,\n            dir: true\n          }\n        }\n        // files inside symlinks and others\n      })\n      // filter out null files\n      .filter(Boolean)\n  }\n\n  return {\n    path: path.basename(file),\n    content: fs.createReadStream(file)\n  }\n}\n\nfunction contentToStream (content) {\n  if (supportsFileReader && kindOf(content) === 'file') {\n    return streamFromFileReader(content)\n  }\n\n  if (kindOf(content) === 'buffer') {\n    return new Readable({\n      read () {\n        this.push(content)\n        this.push(null)\n      }\n    })\n  }\n\n  if (isSource(content)) {\n    return pullToStream.readable(content)\n  }\n\n  if (isStream.readable(content)) {\n    return content\n  }\n\n  throw new Error(`Input not supported. Expected Buffer|ReadableStream|PullStream|File got ${kindOf(content)}. Check the documentation for more info https://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#add`)\n}\n\nfunction prepareFile (file, opts) {\n  let files = [].concat(file)\n\n  return flatmap(files, (file) => {\n    // add from fs with file path\n    if (typeof file === 'string') {\n      if (!isNode) {\n        throw new Error('Can only add file paths in node')\n      }\n\n      return loadPaths(opts, file)\n    }\n\n    // add with object syntax { path : <string> , content: <Buffer|ReadableStream|PullStream|File }\n    if (kindOf(file) === 'object') {\n      // treat as an empty directory when path is a string and content undefined\n      if (file.path && kindOf(file.path) === 'string' && !file.content) {\n        file.dir = true\n        return file\n      }\n\n      // just return when directory\n      if (file.dir) {\n        return file\n      }\n\n      if (file.content) {\n        return {\n          path: file.path || '',\n          symlink: false,\n          dir: false,\n          content: contentToStream(file.content)\n        }\n      }\n    }\n\n    return {\n      path: '',\n      symlink: false,\n      dir: false,\n      content: contentToStream(file)\n    }\n  })\n}\n\nexports = module.exports = prepareFile\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}