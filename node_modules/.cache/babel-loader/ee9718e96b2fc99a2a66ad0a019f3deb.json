{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst {\n  DAGLink\n} = require('ipld-dag-pb');\nconst CID = require('cids');\nconst LRU = require('lru-cache');\nconst lruOptions = {\n  max: 128\n};\nconst cache = new LRU(lruOptions);\nmodule.exports = send => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    if (!options) {\n      options = {};\n    }\n    try {\n      cid = new CID(cid);\n    } catch (err) {\n      return callback(err);\n    }\n    const node = cache.get(cid.toString());\n    if (node) {\n      return callback(null, node.links);\n    }\n    send({\n      path: 'object/links',\n      args: cid.toString()\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n      let links = [];\n      if (result.Links) {\n        links = result.Links.map(l => {\n          return new DAGLink(l.Name, l.Size, l.Hash);\n        });\n      }\n      callback(null, links);\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","DAGLink","CID","LRU","lruOptions","max","cache","module","exports","send","cid","options","callback","err","node","get","toString","links","path","args","result","Links","map","l","Name","Size","Hash"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/object/links.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst { DAGLink } = require('ipld-dag-pb')\nconst CID = require('cids')\nconst LRU = require('lru-cache')\nconst lruOptions = {\n  max: 128\n}\n\nconst cache = new LRU(lruOptions)\n\nmodule.exports = (send) => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n    if (!options) {\n      options = {}\n    }\n\n    try {\n      cid = new CID(cid)\n    } catch (err) {\n      return callback(err)\n    }\n\n    const node = cache.get(cid.toString())\n\n    if (node) {\n      return callback(null, node.links)\n    }\n\n    send({\n      path: 'object/links',\n      args: cid.toString()\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      let links = []\n\n      if (result.Links) {\n        links = result.Links.map((l) => {\n          return new DAGLink(l.Name, l.Size, l.Hash)\n        })\n      }\n      callback(null, links)\n    })\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAM;EAAEC;AAAQ,CAAC,GAAGD,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAME,GAAG,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMG,GAAG,GAAGH,OAAO,CAAC,WAAW,CAAC;AAChC,MAAMI,UAAU,GAAG;EACjBC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,KAAK,GAAG,IAAIH,GAAG,CAACC,UAAU,CAAC;AAEjCG,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAOV,SAAS,CAAC,CAACW,GAAG,EAAEC,OAAO,EAAEC,QAAQ,KAAK;IAC3C,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;MACjCC,QAAQ,GAAGD,OAAO;MAClBA,OAAO,GAAG,CAAC,CAAC;IACd;IACA,IAAI,CAACA,OAAO,EAAE;MACZA,OAAO,GAAG,CAAC,CAAC;IACd;IAEA,IAAI;MACFD,GAAG,GAAG,IAAIR,GAAG,CAACQ,GAAG,CAAC;IACpB,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZ,OAAOD,QAAQ,CAACC,GAAG,CAAC;IACtB;IAEA,MAAMC,IAAI,GAAGR,KAAK,CAACS,GAAG,CAACL,GAAG,CAACM,QAAQ,CAAC,CAAC,CAAC;IAEtC,IAAIF,IAAI,EAAE;MACR,OAAOF,QAAQ,CAAC,IAAI,EAAEE,IAAI,CAACG,KAAK,CAAC;IACnC;IAEAR,IAAI,CAAC;MACHS,IAAI,EAAE,cAAc;MACpBC,IAAI,EAAET,GAAG,CAACM,QAAQ,CAAC;IACrB,CAAC,EAAE,CAACH,GAAG,EAAEO,MAAM,KAAK;MAClB,IAAIP,GAAG,EAAE;QACP,OAAOD,QAAQ,CAACC,GAAG,CAAC;MACtB;MAEA,IAAII,KAAK,GAAG,EAAE;MAEd,IAAIG,MAAM,CAACC,KAAK,EAAE;QAChBJ,KAAK,GAAGG,MAAM,CAACC,KAAK,CAACC,GAAG,CAAEC,CAAC,IAAK;UAC9B,OAAO,IAAItB,OAAO,CAACsB,CAAC,CAACC,IAAI,EAAED,CAAC,CAACE,IAAI,EAAEF,CAAC,CAACG,IAAI,CAAC;QAC5C,CAAC,CAAC;MACJ;MACAd,QAAQ,CAAC,IAAI,EAAEK,KAAK,CAAC;IACvB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}