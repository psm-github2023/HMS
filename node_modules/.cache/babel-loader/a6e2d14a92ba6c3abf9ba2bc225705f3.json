{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\nconst multiaddr = require('multiaddr');\nconst PeerId = require('peer-id');\nconst PeerInfo = require('peer-info');\nmodule.exports = send => {\n  return promisify((cid, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    const handleResult = (res, callback) => {\n      // Inconsistent return values in the browser vs node\n      if (!Array.isArray(res)) {\n        res = [res];\n      }\n      let responses = [];\n      res.forEach(result => {\n        // 4 = Provider\n        if (result.Type !== 4) return;\n        result.Responses.forEach(response => {\n          const peerInfo = new PeerInfo(PeerId.createFromB58String(response.ID));\n          if (response.Addrs) {\n            response.Addrs.forEach(addr => {\n              const ma = multiaddr(addr);\n              peerInfo.multiaddrs.add(ma);\n            });\n          }\n          responses.push(peerInfo);\n        });\n      });\n      callback(null, responses);\n    };\n    send({\n      path: 'dht/findprovs',\n      args: cid.toString(),\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","streamToValueWithTransformer","multiaddr","PeerId","PeerInfo","module","exports","send","cid","opts","callback","handleResult","res","Array","isArray","responses","forEach","result","Type","Responses","response","peerInfo","createFromB58String","ID","Addrs","addr","ma","multiaddrs","add","push","path","args","toString","qs","err"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/dht/findprovs.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer')\n\nconst multiaddr = require('multiaddr')\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\n\nmodule.exports = (send) => {\n  return promisify((cid, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    const handleResult = (res, callback) => {\n      // Inconsistent return values in the browser vs node\n      if (!Array.isArray(res)) {\n        res = [res]\n      }\n\n      let responses = []\n      res.forEach(result => {\n        // 4 = Provider\n        if (result.Type !== 4) return\n        result.Responses.forEach(response => {\n          const peerInfo = new PeerInfo(PeerId.createFromB58String(response.ID))\n\n          if (response.Addrs) {\n            response.Addrs.forEach((addr) => {\n              const ma = multiaddr(addr)\n              peerInfo.multiaddrs.add(ma)\n            })\n          }\n\n          responses.push(peerInfo)\n        })\n      })\n\n      callback(null, responses)\n    }\n\n    send({\n      path: 'dht/findprovs',\n      args: cid.toString(),\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback)\n    })\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,4BAA4B,GAAGD,OAAO,CAAC,2CAA2C,CAAC;AAEzF,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMG,MAAM,GAAGH,OAAO,CAAC,SAAS,CAAC;AACjC,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAW,CAAC;AAErCK,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAOR,SAAS,CAAC,CAACS,GAAG,EAAEC,IAAI,EAAEC,QAAQ,KAAK;IACxC,IAAI,OAAOD,IAAI,KAAK,UAAU,IAAI,CAACC,QAAQ,EAAE;MAC3CA,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;;IAEA;IACA;IACA,IAAI,OAAOA,IAAI,KAAK,UAAU,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;MAChEA,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IAEA,MAAME,YAAY,GAAGA,CAACC,GAAG,EAAEF,QAAQ,KAAK;MACtC;MACA,IAAI,CAACG,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;QACvBA,GAAG,GAAG,CAACA,GAAG,CAAC;MACb;MAEA,IAAIG,SAAS,GAAG,EAAE;MAClBH,GAAG,CAACI,OAAO,CAACC,MAAM,IAAI;QACpB;QACA,IAAIA,MAAM,CAACC,IAAI,KAAK,CAAC,EAAE;QACvBD,MAAM,CAACE,SAAS,CAACH,OAAO,CAACI,QAAQ,IAAI;UACnC,MAAMC,QAAQ,GAAG,IAAIjB,QAAQ,CAACD,MAAM,CAACmB,mBAAmB,CAACF,QAAQ,CAACG,EAAE,CAAC,CAAC;UAEtE,IAAIH,QAAQ,CAACI,KAAK,EAAE;YAClBJ,QAAQ,CAACI,KAAK,CAACR,OAAO,CAAES,IAAI,IAAK;cAC/B,MAAMC,EAAE,GAAGxB,SAAS,CAACuB,IAAI,CAAC;cAC1BJ,QAAQ,CAACM,UAAU,CAACC,GAAG,CAACF,EAAE,CAAC;YAC7B,CAAC,CAAC;UACJ;UAEAX,SAAS,CAACc,IAAI,CAACR,QAAQ,CAAC;QAC1B,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFX,QAAQ,CAAC,IAAI,EAAEK,SAAS,CAAC;IAC3B,CAAC;IAEDR,IAAI,CAAC;MACHuB,IAAI,EAAE,eAAe;MACrBC,IAAI,EAAEvB,GAAG,CAACwB,QAAQ,CAAC,CAAC;MACpBC,EAAE,EAAExB;IACN,CAAC,EAAE,CAACyB,GAAG,EAAEjB,MAAM,KAAK;MAClB,IAAIiB,GAAG,EAAE;QACP,OAAOxB,QAAQ,CAACwB,GAAG,CAAC;MACtB;MAEAjC,4BAA4B,CAACgB,MAAM,EAAEN,YAAY,EAAED,QAAQ,CAAC;IAC9D,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}