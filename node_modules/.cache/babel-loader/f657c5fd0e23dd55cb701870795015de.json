{"ast":null,"code":"'use strict';\n\nconst isNode = require('detect-node');\nconst promisify = require('promisify-es6');\nconst SendOneFile = require('../utils/send-one-file-multiple-results');\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter');\nmodule.exports = send => {\n  const sendOneFile = SendOneFile(send, 'add');\n  return promisify((path, opts, callback) => {\n    if (typeof opts === 'function' && callback === undefined) {\n      callback = opts;\n      opts = {};\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    if (!isNode) {\n      return callback(new Error('fsAdd does not work in the browser'));\n    }\n    if (typeof path !== 'string') {\n      return callback(new Error('\"path\" must be a string'));\n    }\n    const requestOpts = {\n      qs: opts,\n      converter: FileResultStreamConverter\n    };\n    sendOneFile(path, requestOpts, callback);\n  });\n};","map":{"version":3,"names":["isNode","require","promisify","SendOneFile","FileResultStreamConverter","module","exports","send","sendOneFile","path","opts","callback","undefined","Error","requestOpts","qs","converter"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/files-regular/add-from-fs.js"],"sourcesContent":["'use strict'\n\nconst isNode = require('detect-node')\nconst promisify = require('promisify-es6')\nconst SendOneFile = require('../utils/send-one-file-multiple-results')\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter')\n\nmodule.exports = (send) => {\n  const sendOneFile = SendOneFile(send, 'add')\n\n  return promisify((path, opts, callback) => {\n    if (typeof opts === 'function' &&\n        callback === undefined) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' &&\n        typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    if (!isNode) {\n      return callback(new Error('fsAdd does not work in the browser'))\n    }\n\n    if (typeof path !== 'string') {\n      return callback(new Error('\"path\" must be a string'))\n    }\n\n    const requestOpts = {\n      qs: opts,\n      converter: FileResultStreamConverter\n    }\n    sendOneFile(path, requestOpts, callback)\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACrC,MAAMC,SAAS,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAME,WAAW,GAAGF,OAAO,CAAC,yCAAyC,CAAC;AACtE,MAAMG,yBAAyB,GAAGH,OAAO,CAAC,uCAAuC,CAAC;AAElFI,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,MAAMC,WAAW,GAAGL,WAAW,CAACI,IAAI,EAAE,KAAK,CAAC;EAE5C,OAAOL,SAAS,CAAC,CAACO,IAAI,EAAEC,IAAI,EAAEC,QAAQ,KAAK;IACzC,IAAI,OAAOD,IAAI,KAAK,UAAU,IAC1BC,QAAQ,KAAKC,SAAS,EAAE;MAC1BD,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;;IAEA;IACA;IACA,IAAI,OAAOA,IAAI,KAAK,UAAU,IAC1B,OAAOC,QAAQ,KAAK,UAAU,EAAE;MAClCA,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IAEA,IAAI,CAACV,MAAM,EAAE;MACX,OAAOW,QAAQ,CAAC,IAAIE,KAAK,CAAC,oCAAoC,CAAC,CAAC;IAClE;IAEA,IAAI,OAAOJ,IAAI,KAAK,QAAQ,EAAE;MAC5B,OAAOE,QAAQ,CAAC,IAAIE,KAAK,CAAC,yBAAyB,CAAC,CAAC;IACvD;IAEA,MAAMC,WAAW,GAAG;MAClBC,EAAE,EAAEL,IAAI;MACRM,SAAS,EAAEZ;IACb,CAAC;IACDI,WAAW,CAACC,IAAI,EAAEK,WAAW,EAAEH,QAAQ,CAAC;EAC1C,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}