{"ast":null,"code":"/* eslint-disable */\n\nmodule.exports = function decodeAsm(stdlib, foreign, buffer) {\n  'use asm';\n\n  // -- Imports\n  var heap = new stdlib.Uint8Array(buffer);\n  // var log = foreign.log\n  var pushInt = foreign.pushInt;\n  var pushInt32 = foreign.pushInt32;\n  var pushInt32Neg = foreign.pushInt32Neg;\n  var pushInt64 = foreign.pushInt64;\n  var pushInt64Neg = foreign.pushInt64Neg;\n  var pushFloat = foreign.pushFloat;\n  var pushFloatSingle = foreign.pushFloatSingle;\n  var pushFloatDouble = foreign.pushFloatDouble;\n  var pushTrue = foreign.pushTrue;\n  var pushFalse = foreign.pushFalse;\n  var pushUndefined = foreign.pushUndefined;\n  var pushNull = foreign.pushNull;\n  var pushInfinity = foreign.pushInfinity;\n  var pushInfinityNeg = foreign.pushInfinityNeg;\n  var pushNaN = foreign.pushNaN;\n  var pushNaNNeg = foreign.pushNaNNeg;\n  var pushArrayStart = foreign.pushArrayStart;\n  var pushArrayStartFixed = foreign.pushArrayStartFixed;\n  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32;\n  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64;\n  var pushObjectStart = foreign.pushObjectStart;\n  var pushObjectStartFixed = foreign.pushObjectStartFixed;\n  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32;\n  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64;\n  var pushByteString = foreign.pushByteString;\n  var pushByteStringStart = foreign.pushByteStringStart;\n  var pushUtf8String = foreign.pushUtf8String;\n  var pushUtf8StringStart = foreign.pushUtf8StringStart;\n  var pushSimpleUnassigned = foreign.pushSimpleUnassigned;\n  var pushTagStart = foreign.pushTagStart;\n  var pushTagStart4 = foreign.pushTagStart4;\n  var pushTagStart8 = foreign.pushTagStart8;\n  var pushTagUnassigned = foreign.pushTagUnassigned;\n  var pushBreak = foreign.pushBreak;\n  var pow = stdlib.Math.pow;\n\n  // -- Constants\n\n  // -- Mutable Variables\n\n  var offset = 0;\n  var inputLength = 0;\n  var code = 0;\n\n  // Decode a cbor string represented as Uint8Array\n  // which is allocated on the heap from 0 to inputLength\n  //\n  // input - Int\n  //\n  // Returns Code - Int,\n  // Success = 0\n  // Error > 0\n  function parse(input) {\n    input = input | 0;\n    offset = 0;\n    inputLength = input;\n    while ((offset | 0) < (inputLength | 0)) {\n      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0;\n      if ((code | 0) > 0) {\n        break;\n      }\n    }\n    return code | 0;\n  }\n\n  // -- Helper Function\n\n  function checkOffset(n) {\n    n = n | 0;\n    if (((offset | 0) + (n | 0) | 0) < (inputLength | 0)) {\n      return 0;\n    }\n    return 1;\n  }\n  function readUInt16(n) {\n    n = n | 0;\n    return heap[n | 0] << 8 | heap[n + 1 | 0] | 0;\n  }\n  function readUInt32(n) {\n    n = n | 0;\n    return heap[n | 0] << 24 | heap[n + 1 | 0] << 16 | heap[n + 2 | 0] << 8 | heap[n + 3 | 0] | 0;\n  }\n\n  // -- Initial Byte Handlers\n\n  function INT_P(octet) {\n    octet = octet | 0;\n    pushInt(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function UINT_P_8(octet) {\n    octet = octet | 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    pushInt(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n  function UINT_P_16(octet) {\n    octet = octet | 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    pushInt(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n  function UINT_P_32(octet) {\n    octet = octet | 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    pushInt32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n  function UINT_P_64(octet) {\n    octet = octet | 0;\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n    pushInt64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n  function INT_N(octet) {\n    octet = octet | 0;\n    pushInt(-1 - (octet - 32 | 0) | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function UINT_N_8(octet) {\n    octet = octet | 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    pushInt(-1 - (heap[offset + 1 | 0] | 0) | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n  function UINT_N_16(octet) {\n    octet = octet | 0;\n    var val = 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    val = readUInt16(offset + 1 | 0) | 0;\n    pushInt(-1 - (val | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n  function UINT_N_32(octet) {\n    octet = octet | 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    pushInt32Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n  function UINT_N_64(octet) {\n    octet = octet | 0;\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n    pushInt64Neg(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n  function BYTE_STRING(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var step = 0;\n    step = octet - 64 | 0;\n    if (checkOffset(step | 0) | 0) {\n      return 1;\n    }\n    start = offset + 1 | 0;\n    end = (offset + 1 | 0) + (step | 0) | 0;\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function BYTE_STRING_8(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    length = heap[offset + 1 | 0] | 0;\n    start = offset + 2 | 0;\n    end = (offset + 2 | 0) + (length | 0) | 0;\n    if (checkOffset(length + 1 | 0) | 0) {\n      return 1;\n    }\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function BYTE_STRING_16(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    length = readUInt16(offset + 1 | 0) | 0;\n    start = offset + 3 | 0;\n    end = (offset + 3 | 0) + (length | 0) | 0;\n    if (checkOffset(length + 2 | 0) | 0) {\n      return 1;\n    }\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function BYTE_STRING_32(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    length = readUInt32(offset + 1 | 0) | 0;\n    start = offset + 5 | 0;\n    end = (offset + 5 | 0) + (length | 0) | 0;\n    if (checkOffset(length + 4 | 0) | 0) {\n      return 1;\n    }\n    pushByteString(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function BYTE_STRING_64(octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0;\n    return 1;\n  }\n  function BYTE_STRING_BREAK(octet) {\n    octet = octet | 0;\n    pushByteStringStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function UTF8_STRING(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var step = 0;\n    step = octet - 96 | 0;\n    if (checkOffset(step | 0) | 0) {\n      return 1;\n    }\n    start = offset + 1 | 0;\n    end = (offset + 1 | 0) + (step | 0) | 0;\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function UTF8_STRING_8(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    length = heap[offset + 1 | 0] | 0;\n    start = offset + 2 | 0;\n    end = (offset + 2 | 0) + (length | 0) | 0;\n    if (checkOffset(length + 1 | 0) | 0) {\n      return 1;\n    }\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function UTF8_STRING_16(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    length = readUInt16(offset + 1 | 0) | 0;\n    start = offset + 3 | 0;\n    end = (offset + 3 | 0) + (length | 0) | 0;\n    if (checkOffset(length + 2 | 0) | 0) {\n      return 1;\n    }\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function UTF8_STRING_32(octet) {\n    octet = octet | 0;\n    var start = 0;\n    var end = 0;\n    var length = 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    length = readUInt32(offset + 1 | 0) | 0;\n    start = offset + 5 | 0;\n    end = (offset + 5 | 0) + (length | 0) | 0;\n    if (checkOffset(length + 4 | 0) | 0) {\n      return 1;\n    }\n    pushUtf8String(start | 0, end | 0);\n    offset = end | 0;\n    return 0;\n  }\n  function UTF8_STRING_64(octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0;\n    return 1;\n  }\n  function UTF8_STRING_BREAK(octet) {\n    octet = octet | 0;\n    pushUtf8StringStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function ARRAY(octet) {\n    octet = octet | 0;\n    pushArrayStartFixed(octet - 128 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function ARRAY_8(octet) {\n    octet = octet | 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    pushArrayStartFixed(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n  function ARRAY_16(octet) {\n    octet = octet | 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    pushArrayStartFixed(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n  function ARRAY_32(octet) {\n    octet = octet | 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    pushArrayStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n  function ARRAY_64(octet) {\n    octet = octet | 0;\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n    pushArrayStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n  function ARRAY_BREAK(octet) {\n    octet = octet | 0;\n    pushArrayStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function MAP(octet) {\n    octet = octet | 0;\n    var step = 0;\n    step = octet - 160 | 0;\n    if (checkOffset(step | 0) | 0) {\n      return 1;\n    }\n    pushObjectStartFixed(step | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function MAP_8(octet) {\n    octet = octet | 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    pushObjectStartFixed(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n  function MAP_16(octet) {\n    octet = octet | 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    pushObjectStartFixed(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n  function MAP_32(octet) {\n    octet = octet | 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    pushObjectStartFixed32(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n  function MAP_64(octet) {\n    octet = octet | 0;\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n    pushObjectStartFixed64(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n  function MAP_BREAK(octet) {\n    octet = octet | 0;\n    pushObjectStart();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_KNOWN(octet) {\n    octet = octet | 0;\n    pushTagStart(octet - 192 | 0 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_BIGNUM_POS(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_BIGNUM_NEG(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_FRAC(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_BIGNUM_FLOAT(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_UNASSIGNED(octet) {\n    octet = octet | 0;\n    pushTagStart(octet - 192 | 0 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_BASE64_URL(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_BASE64(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_BASE16(octet) {\n    octet = octet | 0;\n    pushTagStart(octet | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function TAG_MORE_1(octet) {\n    octet = octet | 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    pushTagStart(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n  function TAG_MORE_2(octet) {\n    octet = octet | 0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    pushTagStart(readUInt16(offset + 1 | 0) | 0);\n    offset = offset + 3 | 0;\n    return 0;\n  }\n  function TAG_MORE_4(octet) {\n    octet = octet | 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    pushTagStart4(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n  function TAG_MORE_8(octet) {\n    octet = octet | 0;\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n    pushTagStart8(readUInt16(offset + 1 | 0) | 0, readUInt16(offset + 3 | 0) | 0, readUInt16(offset + 5 | 0) | 0, readUInt16(offset + 7 | 0) | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n  function SIMPLE_UNASSIGNED(octet) {\n    octet = octet | 0;\n    pushSimpleUnassigned((octet | 0) - 224 | 0);\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function SIMPLE_FALSE(octet) {\n    octet = octet | 0;\n    pushFalse();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function SIMPLE_TRUE(octet) {\n    octet = octet | 0;\n    pushTrue();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function SIMPLE_NULL(octet) {\n    octet = octet | 0;\n    pushNull();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function SIMPLE_UNDEFINED(octet) {\n    octet = octet | 0;\n    pushUndefined();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n  function SIMPLE_BYTE(octet) {\n    octet = octet | 0;\n    if (checkOffset(1) | 0) {\n      return 1;\n    }\n    pushSimpleUnassigned(heap[offset + 1 | 0] | 0);\n    offset = offset + 2 | 0;\n    return 0;\n  }\n  function SIMPLE_FLOAT_HALF(octet) {\n    octet = octet | 0;\n    var f = 0;\n    var g = 0;\n    var sign = 1.0;\n    var exp = 0.0;\n    var mant = 0.0;\n    var r = 0.0;\n    if (checkOffset(2) | 0) {\n      return 1;\n    }\n    f = heap[offset + 1 | 0] | 0;\n    g = heap[offset + 2 | 0] | 0;\n    if ((f | 0) & 0x80) {\n      sign = -1.0;\n    }\n    exp = +(((f | 0) & 0x7C) >> 2);\n    mant = +(((f | 0) & 0x03) << 8 | g);\n    if (+exp == 0.0) {\n      pushFloat(+(+sign * +5.9604644775390625e-8 * +mant));\n    } else if (+exp == 31.0) {\n      if (+sign == 1.0) {\n        if (+mant > 0.0) {\n          pushNaN();\n        } else {\n          pushInfinity();\n        }\n      } else {\n        if (+mant > 0.0) {\n          pushNaNNeg();\n        } else {\n          pushInfinityNeg();\n        }\n      }\n    } else {\n      pushFloat(+(+sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)));\n    }\n    offset = offset + 3 | 0;\n    return 0;\n  }\n  function SIMPLE_FLOAT_SINGLE(octet) {\n    octet = octet | 0;\n    if (checkOffset(4) | 0) {\n      return 1;\n    }\n    pushFloatSingle(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0);\n    offset = offset + 5 | 0;\n    return 0;\n  }\n  function SIMPLE_FLOAT_DOUBLE(octet) {\n    octet = octet | 0;\n    if (checkOffset(8) | 0) {\n      return 1;\n    }\n    pushFloatDouble(heap[offset + 1 | 0] | 0, heap[offset + 2 | 0] | 0, heap[offset + 3 | 0] | 0, heap[offset + 4 | 0] | 0, heap[offset + 5 | 0] | 0, heap[offset + 6 | 0] | 0, heap[offset + 7 | 0] | 0, heap[offset + 8 | 0] | 0);\n    offset = offset + 9 | 0;\n    return 0;\n  }\n  function ERROR(octet) {\n    octet = octet | 0;\n    return 1;\n  }\n  function BREAK(octet) {\n    octet = octet | 0;\n    pushBreak();\n    offset = offset + 1 | 0;\n    return 0;\n  }\n\n  // -- Jump Table\n\n  var jumpTable = [\n  // Integer 0x00..0x17 (0..23)\n  INT_P,\n  // 0x00\n  INT_P,\n  // 0x01\n  INT_P,\n  // 0x02\n  INT_P,\n  // 0x03\n  INT_P,\n  // 0x04\n  INT_P,\n  // 0x05\n  INT_P,\n  // 0x06\n  INT_P,\n  // 0x07\n  INT_P,\n  // 0x08\n  INT_P,\n  // 0x09\n  INT_P,\n  // 0x0A\n  INT_P,\n  // 0x0B\n  INT_P,\n  // 0x0C\n  INT_P,\n  // 0x0D\n  INT_P,\n  // 0x0E\n  INT_P,\n  // 0x0F\n  INT_P,\n  // 0x10\n  INT_P,\n  // 0x11\n  INT_P,\n  // 0x12\n  INT_P,\n  // 0x13\n  INT_P,\n  // 0x14\n  INT_P,\n  // 0x15\n  INT_P,\n  // 0x16\n  INT_P,\n  // 0x17\n  // Unsigned integer (one-byte uint8_t follows)\n  UINT_P_8,\n  // 0x18\n  // Unsigned integer (two-byte uint16_t follows)\n  UINT_P_16,\n  // 0x19\n  // Unsigned integer (four-byte uint32_t follows)\n  UINT_P_32,\n  // 0x1a\n  // Unsigned integer (eight-byte uint64_t follows)\n  UINT_P_64,\n  // 0x1b\n  ERROR,\n  // 0x1c\n  ERROR,\n  // 0x1d\n  ERROR,\n  // 0x1e\n  ERROR,\n  // 0x1f\n  // Negative integer -1-0x00..-1-0x17 (-1..-24)\n  INT_N,\n  // 0x20\n  INT_N,\n  // 0x21\n  INT_N,\n  // 0x22\n  INT_N,\n  // 0x23\n  INT_N,\n  // 0x24\n  INT_N,\n  // 0x25\n  INT_N,\n  // 0x26\n  INT_N,\n  // 0x27\n  INT_N,\n  // 0x28\n  INT_N,\n  // 0x29\n  INT_N,\n  // 0x2A\n  INT_N,\n  // 0x2B\n  INT_N,\n  // 0x2C\n  INT_N,\n  // 0x2D\n  INT_N,\n  // 0x2E\n  INT_N,\n  // 0x2F\n  INT_N,\n  // 0x30\n  INT_N,\n  // 0x31\n  INT_N,\n  // 0x32\n  INT_N,\n  // 0x33\n  INT_N,\n  // 0x34\n  INT_N,\n  // 0x35\n  INT_N,\n  // 0x36\n  INT_N,\n  // 0x37\n  // Negative integer -1-n (one-byte uint8_t for n follows)\n  UINT_N_8,\n  // 0x38\n  // Negative integer -1-n (two-byte uint16_t for n follows)\n  UINT_N_16,\n  // 0x39\n  // Negative integer -1-n (four-byte uint32_t for nfollows)\n  UINT_N_32,\n  // 0x3a\n  // Negative integer -1-n (eight-byte uint64_t for n follows)\n  UINT_N_64,\n  // 0x3b\n  ERROR,\n  // 0x3c\n  ERROR,\n  // 0x3d\n  ERROR,\n  // 0x3e\n  ERROR,\n  // 0x3f\n  // byte string (0x00..0x17 bytes follow)\n  BYTE_STRING,\n  // 0x40\n  BYTE_STRING,\n  // 0x41\n  BYTE_STRING,\n  // 0x42\n  BYTE_STRING,\n  // 0x43\n  BYTE_STRING,\n  // 0x44\n  BYTE_STRING,\n  // 0x45\n  BYTE_STRING,\n  // 0x46\n  BYTE_STRING,\n  // 0x47\n  BYTE_STRING,\n  // 0x48\n  BYTE_STRING,\n  // 0x49\n  BYTE_STRING,\n  // 0x4A\n  BYTE_STRING,\n  // 0x4B\n  BYTE_STRING,\n  // 0x4C\n  BYTE_STRING,\n  // 0x4D\n  BYTE_STRING,\n  // 0x4E\n  BYTE_STRING,\n  // 0x4F\n  BYTE_STRING,\n  // 0x50\n  BYTE_STRING,\n  // 0x51\n  BYTE_STRING,\n  // 0x52\n  BYTE_STRING,\n  // 0x53\n  BYTE_STRING,\n  // 0x54\n  BYTE_STRING,\n  // 0x55\n  BYTE_STRING,\n  // 0x56\n  BYTE_STRING,\n  // 0x57\n  // byte string (one-byte uint8_t for n, and then n bytes follow)\n  BYTE_STRING_8,\n  // 0x58\n  // byte string (two-byte uint16_t for n, and then n bytes follow)\n  BYTE_STRING_16,\n  // 0x59\n  // byte string (four-byte uint32_t for n, and then n bytes follow)\n  BYTE_STRING_32,\n  // 0x5a\n  // byte string (eight-byte uint64_t for n, and then n bytes follow)\n  BYTE_STRING_64,\n  // 0x5b\n  ERROR,\n  // 0x5c\n  ERROR,\n  // 0x5d\n  ERROR,\n  // 0x5e\n  // byte string, byte strings follow, terminated by \"break\"\n  BYTE_STRING_BREAK,\n  // 0x5f\n  // UTF-8 string (0x00..0x17 bytes follow)\n  UTF8_STRING,\n  // 0x60\n  UTF8_STRING,\n  // 0x61\n  UTF8_STRING,\n  // 0x62\n  UTF8_STRING,\n  // 0x63\n  UTF8_STRING,\n  // 0x64\n  UTF8_STRING,\n  // 0x65\n  UTF8_STRING,\n  // 0x66\n  UTF8_STRING,\n  // 0x67\n  UTF8_STRING,\n  // 0x68\n  UTF8_STRING,\n  // 0x69\n  UTF8_STRING,\n  // 0x6A\n  UTF8_STRING,\n  // 0x6B\n  UTF8_STRING,\n  // 0x6C\n  UTF8_STRING,\n  // 0x6D\n  UTF8_STRING,\n  // 0x6E\n  UTF8_STRING,\n  // 0x6F\n  UTF8_STRING,\n  // 0x70\n  UTF8_STRING,\n  // 0x71\n  UTF8_STRING,\n  // 0x72\n  UTF8_STRING,\n  // 0x73\n  UTF8_STRING,\n  // 0x74\n  UTF8_STRING,\n  // 0x75\n  UTF8_STRING,\n  // 0x76\n  UTF8_STRING,\n  // 0x77\n  // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)\n  UTF8_STRING_8,\n  // 0x78\n  // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)\n  UTF8_STRING_16,\n  // 0x79\n  // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)\n  UTF8_STRING_32,\n  // 0x7a\n  // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)\n  UTF8_STRING_64,\n  // 0x7b\n  // UTF-8 string, UTF-8 strings follow, terminated by \"break\"\n  ERROR,\n  // 0x7c\n  ERROR,\n  // 0x7d\n  ERROR,\n  // 0x7e\n  UTF8_STRING_BREAK,\n  // 0x7f\n  // array (0x00..0x17 data items follow)\n  ARRAY,\n  // 0x80\n  ARRAY,\n  // 0x81\n  ARRAY,\n  // 0x82\n  ARRAY,\n  // 0x83\n  ARRAY,\n  // 0x84\n  ARRAY,\n  // 0x85\n  ARRAY,\n  // 0x86\n  ARRAY,\n  // 0x87\n  ARRAY,\n  // 0x88\n  ARRAY,\n  // 0x89\n  ARRAY,\n  // 0x8A\n  ARRAY,\n  // 0x8B\n  ARRAY,\n  // 0x8C\n  ARRAY,\n  // 0x8D\n  ARRAY,\n  // 0x8E\n  ARRAY,\n  // 0x8F\n  ARRAY,\n  // 0x90\n  ARRAY,\n  // 0x91\n  ARRAY,\n  // 0x92\n  ARRAY,\n  // 0x93\n  ARRAY,\n  // 0x94\n  ARRAY,\n  // 0x95\n  ARRAY,\n  // 0x96\n  ARRAY,\n  // 0x97\n  // array (one-byte uint8_t fo, and then n data items follow)\n  ARRAY_8,\n  // 0x98\n  // array (two-byte uint16_t for n, and then n data items follow)\n  ARRAY_16,\n  // 0x99\n  // array (four-byte uint32_t for n, and then n data items follow)\n  ARRAY_32,\n  // 0x9a\n  // array (eight-byte uint64_t for n, and then n data items follow)\n  ARRAY_64,\n  // 0x9b\n  // array, data items follow, terminated by \"break\"\n  ERROR,\n  // 0x9c\n  ERROR,\n  // 0x9d\n  ERROR,\n  // 0x9e\n  ARRAY_BREAK,\n  // 0x9f\n  // map (0x00..0x17 pairs of data items follow)\n  MAP,\n  // 0xa0\n  MAP,\n  // 0xa1\n  MAP,\n  // 0xa2\n  MAP,\n  // 0xa3\n  MAP,\n  // 0xa4\n  MAP,\n  // 0xa5\n  MAP,\n  // 0xa6\n  MAP,\n  // 0xa7\n  MAP,\n  // 0xa8\n  MAP,\n  // 0xa9\n  MAP,\n  // 0xaA\n  MAP,\n  // 0xaB\n  MAP,\n  // 0xaC\n  MAP,\n  // 0xaD\n  MAP,\n  // 0xaE\n  MAP,\n  // 0xaF\n  MAP,\n  // 0xb0\n  MAP,\n  // 0xb1\n  MAP,\n  // 0xb2\n  MAP,\n  // 0xb3\n  MAP,\n  // 0xb4\n  MAP,\n  // 0xb5\n  MAP,\n  // 0xb6\n  MAP,\n  // 0xb7\n  // map (one-byte uint8_t for n, and then n pairs of data items follow)\n  MAP_8,\n  // 0xb8\n  // map (two-byte uint16_t for n, and then n pairs of data items follow)\n  MAP_16,\n  // 0xb9\n  // map (four-byte uint32_t for n, and then n pairs of data items follow)\n  MAP_32,\n  // 0xba\n  // map (eight-byte uint64_t for n, and then n pairs of data items follow)\n  MAP_64,\n  // 0xbb\n  ERROR,\n  // 0xbc\n  ERROR,\n  // 0xbd\n  ERROR,\n  // 0xbe\n  // map, pairs of data items follow, terminated by \"break\"\n  MAP_BREAK,\n  // 0xbf\n  // Text-based date/time (data item follows; see Section 2.4.1)\n  TAG_KNOWN,\n  // 0xc0\n  // Epoch-based date/time (data item follows; see Section 2.4.1)\n  TAG_KNOWN,\n  // 0xc1\n  // Positive bignum (data item \"byte string\" follows)\n  TAG_KNOWN,\n  // 0xc2\n  // Negative bignum (data item \"byte string\" follows)\n  TAG_KNOWN,\n  // 0xc3\n  // Decimal Fraction (data item \"array\" follows; see Section 2.4.3)\n  TAG_KNOWN,\n  // 0xc4\n  // Bigfloat (data item \"array\" follows; see Section 2.4.3)\n  TAG_KNOWN,\n  // 0xc5\n  // (tagged item)\n  TAG_UNASSIGNED,\n  // 0xc6\n  TAG_UNASSIGNED,\n  // 0xc7\n  TAG_UNASSIGNED,\n  // 0xc8\n  TAG_UNASSIGNED,\n  // 0xc9\n  TAG_UNASSIGNED,\n  // 0xca\n  TAG_UNASSIGNED,\n  // 0xcb\n  TAG_UNASSIGNED,\n  // 0xcc\n  TAG_UNASSIGNED,\n  // 0xcd\n  TAG_UNASSIGNED,\n  // 0xce\n  TAG_UNASSIGNED,\n  // 0xcf\n  TAG_UNASSIGNED,\n  // 0xd0\n  TAG_UNASSIGNED,\n  // 0xd1\n  TAG_UNASSIGNED,\n  // 0xd2\n  TAG_UNASSIGNED,\n  // 0xd3\n  TAG_UNASSIGNED,\n  // 0xd4\n  // Expected Conversion (data item follows; see Section 2.4.4.2)\n  TAG_UNASSIGNED,\n  // 0xd5\n  TAG_UNASSIGNED,\n  // 0xd6\n  TAG_UNASSIGNED,\n  // 0xd7\n  // (more tagged items, 1/2/4/8 bytes and then a data item follow)\n  TAG_MORE_1,\n  // 0xd8\n  TAG_MORE_2,\n  // 0xd9\n  TAG_MORE_4,\n  // 0xda\n  TAG_MORE_8,\n  // 0xdb\n  ERROR,\n  // 0xdc\n  ERROR,\n  // 0xdd\n  ERROR,\n  // 0xde\n  ERROR,\n  // 0xdf\n  // (simple value)\n  SIMPLE_UNASSIGNED,\n  // 0xe0\n  SIMPLE_UNASSIGNED,\n  // 0xe1\n  SIMPLE_UNASSIGNED,\n  // 0xe2\n  SIMPLE_UNASSIGNED,\n  // 0xe3\n  SIMPLE_UNASSIGNED,\n  // 0xe4\n  SIMPLE_UNASSIGNED,\n  // 0xe5\n  SIMPLE_UNASSIGNED,\n  // 0xe6\n  SIMPLE_UNASSIGNED,\n  // 0xe7\n  SIMPLE_UNASSIGNED,\n  // 0xe8\n  SIMPLE_UNASSIGNED,\n  // 0xe9\n  SIMPLE_UNASSIGNED,\n  // 0xea\n  SIMPLE_UNASSIGNED,\n  // 0xeb\n  SIMPLE_UNASSIGNED,\n  // 0xec\n  SIMPLE_UNASSIGNED,\n  // 0xed\n  SIMPLE_UNASSIGNED,\n  // 0xee\n  SIMPLE_UNASSIGNED,\n  // 0xef\n  SIMPLE_UNASSIGNED,\n  // 0xf0\n  SIMPLE_UNASSIGNED,\n  // 0xf1\n  SIMPLE_UNASSIGNED,\n  // 0xf2\n  SIMPLE_UNASSIGNED,\n  // 0xf3\n  // False\n  SIMPLE_FALSE,\n  // 0xf4\n  // True\n  SIMPLE_TRUE,\n  // 0xf5\n  // Null\n  SIMPLE_NULL,\n  // 0xf6\n  // Undefined\n  SIMPLE_UNDEFINED,\n  // 0xf7\n  // (simple value, one byte follows)\n  SIMPLE_BYTE,\n  // 0xf8\n  // Half-Precision Float (two-byte IEEE 754)\n  SIMPLE_FLOAT_HALF,\n  // 0xf9\n  // Single-Precision Float (four-byte IEEE 754)\n  SIMPLE_FLOAT_SINGLE,\n  // 0xfa\n  // Double-Precision Float (eight-byte IEEE 754)\n  SIMPLE_FLOAT_DOUBLE,\n  // 0xfb\n  ERROR,\n  // 0xfc\n  ERROR,\n  // 0xfd\n  ERROR,\n  // 0xfe\n  // \"break\" stop code\n  BREAK // 0xff\n  ];\n\n  // --\n\n  return {\n    parse: parse\n  };\n};","map":{"version":3,"names":["module","exports","decodeAsm","stdlib","foreign","buffer","heap","Uint8Array","pushInt","pushInt32","pushInt32Neg","pushInt64","pushInt64Neg","pushFloat","pushFloatSingle","pushFloatDouble","pushTrue","pushFalse","pushUndefined","pushNull","pushInfinity","pushInfinityNeg","pushNaN","pushNaNNeg","pushArrayStart","pushArrayStartFixed","pushArrayStartFixed32","pushArrayStartFixed64","pushObjectStart","pushObjectStartFixed","pushObjectStartFixed32","pushObjectStartFixed64","pushByteString","pushByteStringStart","pushUtf8String","pushUtf8StringStart","pushSimpleUnassigned","pushTagStart","pushTagStart4","pushTagStart8","pushTagUnassigned","pushBreak","pow","Math","offset","inputLength","code","parse","input","jumpTable","checkOffset","n","readUInt16","readUInt32","INT_P","octet","UINT_P_8","UINT_P_16","UINT_P_32","UINT_P_64","INT_N","UINT_N_8","UINT_N_16","val","UINT_N_32","UINT_N_64","BYTE_STRING","start","end","step","BYTE_STRING_8","length","BYTE_STRING_16","BYTE_STRING_32","BYTE_STRING_64","BYTE_STRING_BREAK","UTF8_STRING","UTF8_STRING_8","UTF8_STRING_16","UTF8_STRING_32","UTF8_STRING_64","UTF8_STRING_BREAK","ARRAY","ARRAY_8","ARRAY_16","ARRAY_32","ARRAY_64","ARRAY_BREAK","MAP","MAP_8","MAP_16","MAP_32","MAP_64","MAP_BREAK","TAG_KNOWN","TAG_BIGNUM_POS","TAG_BIGNUM_NEG","TAG_FRAC","TAG_BIGNUM_FLOAT","TAG_UNASSIGNED","TAG_BASE64_URL","TAG_BASE64","TAG_BASE16","TAG_MORE_1","TAG_MORE_2","TAG_MORE_4","TAG_MORE_8","SIMPLE_UNASSIGNED","SIMPLE_FALSE","SIMPLE_TRUE","SIMPLE_NULL","SIMPLE_UNDEFINED","SIMPLE_BYTE","SIMPLE_FLOAT_HALF","f","g","sign","exp","mant","r","SIMPLE_FLOAT_SINGLE","SIMPLE_FLOAT_DOUBLE","ERROR","BREAK"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/borc/src/decoder.asm.js"],"sourcesContent":["/* eslint-disable */\n\nmodule.exports = function decodeAsm (stdlib, foreign, buffer) {\n  'use asm'\n\n  // -- Imports\n\n  var heap = new stdlib.Uint8Array(buffer)\n  // var log = foreign.log\n  var pushInt = foreign.pushInt\n  var pushInt32 = foreign.pushInt32\n  var pushInt32Neg = foreign.pushInt32Neg\n  var pushInt64 = foreign.pushInt64\n  var pushInt64Neg = foreign.pushInt64Neg\n  var pushFloat = foreign.pushFloat\n  var pushFloatSingle = foreign.pushFloatSingle\n  var pushFloatDouble = foreign.pushFloatDouble\n  var pushTrue = foreign.pushTrue\n  var pushFalse = foreign.pushFalse\n  var pushUndefined = foreign.pushUndefined\n  var pushNull = foreign.pushNull\n  var pushInfinity = foreign.pushInfinity\n  var pushInfinityNeg = foreign.pushInfinityNeg\n  var pushNaN = foreign.pushNaN\n  var pushNaNNeg = foreign.pushNaNNeg\n\n  var pushArrayStart = foreign.pushArrayStart\n  var pushArrayStartFixed = foreign.pushArrayStartFixed\n  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32\n  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64\n  var pushObjectStart = foreign.pushObjectStart\n  var pushObjectStartFixed = foreign.pushObjectStartFixed\n  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32\n  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64\n\n  var pushByteString = foreign.pushByteString\n  var pushByteStringStart = foreign.pushByteStringStart\n  var pushUtf8String = foreign.pushUtf8String\n  var pushUtf8StringStart = foreign.pushUtf8StringStart\n\n  var pushSimpleUnassigned = foreign.pushSimpleUnassigned\n\n  var pushTagStart = foreign.pushTagStart\n  var pushTagStart4 = foreign.pushTagStart4\n  var pushTagStart8 = foreign.pushTagStart8\n  var pushTagUnassigned = foreign.pushTagUnassigned\n\n  var pushBreak = foreign.pushBreak\n\n  var pow = stdlib.Math.pow\n\n  // -- Constants\n\n\n  // -- Mutable Variables\n\n  var offset = 0\n  var inputLength = 0\n  var code = 0\n\n  // Decode a cbor string represented as Uint8Array\n  // which is allocated on the heap from 0 to inputLength\n  //\n  // input - Int\n  //\n  // Returns Code - Int,\n  // Success = 0\n  // Error > 0\n  function parse (input) {\n    input = input | 0\n\n    offset = 0\n    inputLength = input\n\n    while ((offset | 0) < (inputLength | 0)) {\n      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0\n\n      if ((code | 0) > 0) {\n        break\n      }\n    }\n\n    return code | 0\n  }\n\n  // -- Helper Function\n\n  function checkOffset (n) {\n    n = n | 0\n\n    if ((((offset | 0) + (n | 0)) | 0) < (inputLength | 0)) {\n      return 0\n    }\n\n    return 1\n  }\n\n  function readUInt16 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 8) | heap[(n + 1) | 0]\n    ) | 0\n  }\n\n  function readUInt32 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 24) | (heap[(n + 1) | 0] << 16) | (heap[(n + 2) | 0] << 8) | heap[(n + 3) | 0]\n    ) | 0\n  }\n\n  // -- Initial Byte Handlers\n\n  function INT_P (octet) {\n    octet = octet | 0\n\n    pushInt(octet | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_P_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_P_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushInt(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_P_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_P_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function INT_N (octet) {\n    octet = octet | 0\n\n    pushInt((-1 - ((octet - 32) | 0)) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_N_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(\n      (-1 - (heap[(offset + 1) | 0] | 0)) | 0\n    )\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_N_16 (octet) {\n    octet = octet | 0\n\n    var val = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    val = readUInt16((offset + 1) | 0) | 0\n    pushInt((-1 - (val | 0)) | 0)\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_N_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_N_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function BYTE_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 64) | 0\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BYTE_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushByteStringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UTF8_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 96) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function UTF8_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushUtf8StringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY (octet) {\n    octet = octet | 0\n\n    pushArrayStartFixed((octet - 128) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function ARRAY_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function ARRAY_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function ARRAY_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ARRAY_BREAK (octet) {\n    octet = octet | 0\n\n    pushArrayStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP (octet) {\n    octet = octet | 0\n\n    var step = 0\n\n    step = (octet - 160) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(step | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function MAP_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function MAP_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function MAP_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function MAP_BREAK (octet) {\n    octet = octet | 0\n\n    pushObjectStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function TAG_KNOWN (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_POS (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_NEG (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_FRAC (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_FLOAT (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64_URL (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE16 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_1 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushTagStart(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_2 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushTagStart(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_4 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushTagStart4(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushTagStart8(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9 | 0)\n\n    return 0\n  }\n\n  function SIMPLE_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushSimpleUnassigned(((octet | 0) - 224) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FALSE (octet) {\n    octet = octet | 0\n\n    pushFalse()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_TRUE (octet) {\n    octet = octet | 0\n\n    pushTrue()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_NULL (octet) {\n    octet = octet | 0\n\n    pushNull()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_UNDEFINED (octet) {\n    octet = octet | 0\n\n    pushUndefined()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_BYTE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushSimpleUnassigned(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2)  | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_HALF (octet) {\n    octet = octet | 0\n\n    var f = 0\n    var g = 0\n    var sign = 1.0\n    var exp = 0.0\n    var mant = 0.0\n    var r = 0.0\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    f = heap[(offset + 1) | 0] | 0\n    g = heap[(offset + 2) | 0] | 0\n\n    if ((f | 0) & 0x80) {\n      sign = -1.0\n    }\n\n    exp = +(((f | 0) & 0x7C) >> 2)\n    mant = +((((f | 0) & 0x03) << 8) | g)\n\n    if (+exp == 0.0) {\n      pushFloat(+(\n        (+sign) * +5.9604644775390625e-8 * (+mant)\n      ))\n    } else if (+exp == 31.0) {\n      if (+sign == 1.0) {\n        if (+mant > 0.0) {\n          pushNaN()\n        } else {\n          pushInfinity()\n        }\n      } else {\n        if (+mant > 0.0) {\n          pushNaNNeg()\n        } else {\n          pushInfinityNeg()\n        }\n      }\n    } else {\n      pushFloat(+(\n        +sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)\n      ))\n    }\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_SINGLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushFloatSingle(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_DOUBLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushFloatDouble(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0,\n      heap[(offset + 5) | 0] | 0,\n      heap[(offset + 6) | 0] | 0,\n      heap[(offset + 7) | 0] | 0,\n      heap[(offset + 8) | 0] | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ERROR (octet) {\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BREAK (octet) {\n    octet = octet | 0\n\n    pushBreak()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  // -- Jump Table\n\n  var jumpTable = [\n    // Integer 0x00..0x17 (0..23)\n    INT_P, // 0x00\n    INT_P, // 0x01\n    INT_P, // 0x02\n    INT_P, // 0x03\n    INT_P, // 0x04\n    INT_P, // 0x05\n    INT_P, // 0x06\n    INT_P, // 0x07\n    INT_P, // 0x08\n    INT_P, // 0x09\n    INT_P, // 0x0A\n    INT_P, // 0x0B\n    INT_P, // 0x0C\n    INT_P, // 0x0D\n    INT_P, // 0x0E\n    INT_P, // 0x0F\n    INT_P, // 0x10\n    INT_P, // 0x11\n    INT_P, // 0x12\n    INT_P, // 0x13\n    INT_P, // 0x14\n    INT_P, // 0x15\n    INT_P, // 0x16\n    INT_P, // 0x17\n    // Unsigned integer (one-byte uint8_t follows)\n    UINT_P_8, // 0x18\n    // Unsigned integer (two-byte uint16_t follows)\n    UINT_P_16, // 0x19\n    // Unsigned integer (four-byte uint32_t follows)\n    UINT_P_32, // 0x1a\n    // Unsigned integer (eight-byte uint64_t follows)\n    UINT_P_64, // 0x1b\n    ERROR, // 0x1c\n    ERROR, // 0x1d\n    ERROR, // 0x1e\n    ERROR, // 0x1f\n    // Negative integer -1-0x00..-1-0x17 (-1..-24)\n    INT_N, // 0x20\n    INT_N, // 0x21\n    INT_N, // 0x22\n    INT_N, // 0x23\n    INT_N, // 0x24\n    INT_N, // 0x25\n    INT_N, // 0x26\n    INT_N, // 0x27\n    INT_N, // 0x28\n    INT_N, // 0x29\n    INT_N, // 0x2A\n    INT_N, // 0x2B\n    INT_N, // 0x2C\n    INT_N, // 0x2D\n    INT_N, // 0x2E\n    INT_N, // 0x2F\n    INT_N, // 0x30\n    INT_N, // 0x31\n    INT_N, // 0x32\n    INT_N, // 0x33\n    INT_N, // 0x34\n    INT_N, // 0x35\n    INT_N, // 0x36\n    INT_N, // 0x37\n    // Negative integer -1-n (one-byte uint8_t for n follows)\n    UINT_N_8, // 0x38\n    // Negative integer -1-n (two-byte uint16_t for n follows)\n    UINT_N_16, // 0x39\n    // Negative integer -1-n (four-byte uint32_t for nfollows)\n    UINT_N_32, // 0x3a\n    // Negative integer -1-n (eight-byte uint64_t for n follows)\n    UINT_N_64, // 0x3b\n    ERROR, // 0x3c\n    ERROR, // 0x3d\n    ERROR, // 0x3e\n    ERROR, // 0x3f\n    // byte string (0x00..0x17 bytes follow)\n    BYTE_STRING, // 0x40\n    BYTE_STRING, // 0x41\n    BYTE_STRING, // 0x42\n    BYTE_STRING, // 0x43\n    BYTE_STRING, // 0x44\n    BYTE_STRING, // 0x45\n    BYTE_STRING, // 0x46\n    BYTE_STRING, // 0x47\n    BYTE_STRING, // 0x48\n    BYTE_STRING, // 0x49\n    BYTE_STRING, // 0x4A\n    BYTE_STRING, // 0x4B\n    BYTE_STRING, // 0x4C\n    BYTE_STRING, // 0x4D\n    BYTE_STRING, // 0x4E\n    BYTE_STRING, // 0x4F\n    BYTE_STRING, // 0x50\n    BYTE_STRING, // 0x51\n    BYTE_STRING, // 0x52\n    BYTE_STRING, // 0x53\n    BYTE_STRING, // 0x54\n    BYTE_STRING, // 0x55\n    BYTE_STRING, // 0x56\n    BYTE_STRING, // 0x57\n    // byte string (one-byte uint8_t for n, and then n bytes follow)\n    BYTE_STRING_8, // 0x58\n    // byte string (two-byte uint16_t for n, and then n bytes follow)\n    BYTE_STRING_16, // 0x59\n    // byte string (four-byte uint32_t for n, and then n bytes follow)\n    BYTE_STRING_32, // 0x5a\n    // byte string (eight-byte uint64_t for n, and then n bytes follow)\n    BYTE_STRING_64, // 0x5b\n    ERROR, // 0x5c\n    ERROR, // 0x5d\n    ERROR, // 0x5e\n    // byte string, byte strings follow, terminated by \"break\"\n    BYTE_STRING_BREAK, // 0x5f\n    // UTF-8 string (0x00..0x17 bytes follow)\n    UTF8_STRING, // 0x60\n    UTF8_STRING, // 0x61\n    UTF8_STRING, // 0x62\n    UTF8_STRING, // 0x63\n    UTF8_STRING, // 0x64\n    UTF8_STRING, // 0x65\n    UTF8_STRING, // 0x66\n    UTF8_STRING, // 0x67\n    UTF8_STRING, // 0x68\n    UTF8_STRING, // 0x69\n    UTF8_STRING, // 0x6A\n    UTF8_STRING, // 0x6B\n    UTF8_STRING, // 0x6C\n    UTF8_STRING, // 0x6D\n    UTF8_STRING, // 0x6E\n    UTF8_STRING, // 0x6F\n    UTF8_STRING, // 0x70\n    UTF8_STRING, // 0x71\n    UTF8_STRING, // 0x72\n    UTF8_STRING, // 0x73\n    UTF8_STRING, // 0x74\n    UTF8_STRING, // 0x75\n    UTF8_STRING, // 0x76\n    UTF8_STRING, // 0x77\n    // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)\n    UTF8_STRING_8, // 0x78\n    // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)\n    UTF8_STRING_16, // 0x79\n    // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)\n    UTF8_STRING_32, // 0x7a\n    // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)\n    UTF8_STRING_64, // 0x7b\n    // UTF-8 string, UTF-8 strings follow, terminated by \"break\"\n    ERROR, // 0x7c\n    ERROR, // 0x7d\n    ERROR, // 0x7e\n    UTF8_STRING_BREAK, // 0x7f\n    // array (0x00..0x17 data items follow)\n    ARRAY, // 0x80\n    ARRAY, // 0x81\n    ARRAY, // 0x82\n    ARRAY, // 0x83\n    ARRAY, // 0x84\n    ARRAY, // 0x85\n    ARRAY, // 0x86\n    ARRAY, // 0x87\n    ARRAY, // 0x88\n    ARRAY, // 0x89\n    ARRAY, // 0x8A\n    ARRAY, // 0x8B\n    ARRAY, // 0x8C\n    ARRAY, // 0x8D\n    ARRAY, // 0x8E\n    ARRAY, // 0x8F\n    ARRAY, // 0x90\n    ARRAY, // 0x91\n    ARRAY, // 0x92\n    ARRAY, // 0x93\n    ARRAY, // 0x94\n    ARRAY, // 0x95\n    ARRAY, // 0x96\n    ARRAY, // 0x97\n    // array (one-byte uint8_t fo, and then n data items follow)\n    ARRAY_8, // 0x98\n    // array (two-byte uint16_t for n, and then n data items follow)\n    ARRAY_16, // 0x99\n    // array (four-byte uint32_t for n, and then n data items follow)\n    ARRAY_32, // 0x9a\n    // array (eight-byte uint64_t for n, and then n data items follow)\n    ARRAY_64, // 0x9b\n    // array, data items follow, terminated by \"break\"\n    ERROR, // 0x9c\n    ERROR, // 0x9d\n    ERROR, // 0x9e\n    ARRAY_BREAK, // 0x9f\n    // map (0x00..0x17 pairs of data items follow)\n    MAP, // 0xa0\n    MAP, // 0xa1\n    MAP, // 0xa2\n    MAP, // 0xa3\n    MAP, // 0xa4\n    MAP, // 0xa5\n    MAP, // 0xa6\n    MAP, // 0xa7\n    MAP, // 0xa8\n    MAP, // 0xa9\n    MAP, // 0xaA\n    MAP, // 0xaB\n    MAP, // 0xaC\n    MAP, // 0xaD\n    MAP, // 0xaE\n    MAP, // 0xaF\n    MAP, // 0xb0\n    MAP, // 0xb1\n    MAP, // 0xb2\n    MAP, // 0xb3\n    MAP, // 0xb4\n    MAP, // 0xb5\n    MAP, // 0xb6\n    MAP, // 0xb7\n    // map (one-byte uint8_t for n, and then n pairs of data items follow)\n    MAP_8, // 0xb8\n    // map (two-byte uint16_t for n, and then n pairs of data items follow)\n    MAP_16, // 0xb9\n    // map (four-byte uint32_t for n, and then n pairs of data items follow)\n    MAP_32, // 0xba\n    // map (eight-byte uint64_t for n, and then n pairs of data items follow)\n    MAP_64, // 0xbb\n    ERROR, // 0xbc\n    ERROR, // 0xbd\n    ERROR, // 0xbe\n    // map, pairs of data items follow, terminated by \"break\"\n    MAP_BREAK, // 0xbf\n    // Text-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc0\n    // Epoch-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc1\n    // Positive bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc2\n    // Negative bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc3\n    // Decimal Fraction (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc4\n    // Bigfloat (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc5\n    // (tagged item)\n    TAG_UNASSIGNED, // 0xc6\n    TAG_UNASSIGNED, // 0xc7\n    TAG_UNASSIGNED, // 0xc8\n    TAG_UNASSIGNED, // 0xc9\n    TAG_UNASSIGNED, // 0xca\n    TAG_UNASSIGNED, // 0xcb\n    TAG_UNASSIGNED, // 0xcc\n    TAG_UNASSIGNED, // 0xcd\n    TAG_UNASSIGNED, // 0xce\n    TAG_UNASSIGNED, // 0xcf\n    TAG_UNASSIGNED, // 0xd0\n    TAG_UNASSIGNED, // 0xd1\n    TAG_UNASSIGNED, // 0xd2\n    TAG_UNASSIGNED, // 0xd3\n    TAG_UNASSIGNED, // 0xd4\n    // Expected Conversion (data item follows; see Section 2.4.4.2)\n    TAG_UNASSIGNED, // 0xd5\n    TAG_UNASSIGNED, // 0xd6\n    TAG_UNASSIGNED, // 0xd7\n    // (more tagged items, 1/2/4/8 bytes and then a data item follow)\n    TAG_MORE_1, // 0xd8\n    TAG_MORE_2, // 0xd9\n    TAG_MORE_4, // 0xda\n    TAG_MORE_8, // 0xdb\n    ERROR, // 0xdc\n    ERROR, // 0xdd\n    ERROR, // 0xde\n    ERROR, // 0xdf\n    // (simple value)\n    SIMPLE_UNASSIGNED, // 0xe0\n    SIMPLE_UNASSIGNED, // 0xe1\n    SIMPLE_UNASSIGNED, // 0xe2\n    SIMPLE_UNASSIGNED, // 0xe3\n    SIMPLE_UNASSIGNED, // 0xe4\n    SIMPLE_UNASSIGNED, // 0xe5\n    SIMPLE_UNASSIGNED, // 0xe6\n    SIMPLE_UNASSIGNED, // 0xe7\n    SIMPLE_UNASSIGNED, // 0xe8\n    SIMPLE_UNASSIGNED, // 0xe9\n    SIMPLE_UNASSIGNED, // 0xea\n    SIMPLE_UNASSIGNED, // 0xeb\n    SIMPLE_UNASSIGNED, // 0xec\n    SIMPLE_UNASSIGNED, // 0xed\n    SIMPLE_UNASSIGNED, // 0xee\n    SIMPLE_UNASSIGNED, // 0xef\n    SIMPLE_UNASSIGNED, // 0xf0\n    SIMPLE_UNASSIGNED, // 0xf1\n    SIMPLE_UNASSIGNED, // 0xf2\n    SIMPLE_UNASSIGNED, // 0xf3\n    // False\n    SIMPLE_FALSE, // 0xf4\n    // True\n    SIMPLE_TRUE, // 0xf5\n    // Null\n    SIMPLE_NULL, // 0xf6\n    // Undefined\n    SIMPLE_UNDEFINED, // 0xf7\n    // (simple value, one byte follows)\n    SIMPLE_BYTE, // 0xf8\n    // Half-Precision Float (two-byte IEEE 754)\n    SIMPLE_FLOAT_HALF, // 0xf9\n    // Single-Precision Float (four-byte IEEE 754)\n    SIMPLE_FLOAT_SINGLE, // 0xfa\n    // Double-Precision Float (eight-byte IEEE 754)\n    SIMPLE_FLOAT_DOUBLE, // 0xfb\n    ERROR, // 0xfc\n    ERROR, // 0xfd\n    ERROR, // 0xfe\n    // \"break\" stop code\n    BREAK // 0xff\n  ]\n\n  // --\n\n  return {\n    parse: parse\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}