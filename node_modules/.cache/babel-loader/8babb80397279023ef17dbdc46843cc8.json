{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst convert = require('./convert');\nconst protocols = require('./protocols-table');\nconst varint = require('varint');\n\n// export codec\nmodule.exports = {\n  stringToStringTuples,\n  stringTuplesToString,\n  tuplesToStringTuples,\n  stringTuplesToTuples,\n  bufferToTuples,\n  tuplesToBuffer,\n  bufferToString,\n  stringToBuffer,\n  fromString,\n  fromBuffer,\n  validateBuffer,\n  isValidBuffer,\n  cleanPath,\n  ParseError,\n  protoFromTuple,\n  sizeForAddr\n};\n\n// string -> [[str name, str addr]... ]\nfunction stringToStringTuples(str) {\n  const tuples = [];\n  const parts = str.split('/').slice(1); // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return [];\n  }\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p];\n    const proto = protocols(part);\n    if (proto.size === 0) {\n      tuples.push([part]);\n      continue;\n    }\n    p++; // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str);\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path) {\n      tuples.push([part,\n      // TODO: should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      cleanPath(parts.slice(p).join('/'))]);\n      break;\n    }\n    tuples.push([part, parts[p]]);\n  }\n  return tuples;\n}\n\n// [[str name, str addr]... ] -> string\nfunction stringTuplesToString(tuples) {\n  const parts = [];\n  tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    parts.push(proto.name);\n    if (tup.length > 1) {\n      parts.push(tup[1]);\n    }\n  });\n  return cleanPath(parts.join('/'));\n}\n\n// [[str name, str addr]... ] -> [[int code, Buffer]... ]\nfunction stringTuplesToTuples(tuples) {\n  return tuples.map(tup => {\n    if (!Array.isArray(tup)) {\n      tup = [tup];\n    }\n    const proto = protoFromTuple(tup);\n    if (tup.length > 1) {\n      return [proto.code, convert.toBuffer(proto.code, tup[1])];\n    }\n    return [proto.code];\n  });\n}\n\n// [[int code, Buffer]... ] -> [[str name, str addr]... ]\nfunction tuplesToStringTuples(tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    if (tup.length > 1) {\n      return [proto.code, convert.toString(proto.code, tup[1])];\n    }\n    return [proto.code];\n  });\n}\n\n// [[int code, Buffer ]... ] -> Buffer\nfunction tuplesToBuffer(tuples) {\n  return fromBuffer(Buffer.concat(tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    let buf = Buffer.from(varint.encode(proto.code));\n    if (tup.length > 1) {\n      buf = Buffer.concat([buf, tup[1]]); // add address buffer\n    }\n\n    return buf;\n  })));\n}\nfunction sizeForAddr(p, addr) {\n  if (p.size > 0) {\n    return p.size / 8;\n  } else if (p.size === 0) {\n    return 0;\n  } else {\n    const size = varint.decode(addr);\n    return size + varint.decode.bytes;\n  }\n}\n\n// Buffer -> [[int code, Buffer ]... ]\nfunction bufferToTuples(buf) {\n  const tuples = [];\n  let i = 0;\n  while (i < buf.length) {\n    const code = varint.decode(buf, i);\n    const n = varint.decode.bytes;\n    const p = protocols(code);\n    const size = sizeForAddr(p, buf.slice(i + n));\n    if (size === 0) {\n      tuples.push([code]);\n      i += n;\n      continue;\n    }\n    const addr = buf.slice(i + n, i + n + size);\n    i += size + n;\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address buffer: ' + buf.toString('hex'));\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr]);\n  }\n  return tuples;\n}\n\n// Buffer -> String\nfunction bufferToString(buf) {\n  const a = bufferToTuples(buf);\n  const b = tuplesToStringTuples(a);\n  return stringTuplesToString(b);\n}\n\n// String -> Buffer\nfunction stringToBuffer(str) {\n  str = cleanPath(str);\n  const a = stringToStringTuples(str);\n  const b = stringTuplesToTuples(a);\n  return tuplesToBuffer(b);\n}\n\n// String -> Buffer\nfunction fromString(str) {\n  return stringToBuffer(str);\n}\n\n// Buffer -> Buffer\nfunction fromBuffer(buf) {\n  const err = validateBuffer(buf);\n  if (err) throw err;\n  return Buffer.from(buf); // copy\n}\n\nfunction validateBuffer(buf) {\n  try {\n    bufferToTuples(buf); // try to parse. will throw if breaks\n  } catch (err) {\n    return err;\n  }\n}\nfunction isValidBuffer(buf) {\n  return validateBuffer(buf) === undefined;\n}\nfunction cleanPath(str) {\n  return '/' + str.trim().split('/').filter(a => a).join('/');\n}\nfunction ParseError(str) {\n  return new Error('Error parsing address: ' + str);\n}\nfunction protoFromTuple(tup) {\n  const proto = protocols(tup[0]);\n  return proto;\n}","map":{"version":3,"names":["Buffer","require","convert","protocols","varint","module","exports","stringToStringTuples","stringTuplesToString","tuplesToStringTuples","stringTuplesToTuples","bufferToTuples","tuplesToBuffer","bufferToString","stringToBuffer","fromString","fromBuffer","validateBuffer","isValidBuffer","cleanPath","ParseError","protoFromTuple","sizeForAddr","str","tuples","parts","split","slice","length","p","part","proto","size","push","path","join","map","tup","name","Array","isArray","code","toBuffer","toString","concat","buf","from","encode","addr","decode","bytes","i","n","a","b","err","undefined","trim","filter","Error"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/is-ipfs/node_modules/multiaddr/src/codec.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst convert = require('./convert')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\n\n// export codec\nmodule.exports = {\n  stringToStringTuples,\n  stringTuplesToString,\n\n  tuplesToStringTuples,\n  stringTuplesToTuples,\n\n  bufferToTuples,\n  tuplesToBuffer,\n\n  bufferToString,\n  stringToBuffer,\n\n  fromString,\n  fromBuffer,\n  validateBuffer,\n  isValidBuffer,\n  cleanPath,\n\n  ParseError,\n  protoFromTuple,\n\n  sizeForAddr\n}\n\n// string -> [[str name, str addr]... ]\nfunction stringToStringTuples (str) {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = protocols(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path) {\n      tuples.push([\n        part,\n        // TODO: should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/'))\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n// [[str name, str addr]... ] -> string\nfunction stringTuplesToString (tuples) {\n  const parts = []\n  tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1) {\n      parts.push(tup[1])\n    }\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n// [[str name, str addr]... ] -> [[int code, Buffer]... ]\nfunction stringTuplesToTuples (tuples) {\n  return tuples.map(tup => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toBuffer(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Buffer]... ] -> [[str name, str addr]... ]\nfunction tuplesToStringTuples (tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Buffer ]... ] -> Buffer\nfunction tuplesToBuffer (tuples) {\n  return fromBuffer(Buffer.concat(tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    let buf = Buffer.from(varint.encode(proto.code))\n\n    if (tup.length > 1) {\n      buf = Buffer.concat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\nfunction sizeForAddr (p, addr) {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\n// Buffer -> [[int code, Buffer ]... ]\nfunction bufferToTuples (buf) {\n  const tuples = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = protocols(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address buffer: ' + buf.toString('hex'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n// Buffer -> String\nfunction bufferToString (buf) {\n  const a = bufferToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n// String -> Buffer\nfunction stringToBuffer (str) {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBuffer(b)\n}\n\n// String -> Buffer\nfunction fromString (str) {\n  return stringToBuffer(str)\n}\n\n// Buffer -> Buffer\nfunction fromBuffer (buf) {\n  const err = validateBuffer(buf)\n  if (err) throw err\n  return Buffer.from(buf) // copy\n}\n\nfunction validateBuffer (buf) {\n  try {\n    bufferToTuples(buf) // try to parse. will throw if breaks\n  } catch (err) {\n    return err\n  }\n}\n\nfunction isValidBuffer (buf) {\n  return validateBuffer(buf) === undefined\n}\n\nfunction cleanPath (str) {\n  return '/' + str.trim().split('/').filter(a => a).join('/')\n}\n\nfunction ParseError (str) {\n  return new Error('Error parsing address: ' + str)\n}\n\nfunction protoFromTuple (tup) {\n  const proto = protocols(tup[0])\n  return proto\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}