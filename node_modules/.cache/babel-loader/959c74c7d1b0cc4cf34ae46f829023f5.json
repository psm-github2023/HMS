{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\nconst {\n  ensureMultiaddr\n} = require('./utils');\nconst MultiaddrSet = require('./multiaddr-set');\nconst assert = require('assert');\n\n// Peer represents a peer on the IPFS network\nclass PeerInfo {\n  constructor(peerId) {\n    assert(peerId, 'Missing peerId. Use Peer.create(cb) to create one');\n    this.id = peerId;\n    this.multiaddrs = new MultiaddrSet();\n    this.protocols = new Set();\n    this._connectedMultiaddr = undefined;\n  }\n\n  // only stores the current multiaddr being used\n  connect(ma) {\n    ma = ensureMultiaddr(ma);\n    if (!this.multiaddrs.has(ma) && ma.toString() !== `/ipfs/${this.id.toB58String()}`) {\n      throw new Error('can\\'t be connected to missing multiaddr from set');\n    }\n    this._connectedMultiaddr = ma;\n  }\n  disconnect() {\n    this._connectedMultiaddr = undefined;\n  }\n  isConnected() {\n    return this._connectedMultiaddr;\n  }\n}\nPeerInfo.create = (peerId, callback) => {\n  if (typeof peerId === 'function') {\n    callback = peerId;\n    peerId = null;\n    PeerId.create((err, id) => {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, new PeerInfo(id));\n    });\n    return;\n  }\n\n  // Already a PeerId instance\n  if (typeof peerId.toJSON === 'function') {\n    callback(null, new PeerInfo(peerId));\n  } else {\n    PeerId.createFromJSON(peerId, (err, id) => callback(err, new PeerInfo(id)));\n  }\n};\nPeerInfo.isPeerInfo = peerInfo => {\n  return Boolean(typeof peerInfo === 'object' && peerInfo.id && peerInfo.multiaddrs);\n};\nmodule.exports = PeerInfo;","map":{"version":3,"names":["PeerId","require","ensureMultiaddr","MultiaddrSet","assert","PeerInfo","constructor","peerId","id","multiaddrs","protocols","Set","_connectedMultiaddr","undefined","connect","ma","has","toString","toB58String","Error","disconnect","isConnected","create","callback","err","toJSON","createFromJSON","isPeerInfo","peerInfo","Boolean","module","exports"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/peer-info/src/index.js"],"sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst { ensureMultiaddr } = require('./utils')\nconst MultiaddrSet = require('./multiaddr-set')\nconst assert = require('assert')\n\n// Peer represents a peer on the IPFS network\nclass PeerInfo {\n  constructor (peerId) {\n    assert(peerId, 'Missing peerId. Use Peer.create(cb) to create one')\n\n    this.id = peerId\n    this.multiaddrs = new MultiaddrSet()\n    this.protocols = new Set()\n    this._connectedMultiaddr = undefined\n  }\n\n  // only stores the current multiaddr being used\n  connect (ma) {\n    ma = ensureMultiaddr(ma)\n    if (!this.multiaddrs.has(ma) && ma.toString() !== `/ipfs/${this.id.toB58String()}`) {\n      throw new Error('can\\'t be connected to missing multiaddr from set')\n    }\n    this._connectedMultiaddr = ma\n  }\n\n  disconnect () {\n    this._connectedMultiaddr = undefined\n  }\n\n  isConnected () {\n    return this._connectedMultiaddr\n  }\n}\n\nPeerInfo.create = (peerId, callback) => {\n  if (typeof peerId === 'function') {\n    callback = peerId\n    peerId = null\n\n    PeerId.create((err, id) => {\n      if (err) {\n        return callback(err)\n      }\n\n      callback(null, new PeerInfo(id))\n    })\n    return\n  }\n\n  // Already a PeerId instance\n  if (typeof peerId.toJSON === 'function') {\n    callback(null, new PeerInfo(peerId))\n  } else {\n    PeerId.createFromJSON(peerId, (err, id) => callback(err, new PeerInfo(id)))\n  }\n}\n\nPeerInfo.isPeerInfo = (peerInfo) => {\n  return Boolean(typeof peerInfo === 'object' &&\n    peerInfo.id &&\n    peerInfo.multiaddrs)\n}\n\nmodule.exports = PeerInfo\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AACjC,MAAM;EAAEC;AAAgB,CAAC,GAAGD,OAAO,CAAC,SAAS,CAAC;AAC9C,MAAME,YAAY,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAC/C,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;;AAEhC;AACA,MAAMI,QAAQ,CAAC;EACbC,WAAWA,CAAEC,MAAM,EAAE;IACnBH,MAAM,CAACG,MAAM,EAAE,mDAAmD,CAAC;IAEnE,IAAI,CAACC,EAAE,GAAGD,MAAM;IAChB,IAAI,CAACE,UAAU,GAAG,IAAIN,YAAY,CAAC,CAAC;IACpC,IAAI,CAACO,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACC,mBAAmB,GAAGC,SAAS;EACtC;;EAEA;EACAC,OAAOA,CAAEC,EAAE,EAAE;IACXA,EAAE,GAAGb,eAAe,CAACa,EAAE,CAAC;IACxB,IAAI,CAAC,IAAI,CAACN,UAAU,CAACO,GAAG,CAACD,EAAE,CAAC,IAAIA,EAAE,CAACE,QAAQ,CAAC,CAAC,KAAM,SAAQ,IAAI,CAACT,EAAE,CAACU,WAAW,CAAC,CAAE,EAAC,EAAE;MAClF,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;IACtE;IACA,IAAI,CAACP,mBAAmB,GAAGG,EAAE;EAC/B;EAEAK,UAAUA,CAAA,EAAI;IACZ,IAAI,CAACR,mBAAmB,GAAGC,SAAS;EACtC;EAEAQ,WAAWA,CAAA,EAAI;IACb,OAAO,IAAI,CAACT,mBAAmB;EACjC;AACF;AAEAP,QAAQ,CAACiB,MAAM,GAAG,CAACf,MAAM,EAAEgB,QAAQ,KAAK;EACtC,IAAI,OAAOhB,MAAM,KAAK,UAAU,EAAE;IAChCgB,QAAQ,GAAGhB,MAAM;IACjBA,MAAM,GAAG,IAAI;IAEbP,MAAM,CAACsB,MAAM,CAAC,CAACE,GAAG,EAAEhB,EAAE,KAAK;MACzB,IAAIgB,GAAG,EAAE;QACP,OAAOD,QAAQ,CAACC,GAAG,CAAC;MACtB;MAEAD,QAAQ,CAAC,IAAI,EAAE,IAAIlB,QAAQ,CAACG,EAAE,CAAC,CAAC;IAClC,CAAC,CAAC;IACF;EACF;;EAEA;EACA,IAAI,OAAOD,MAAM,CAACkB,MAAM,KAAK,UAAU,EAAE;IACvCF,QAAQ,CAAC,IAAI,EAAE,IAAIlB,QAAQ,CAACE,MAAM,CAAC,CAAC;EACtC,CAAC,MAAM;IACLP,MAAM,CAAC0B,cAAc,CAACnB,MAAM,EAAE,CAACiB,GAAG,EAAEhB,EAAE,KAAKe,QAAQ,CAACC,GAAG,EAAE,IAAInB,QAAQ,CAACG,EAAE,CAAC,CAAC,CAAC;EAC7E;AACF,CAAC;AAEDH,QAAQ,CAACsB,UAAU,GAAIC,QAAQ,IAAK;EAClC,OAAOC,OAAO,CAAC,OAAOD,QAAQ,KAAK,QAAQ,IACzCA,QAAQ,CAACpB,EAAE,IACXoB,QAAQ,CAACnB,UAAU,CAAC;AACxB,CAAC;AAEDqB,MAAM,CAACC,OAAO,GAAG1B,QAAQ"},"metadata":{},"sourceType":"script"}