{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst multihashing = require('multihashing-async');\nconst multicodec = require('multicodec');\n\n// binary resolver\nmodule.exports = {\n  codec: multicodec.RAW,\n  defaultHashAlg: multicodec.SHA2_256,\n  resolver: {\n    /**\n     * Resolves a path within a Raw block.\n     *\n     * Always returns the raw data as value without any remainderPath.\n     *\n     * @param {Buffer} binaryBlob - Binary representation of a PB block\n     * @param {string} [path='/'] - Path that should be resolved (that value is ignored)\n     * @returns {Object} result - Result of the path it it was resolved successfully\n     * @returns {*} result.value - The raw data\n     * @returns {string} result.remainderPath - An empty string\n     */\n    resolve: (binaryBlob, path) => {\n      return {\n        value: binaryBlob,\n        remainderPath: ''\n      };\n    },\n    /**\n     * Return all available paths of a block.\n     *\n     * @generator\n     * @param {Buffer} binaryBlob - The raw data\n     * @returns {Object} - Finished generator with `done: true`\n     */\n    tree: binaryBlob => {\n      return {\n        done: true\n      };\n    }\n  },\n  util: {\n    deserialize: data => {\n      return data;\n    },\n    serialize: data => {\n      return data;\n    },\n    /**\n     * Calculate the CID of the binary blob.\n     *\n     * @param {Object} binaryBlob - Encoded IPLD Node\n     * @param {Object} [userOptions] - Options to create the CID\n     * @param {number} [userOptions.cidVersion=1] - CID version number\n     * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n     * @returns {Promise.<CID>}\n     */\n    cid: async (binaryBlob, userOptions) => {\n      const defaultOptions = {\n        cidVersion: 1,\n        hashAlg: module.exports.defaultHashAlg\n      };\n      const options = Object.assign(defaultOptions, userOptions);\n      const multihash = await multihashing(binaryBlob, options.hashAlg);\n      const codecName = multicodec.print[module.exports.codec];\n      const cid = new CID(options.cidVersion, codecName, multihash);\n      return cid;\n    }\n  }\n};","map":{"version":3,"names":["CID","require","multihashing","multicodec","module","exports","codec","RAW","defaultHashAlg","SHA2_256","resolver","resolve","binaryBlob","path","value","remainderPath","tree","done","util","deserialize","data","serialize","cid","userOptions","defaultOptions","cidVersion","hashAlg","options","Object","assign","multihash","codecName","print"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipld-raw/src/index.js"],"sourcesContent":["'use strict'\nconst CID = require('cids')\nconst multihashing = require('multihashing-async')\nconst multicodec = require('multicodec')\n\n// binary resolver\nmodule.exports = {\n  codec: multicodec.RAW,\n  defaultHashAlg: multicodec.SHA2_256,\n  resolver: {\n    /**\n     * Resolves a path within a Raw block.\n     *\n     * Always returns the raw data as value without any remainderPath.\n     *\n     * @param {Buffer} binaryBlob - Binary representation of a PB block\n     * @param {string} [path='/'] - Path that should be resolved (that value is ignored)\n     * @returns {Object} result - Result of the path it it was resolved successfully\n     * @returns {*} result.value - The raw data\n     * @returns {string} result.remainderPath - An empty string\n     */\n    resolve: (binaryBlob, path) => {\n      return {\n        value: binaryBlob,\n        remainderPath: ''\n      }\n    },\n    /**\n     * Return all available paths of a block.\n     *\n     * @generator\n     * @param {Buffer} binaryBlob - The raw data\n     * @returns {Object} - Finished generator with `done: true`\n     */\n    tree: (binaryBlob) => {\n      return {\n        done: true\n      }\n    }\n  },\n  util: {\n    deserialize: (data) => {\n      return data\n    },\n    serialize: (data) => {\n      return data\n    },\n    /**\n     * Calculate the CID of the binary blob.\n     *\n     * @param {Object} binaryBlob - Encoded IPLD Node\n     * @param {Object} [userOptions] - Options to create the CID\n     * @param {number} [userOptions.cidVersion=1] - CID version number\n     * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n     * @returns {Promise.<CID>}\n     */\n    cid: async (binaryBlob, userOptions) => {\n      const defaultOptions = { cidVersion: 1, hashAlg: module.exports.defaultHashAlg }\n      const options = Object.assign(defaultOptions, userOptions)\n\n      const multihash = await multihashing(binaryBlob, options.hashAlg)\n      const codecName = multicodec.print[module.exports.codec]\n      const cid = new CID(options.cidVersion, codecName, multihash)\n\n      return cid\n    }\n  }\n}\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,YAAY,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAClD,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAY,CAAC;;AAExC;AACAG,MAAM,CAACC,OAAO,GAAG;EACfC,KAAK,EAAEH,UAAU,CAACI,GAAG;EACrBC,cAAc,EAAEL,UAAU,CAACM,QAAQ;EACnCC,QAAQ,EAAE;IACR;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,OAAO,EAAEA,CAACC,UAAU,EAAEC,IAAI,KAAK;MAC7B,OAAO;QACLC,KAAK,EAAEF,UAAU;QACjBG,aAAa,EAAE;MACjB,CAAC;IACH,CAAC;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,IAAI,EAAGJ,UAAU,IAAK;MACpB,OAAO;QACLK,IAAI,EAAE;MACR,CAAC;IACH;EACF,CAAC;EACDC,IAAI,EAAE;IACJC,WAAW,EAAGC,IAAI,IAAK;MACrB,OAAOA,IAAI;IACb,CAAC;IACDC,SAAS,EAAGD,IAAI,IAAK;MACnB,OAAOA,IAAI;IACb,CAAC;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIE,GAAG,EAAE,MAAAA,CAAOV,UAAU,EAAEW,WAAW,KAAK;MACtC,MAAMC,cAAc,GAAG;QAAEC,UAAU,EAAE,CAAC;QAAEC,OAAO,EAAEtB,MAAM,CAACC,OAAO,CAACG;MAAe,CAAC;MAChF,MAAMmB,OAAO,GAAGC,MAAM,CAACC,MAAM,CAACL,cAAc,EAAED,WAAW,CAAC;MAE1D,MAAMO,SAAS,GAAG,MAAM5B,YAAY,CAACU,UAAU,EAAEe,OAAO,CAACD,OAAO,CAAC;MACjE,MAAMK,SAAS,GAAG5B,UAAU,CAAC6B,KAAK,CAAC5B,MAAM,CAACC,OAAO,CAACC,KAAK,CAAC;MACxD,MAAMgB,GAAG,GAAG,IAAItB,GAAG,CAAC2B,OAAO,CAACF,UAAU,EAAEM,SAAS,EAAED,SAAS,CAAC;MAE7D,OAAOR,GAAG;IACZ;EACF;AACF,CAAC"},"metadata":{},"sourceType":"script"}