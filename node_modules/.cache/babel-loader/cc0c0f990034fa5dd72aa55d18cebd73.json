{"ast":null,"code":"/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n * @module Multibase\n */\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst constants = require('./constants');\n\n/** @typedef {import(\"./base\")} Base */\n\n/**\n * Create a new buffer with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be prefixed with multibase.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer');\n  }\n  const enc = encoding(nameOrCode);\n  validEncode(enc.name, buf);\n  return Buffer.concat([enc.codeBuf, buf]);\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be encoded.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode(nameOrCode, buf) {\n  const enc = encoding(nameOrCode);\n  return Buffer.concat([enc.codeBuf, Buffer.from(enc.encode(buf))]);\n}\n\n/**\n * Takes a buffer or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Buffer|string} data\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode(data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString();\n  }\n  const prefix = data[0];\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase();\n  }\n  const enc = encoding(data[0]);\n  return Buffer.from(enc.decode(data.substring(1)));\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Buffer|string} data\n * @returns {boolean}\n */\nfunction isEncoded(data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString();\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false;\n  }\n  try {\n    const enc = encoding(data[0]);\n    return enc.name;\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {string} name\n * @param {Buffer} buf\n * @returns {undefined}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode(name, buf) {\n  const enc = encoding(name);\n  enc.decode(buf.toString());\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {string} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding(nameOrCode) {\n  if (constants.names[nameOrCode]) {\n    return constants.names[nameOrCode];\n  } else if (constants.codes[nameOrCode]) {\n    return constants.codes[nameOrCode];\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`);\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Buffer} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData(data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString();\n  }\n  return encoding(data[0]);\n}\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.encoding = encoding;\nexports.encodingFromData = encodingFromData;\nexports.names = Object.freeze(constants.names);\nexports.codes = Object.freeze(constants.codes);","map":{"version":3,"names":["Buffer","require","constants","multibase","nameOrCode","buf","Error","enc","encoding","validEncode","name","concat","codeBuf","encode","from","decode","data","isBuffer","toString","prefix","includes","toLowerCase","substring","isEncoded","Object","prototype","call","err","names","codes","encodingFromData","exports","module","freeze"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/is-ipfs/node_modules/multiaddr/node_modules/cids/node_modules/multibase/src/index.js"],"sourcesContent":["/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n * @module Multibase\n */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst constants = require('./constants')\n\n/** @typedef {import(\"./base\")} Base */\n\n/**\n * Create a new buffer with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be prefixed with multibase.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer')\n  }\n  const enc = encoding(nameOrCode)\n  validEncode(enc.name, buf)\n  return Buffer.concat([enc.codeBuf, buf])\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Buffer} buf - The data to be encoded.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode (nameOrCode, buf) {\n  const enc = encoding(nameOrCode)\n\n  return Buffer.concat([enc.codeBuf, Buffer.from(enc.encode(buf))])\n}\n\n/**\n * Takes a buffer or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Buffer|string} data\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode (data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString()\n  }\n  const prefix = data[0]\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase()\n  }\n  const enc = encoding(data[0])\n  return Buffer.from(enc.decode(data.substring(1)))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Buffer|string} data\n * @returns {boolean}\n */\nfunction isEncoded (data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString()\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false\n  }\n\n  try {\n    const enc = encoding(data[0])\n    return enc.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {string} name\n * @param {Buffer} buf\n * @returns {undefined}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode (name, buf) {\n  const enc = encoding(name)\n  enc.decode(buf.toString())\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {string} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding (nameOrCode) {\n  if (constants.names[nameOrCode]) {\n    return constants.names[nameOrCode]\n  } else if (constants.codes[nameOrCode]) {\n    return constants.codes[nameOrCode]\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Buffer} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData (data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString()\n  }\n\n  return encoding(data[0])\n}\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.encoding = encoding\nexports.encodingFromData = encodingFromData\nexports.names = Object.freeze(constants.names)\nexports.codes = Object.freeze(constants.codes)\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}