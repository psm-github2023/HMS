{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst streamToValue = require('../utils/stream-to-value');\nconst CID = require('cids');\nconst LRU = require('lru-cache');\nconst lruOptions = {\n  max: 128\n};\nconst cache = new LRU(lruOptions);\nmodule.exports = send => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    if (!options) {\n      options = {};\n    }\n    let cidB58Str;\n    try {\n      cid = new CID(cid);\n      cidB58Str = cid.toBaseEncodedString();\n    } catch (err) {\n      return callback(err);\n    }\n    const node = cache.get(cidB58Str);\n    if (node) {\n      return callback(null, node.data);\n    }\n    send({\n      path: 'object/data',\n      args: cidB58Str\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n      if (typeof result.pipe === 'function') {\n        streamToValue(result, callback);\n      } else {\n        callback(null, result);\n      }\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","streamToValue","CID","LRU","lruOptions","max","cache","module","exports","send","cid","options","callback","cidB58Str","toBaseEncodedString","err","node","get","data","path","args","result","pipe"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/object/data.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst streamToValue = require('../utils/stream-to-value')\nconst CID = require('cids')\nconst LRU = require('lru-cache')\nconst lruOptions = {\n  max: 128\n}\n\nconst cache = new LRU(lruOptions)\n\nmodule.exports = (send) => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n    if (!options) {\n      options = {}\n    }\n\n    let cidB58Str\n\n    try {\n      cid = new CID(cid)\n      cidB58Str = cid.toBaseEncodedString()\n    } catch (err) {\n      return callback(err)\n    }\n\n    const node = cache.get(cidB58Str)\n\n    if (node) {\n      return callback(null, node.data)\n    }\n\n    send({\n      path: 'object/data',\n      args: cidB58Str\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      if (typeof result.pipe === 'function') {\n        streamToValue(result, callback)\n      } else {\n        callback(null, result)\n      }\n    })\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,aAAa,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACzD,MAAME,GAAG,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMG,GAAG,GAAGH,OAAO,CAAC,WAAW,CAAC;AAChC,MAAMI,UAAU,GAAG;EACjBC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,KAAK,GAAG,IAAIH,GAAG,CAACC,UAAU,CAAC;AAEjCG,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAOV,SAAS,CAAC,CAACW,GAAG,EAAEC,OAAO,EAAEC,QAAQ,KAAK;IAC3C,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;MACjCC,QAAQ,GAAGD,OAAO;MAClBA,OAAO,GAAG,CAAC,CAAC;IACd;IACA,IAAI,CAACA,OAAO,EAAE;MACZA,OAAO,GAAG,CAAC,CAAC;IACd;IAEA,IAAIE,SAAS;IAEb,IAAI;MACFH,GAAG,GAAG,IAAIR,GAAG,CAACQ,GAAG,CAAC;MAClBG,SAAS,GAAGH,GAAG,CAACI,mBAAmB,CAAC,CAAC;IACvC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,OAAOH,QAAQ,CAACG,GAAG,CAAC;IACtB;IAEA,MAAMC,IAAI,GAAGV,KAAK,CAACW,GAAG,CAACJ,SAAS,CAAC;IAEjC,IAAIG,IAAI,EAAE;MACR,OAAOJ,QAAQ,CAAC,IAAI,EAAEI,IAAI,CAACE,IAAI,CAAC;IAClC;IAEAT,IAAI,CAAC;MACHU,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAEP;IACR,CAAC,EAAE,CAACE,GAAG,EAAEM,MAAM,KAAK;MAClB,IAAIN,GAAG,EAAE;QACP,OAAOH,QAAQ,CAACG,GAAG,CAAC;MACtB;MAEA,IAAI,OAAOM,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;QACrCrB,aAAa,CAACoB,MAAM,EAAET,QAAQ,CAAC;MACjC,CAAC,MAAM;QACLA,QAAQ,CAAC,IAAI,EAAES,MAAM,CAAC;MACxB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}