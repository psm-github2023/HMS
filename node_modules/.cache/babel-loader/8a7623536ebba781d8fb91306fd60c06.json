{"ast":null,"code":"var ClientRequest = require('./request');\nvar IncomingMessage = require('./incoming-message');\nvar statusCodes = require('builtin-status-codes');\nvar URL = self.URL;\nconst request = (opts, cb) => {\n  if (typeof opts === 'string') {\n    opts = new URL(opts, self.location.protocol + '//' + self.location.host);\n    opts.path = opts.pathname + opts.search;\n    opts.auth = opts.username && opts.password ? opts.username + ':' + opts.password : null;\n  } else {\n    opts = Object.assign({}, opts);\n  }\n\n  // Normally, the page is loaded from http or https, so not specifying a protocol\n  // will result in a (valid) protocol-relative url. However, this won't work if\n  // the protocol is something else, like 'file:'\n  var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';\n  var protocol = opts.protocol || defaultProtocol;\n  var host = opts.hostname || opts.host;\n  var port = opts.port;\n  var path = opts.path || '/';\n\n  // Necessary for IPv6 addresses\n  if (host && host.indexOf(':') !== -1) host = '[' + host + ']';\n\n  // This may be a relative url. The browser should always be able to interpret it correctly.\n  opts.url = (host ? protocol + '//' + host : '') + (port ? ':' + port : '') + path;\n  opts.method = (opts.method || 'GET').toUpperCase();\n  opts.headers = opts.headers || {};\n\n  // Also valid opts.auth, opts.mode\n\n  var req = new ClientRequest(opts);\n  if (cb) req.on('response', cb);\n  return req;\n};\nconst get = (opts, cb) => {\n  var req = request(opts, cb);\n  req.end();\n  return req;\n};\nconst Agent = function () {};\nAgent.defaultMaxSockets = 4;\nconst METHODS = ['CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REPORT', 'SEARCH', 'SUBSCRIBE', 'TRACE', 'UNLOCK', 'UNSUBSCRIBE'];\nmodule.exports = {\n  Agent,\n  ClientRequest,\n  IncomingMessage,\n  METHODS,\n  STATUS_CODES: statusCodes,\n  get,\n  globalAgent: new Agent(),\n  request,\n  maxHeaderSize: '8KB'\n};","map":{"version":3,"names":["ClientRequest","require","IncomingMessage","statusCodes","URL","self","request","opts","cb","location","protocol","host","path","pathname","search","auth","username","password","Object","assign","defaultProtocol","global","hostname","port","indexOf","url","method","toUpperCase","headers","req","on","get","end","Agent","defaultMaxSockets","METHODS","module","exports","STATUS_CODES","globalAgent","maxHeaderSize"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/iso-stream-http/lib/http.js"],"sourcesContent":["var ClientRequest = require('./request')\nvar IncomingMessage = require('./incoming-message')\nvar statusCodes = require('builtin-status-codes')\nvar URL = self.URL\n\n\nconst request = (opts, cb) => {\n\tif (typeof opts === 'string') {\n\n\t\topts = new URL(opts, self.location.protocol + '//' +self.location.host)\n\t\topts.path = opts.pathname + opts.search\n\t\topts.auth = (opts.username && opts.password) ? opts.username + ':' + opts.password : null\n\t} else {\n\t\topts = Object.assign({}, opts)\n\t}\n\n\t// Normally, the page is loaded from http or https, so not specifying a protocol\n\t// will result in a (valid) protocol-relative url. However, this won't work if\n\t// the protocol is something else, like 'file:'\n\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\n\n\tvar protocol = opts.protocol || defaultProtocol\n\tvar host = opts.hostname || opts.host\n\tvar port = opts.port\n\tvar path = opts.path || '/'\n\n\t// Necessary for IPv6 addresses\n\tif (host && host.indexOf(':') !== -1)\n\t\thost = '[' + host + ']'\n\n\t// This may be a relative url. The browser should always be able to interpret it correctly.\n\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\n\topts.method = (opts.method || 'GET').toUpperCase()\n\topts.headers = opts.headers || {}\n\n\t// Also valid opts.auth, opts.mode\n\n\tvar req = new ClientRequest(opts)\n\tif (cb)\n\t\treq.on('response', cb)\n\treturn req\n}\n\nconst get = (opts, cb) => {\n\tvar req = request(opts, cb)\n\treq.end()\n\treturn req\n}\n\nconst Agent = function () {}\nAgent.defaultMaxSockets = 4\n\nconst METHODS = [\n\t'CHECKOUT',\n\t'CONNECT',\n\t'COPY',\n\t'DELETE',\n\t'GET',\n\t'HEAD',\n\t'LOCK',\n\t'M-SEARCH',\n\t'MERGE',\n\t'MKACTIVITY',\n\t'MKCOL',\n\t'MOVE',\n\t'NOTIFY',\n\t'OPTIONS',\n\t'PATCH',\n\t'POST',\n\t'PROPFIND',\n\t'PROPPATCH',\n\t'PURGE',\n\t'PUT',\n\t'REPORT',\n\t'SEARCH',\n\t'SUBSCRIBE',\n\t'TRACE',\n\t'UNLOCK',\n\t'UNSUBSCRIBE'\n]\n\nmodule.exports = {\n\tAgent,\n\tClientRequest,\n\tIncomingMessage,\n\tMETHODS,\n\tSTATUS_CODES: statusCodes,\n\tget,\n\tglobalAgent : new Agent(),\n\trequest,\n\tmaxHeaderSize: '8KB'\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}