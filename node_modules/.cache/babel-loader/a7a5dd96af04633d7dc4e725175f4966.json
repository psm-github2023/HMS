{"ast":null,"code":"'use strict';\n\nconst DAGLink = require('./../dag-link');\nconst {\n  cid,\n  serialize\n} = require('../util');\nexports = module.exports;\nfunction cloneData(dagNode) {\n  let data;\n  if (dagNode.Data && dagNode.Data.length > 0) {\n    data = Buffer.alloc(dagNode.Data.length);\n    dagNode.Data.copy(data);\n  } else {\n    data = Buffer.alloc(0);\n  }\n  return data;\n}\nfunction cloneLinks(dagNode) {\n  return dagNode.Links.slice();\n}\nfunction linkSort(a, b) {\n  return Buffer.compare(a.nameAsBuffer, b.nameAsBuffer);\n}\n\n/*\n * toDAGLink converts a DAGNode to a DAGLink\n */\nconst toDAGLink = async (node, options = {}) => {\n  const serialized = serialize(node);\n  const nodeCid = await cid(serialized);\n  return new DAGLink(options.name || '', serialized.length, nodeCid);\n};\nexports.cloneData = cloneData;\nexports.cloneLinks = cloneLinks;\nexports.linkSort = linkSort;\nexports.toDAGLink = toDAGLink;","map":{"version":3,"names":["DAGLink","require","cid","serialize","exports","module","cloneData","dagNode","data","Data","length","Buffer","alloc","copy","cloneLinks","Links","slice","linkSort","a","b","compare","nameAsBuffer","toDAGLink","node","options","serialized","nodeCid","name"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipld-dag-pb/src/dag-node/util.js"],"sourcesContent":["'use strict'\n\nconst DAGLink = require('./../dag-link')\nconst {\n  cid,\n  serialize\n} = require('../util')\n\nexports = module.exports\n\nfunction cloneData (dagNode) {\n  let data\n\n  if (dagNode.Data && dagNode.Data.length > 0) {\n    data = Buffer.alloc(dagNode.Data.length)\n    dagNode.Data.copy(data)\n  } else {\n    data = Buffer.alloc(0)\n  }\n\n  return data\n}\n\nfunction cloneLinks (dagNode) {\n  return dagNode.Links.slice()\n}\n\nfunction linkSort (a, b) {\n  return Buffer.compare(a.nameAsBuffer, b.nameAsBuffer)\n}\n\n/*\n * toDAGLink converts a DAGNode to a DAGLink\n */\nconst toDAGLink = async (node, options = {}) => {\n  const serialized = serialize(node)\n  const nodeCid = await cid(serialized)\n  return new DAGLink(options.name || '', serialized.length, nodeCid)\n}\n\nexports.cloneData = cloneData\nexports.cloneLinks = cloneLinks\nexports.linkSort = linkSort\nexports.toDAGLink = toDAGLink\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;AACxC,MAAM;EACJC,GAAG;EACHC;AACF,CAAC,GAAGF,OAAO,CAAC,SAAS,CAAC;AAEtBG,OAAO,GAAGC,MAAM,CAACD,OAAO;AAExB,SAASE,SAASA,CAAEC,OAAO,EAAE;EAC3B,IAAIC,IAAI;EAER,IAAID,OAAO,CAACE,IAAI,IAAIF,OAAO,CAACE,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;IAC3CF,IAAI,GAAGG,MAAM,CAACC,KAAK,CAACL,OAAO,CAACE,IAAI,CAACC,MAAM,CAAC;IACxCH,OAAO,CAACE,IAAI,CAACI,IAAI,CAACL,IAAI,CAAC;EACzB,CAAC,MAAM;IACLA,IAAI,GAAGG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACxB;EAEA,OAAOJ,IAAI;AACb;AAEA,SAASM,UAAUA,CAAEP,OAAO,EAAE;EAC5B,OAAOA,OAAO,CAACQ,KAAK,CAACC,KAAK,CAAC,CAAC;AAC9B;AAEA,SAASC,QAAQA,CAAEC,CAAC,EAAEC,CAAC,EAAE;EACvB,OAAOR,MAAM,CAACS,OAAO,CAACF,CAAC,CAACG,YAAY,EAAEF,CAAC,CAACE,YAAY,CAAC;AACvD;;AAEA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,MAAAA,CAAOC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC9C,MAAMC,UAAU,GAAGtB,SAAS,CAACoB,IAAI,CAAC;EAClC,MAAMG,OAAO,GAAG,MAAMxB,GAAG,CAACuB,UAAU,CAAC;EACrC,OAAO,IAAIzB,OAAO,CAACwB,OAAO,CAACG,IAAI,IAAI,EAAE,EAAEF,UAAU,CAACf,MAAM,EAAEgB,OAAO,CAAC;AACpE,CAAC;AAEDtB,OAAO,CAACE,SAAS,GAAGA,SAAS;AAC7BF,OAAO,CAACU,UAAU,GAAGA,UAAU;AAC/BV,OAAO,CAACa,QAAQ,GAAGA,QAAQ;AAC3Bb,OAAO,CAACkB,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script"}