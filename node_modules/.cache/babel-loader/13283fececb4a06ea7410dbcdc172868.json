{"ast":null,"code":"'use strict';\n\nconst multiaddr = require('multiaddr');\n\n/*\n * Valid combinations\n */\nconst DNS4 = base('dns4');\nconst DNS6 = base('dns6');\nconst DNS = or(base('dns'), base('dnsaddr'), DNS4, DNS6);\nconst IP = or(base('ip4'), base('ip6'));\nconst TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));\nconst UDP = and(IP, base('udp'));\nconst UTP = and(UDP, base('utp'));\nconst WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));\nconst WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')));\nconst HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));\nconst HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));\nconst WebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));\nconst WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));\nconst WebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));\nconst Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, WebRTCStar, WebRTCDirect, TCP, UTP);\n\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nconst Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));\nconst _P2P = or(and(Reliable, base('p2p')), WebRTCStar, base('p2p'));\nconst _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));\nconst CircuitRecursive = () => or(and(_Circuit, CircuitRecursive), _Circuit);\nconst Circuit = CircuitRecursive();\nconst P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);\nexports.DNS = DNS;\nexports.DNS4 = DNS4;\nexports.DNS6 = DNS6;\nexports.IP = IP;\nexports.TCP = TCP;\nexports.UDP = UDP;\nexports.UTP = UTP;\nexports.HTTP = HTTP;\nexports.HTTPS = HTTPS;\nexports.WebSockets = WebSockets;\nexports.WebSocketsSecure = WebSocketsSecure;\nexports.WebSocketStar = WebSocketStar;\nexports.WebRTCStar = WebRTCStar;\nexports.WebRTCDirect = WebRTCDirect;\nexports.Reliable = Reliable;\nexports.Stardust = Stardust;\nexports.Circuit = Circuit;\nexports.P2P = P2P;\nexports.IPFS = P2P;\n\n/*\n * Validation funcs\n */\n\nfunction makeMatchesFunction(partialMatch) {\n  return function matches(a) {\n    if (!multiaddr.isMultiaddr(a)) {\n      try {\n        a = multiaddr(a);\n      } catch (err) {\n        // catch error\n        return false; // also if it's invalid it's propably not matching as well so return false\n      }\n    }\n\n    const out = partialMatch(a.protoNames());\n    if (out === null) {\n      return false;\n    }\n    return out.length === 0;\n  };\n}\nfunction and() {\n  const args = Array.from(arguments);\n  function partialMatch(a) {\n    if (a.length < args.length) {\n      return null;\n    }\n    args.some(arg => {\n      a = typeof arg === 'function' ? arg().partialMatch(a) : arg.partialMatch(a);\n      if (a === null) {\n        return true;\n      }\n    });\n    return a;\n  }\n  return {\n    toString: function () {\n      return '{ ' + args.join(' ') + ' }';\n    },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  };\n}\nfunction or() {\n  const args = Array.from(arguments);\n  function partialMatch(a) {\n    let out = null;\n    args.some(arg => {\n      const res = typeof arg === 'function' ? arg().partialMatch(a) : arg.partialMatch(a);\n      if (res) {\n        out = res;\n        return true;\n      }\n    });\n    return out;\n  }\n  const result = {\n    toString: function () {\n      return '{ ' + args.join(' ') + ' }';\n    },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  };\n  return result;\n}\nfunction base(n) {\n  const name = n;\n  function matches(a) {\n    if (typeof a === 'string') {\n      try {\n        a = multiaddr(a);\n      } catch (err) {\n        // catch error\n        return false; // also if it's invalid it's propably not matching as well so return false\n      }\n    }\n\n    const pnames = a.protoNames();\n    if (pnames.length === 1 && pnames[0] === name) {\n      return true;\n    }\n    return false;\n  }\n  function partialMatch(protos) {\n    if (protos.length === 0) {\n      return null;\n    }\n    if (protos[0] === name) {\n      return protos.slice(1);\n    }\n    return null;\n  }\n  return {\n    toString: function () {\n      return name;\n    },\n    matches: matches,\n    partialMatch: partialMatch\n  };\n}","map":{"version":3,"names":["multiaddr","require","DNS4","base","DNS6","DNS","or","IP","TCP","and","UDP","UTP","WebSockets","WebSocketsSecure","HTTP","HTTPS","WebRTCStar","WebSocketStar","WebRTCDirect","Reliable","Stardust","_P2P","_Circuit","CircuitRecursive","Circuit","P2P","exports","IPFS","makeMatchesFunction","partialMatch","matches","a","isMultiaddr","err","out","protoNames","length","args","Array","from","arguments","some","arg","toString","join","input","res","result","n","name","pnames","protos","slice"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/mafmt/src/index.js"],"sourcesContent":["'use strict'\n\nconst multiaddr = require('multiaddr')\n\n/*\n * Valid combinations\n */\nconst DNS4 = base('dns4')\nconst DNS6 = base('dns6')\nconst DNS = or(\n  base('dns'),\n  base('dnsaddr'),\n  DNS4,\n  DNS6\n)\n\nconst IP = or(base('ip4'), base('ip6'))\nconst TCP = or(\n  and(IP, base('tcp')),\n  and(DNS, base('tcp'))\n)\nconst UDP = and(IP, base('udp'))\nconst UTP = and(UDP, base('utp'))\n\nconst WebSockets = or(\n  and(TCP, base('ws')),\n  and(DNS, base('ws'))\n)\n\nconst WebSocketsSecure = or(\n  and(TCP, base('wss')),\n  and(DNS, base('wss'))\n)\n\nconst HTTP = or(\n  and(TCP, base('http')),\n  and(IP, base('http')),\n  and(DNS, base('http'))\n)\n\nconst HTTPS = or(\n  and(TCP, base('https')),\n  and(IP, base('https')),\n  and(DNS, base('https'))\n)\n\nconst WebRTCStar = or(\n  and(WebSockets, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSockets, base('p2p-webrtc-star')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'))\n)\n\nconst WebSocketStar = or(\n  and(WebSockets, base('p2p-websocket-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')),\n  and(WebSockets, base('p2p-websocket-star')),\n  and(WebSocketsSecure, base('p2p-websocket-star'))\n)\n\nconst WebRTCDirect = or(\n  and(HTTP, base('p2p-webrtc-direct')),\n  and(HTTPS, base('p2p-webrtc-direct'))\n)\n\nconst Reliable = or(\n  WebSockets,\n  WebSocketsSecure,\n  HTTP,\n  HTTPS,\n  WebRTCStar,\n  WebRTCDirect,\n  TCP,\n  UTP\n)\n\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nconst Stardust = or(\n  and(Reliable, base('p2p-stardust'), base('p2p')),\n  and(Reliable, base('p2p-stardust'))\n)\n\nconst _P2P = or(\n  and(Reliable, base('p2p')),\n  WebRTCStar,\n  base('p2p')\n)\n\nconst _Circuit = or(\n  and(_P2P, base('p2p-circuit'), _P2P),\n  and(_P2P, base('p2p-circuit')),\n  and(base('p2p-circuit'), _P2P),\n  and(Reliable, base('p2p-circuit')),\n  and(base('p2p-circuit'), Reliable),\n  base('p2p-circuit')\n)\n\nconst CircuitRecursive = () => or(\n  and(_Circuit, CircuitRecursive),\n  _Circuit\n)\n\nconst Circuit = CircuitRecursive()\n\nconst P2P = or(\n  and(Circuit, _P2P, Circuit),\n  and(_P2P, Circuit),\n  and(Circuit, _P2P),\n  Circuit,\n  _P2P\n)\n\nexports.DNS = DNS\nexports.DNS4 = DNS4\nexports.DNS6 = DNS6\nexports.IP = IP\nexports.TCP = TCP\nexports.UDP = UDP\nexports.UTP = UTP\nexports.HTTP = HTTP\nexports.HTTPS = HTTPS\nexports.WebSockets = WebSockets\nexports.WebSocketsSecure = WebSocketsSecure\nexports.WebSocketStar = WebSocketStar\nexports.WebRTCStar = WebRTCStar\nexports.WebRTCDirect = WebRTCDirect\nexports.Reliable = Reliable\nexports.Stardust = Stardust\nexports.Circuit = Circuit\nexports.P2P = P2P\nexports.IPFS = P2P\n\n/*\n * Validation funcs\n */\n\nfunction makeMatchesFunction (partialMatch) {\n  return function matches (a) {\n    if (!multiaddr.isMultiaddr(a)) {\n      try {\n        a = multiaddr(a)\n      } catch (err) { // catch error\n        return false // also if it's invalid it's propably not matching as well so return false\n      }\n    }\n    const out = partialMatch(a.protoNames())\n    if (out === null) {\n      return false\n    }\n    return out.length === 0\n  }\n}\n\nfunction and () {\n  const args = Array.from(arguments)\n  function partialMatch (a) {\n    if (a.length < args.length) {\n      return null\n    }\n    args.some((arg) => {\n      a = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n\n      if (a === null) {\n        return true\n      }\n    })\n\n    return a\n  }\n\n  return {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  }\n}\n\nfunction or () {\n  const args = Array.from(arguments)\n\n  function partialMatch (a) {\n    let out = null\n    args.some((arg) => {\n      const res = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n      if (res) {\n        out = res\n        return true\n      }\n    })\n\n    return out\n  }\n\n  const result = {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  }\n\n  return result\n}\n\nfunction base (n) {\n  const name = n\n\n  function matches (a) {\n    if (typeof a === 'string') {\n      try {\n        a = multiaddr(a)\n      } catch (err) { // catch error\n        return false // also if it's invalid it's propably not matching as well so return false\n      }\n    }\n\n    const pnames = a.protoNames()\n    if (pnames.length === 1 && pnames[0] === name) {\n      return true\n    }\n    return false\n  }\n\n  function partialMatch (protos) {\n    if (protos.length === 0) {\n      return null\n    }\n\n    if (protos[0] === name) {\n      return protos.slice(1)\n    }\n    return null\n  }\n\n  return {\n    toString: function () { return name },\n    matches: matches,\n    partialMatch: partialMatch\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}