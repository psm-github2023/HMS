{"ast":null,"code":"'use strict';\n\nconst kindOf = require('kind-of');\nconst isStream = require('is-stream');\nconst {\n  isSource\n} = require('is-pull-stream');\nconst isBuffer = require('is-buffer');\nconst validateAddInput = input => {\n  // Buffer|ReadableStream|PullStream|File\n  const isPrimitive = obj => isBuffer(obj) || isStream.readable(obj) || isSource(obj) || kindOf(obj) === 'file';\n\n  // An object like { content?, path? }, where content isBufferOrStream and path isString\n  const isContentObject = obj => {\n    if (typeof obj !== 'object') return false;\n    // path is optional if content is present\n    if (obj.content) return isPrimitive(obj.content);\n    // path must be a non-empty string if no content\n    return Boolean(obj.path) && typeof obj.path === 'string';\n  };\n\n  // An input atom: a buffer, stream or content object\n  const isInput = obj => isPrimitive(obj) || isContentObject(obj);\n  if (isInput(input) || Array.isArray(input) && input.every(isInput)) {\n    return true;\n  } else {\n    throw new Error(`Input not supported. Expected Buffer|ReadableStream|PullStream|File|Array<Object> got ${kindOf(input)}. Check the documentation for more info https://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#add`);\n  }\n};\nmodule.exports = validateAddInput;","map":{"version":3,"names":["kindOf","require","isStream","isSource","isBuffer","validateAddInput","input","isPrimitive","obj","readable","isContentObject","content","Boolean","path","isInput","Array","isArray","every","Error","module","exports"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-utils/src/files/add-input-validation.js"],"sourcesContent":["'use strict'\n\nconst kindOf = require('kind-of')\nconst isStream = require('is-stream')\nconst { isSource } = require('is-pull-stream')\nconst isBuffer = require('is-buffer')\n\nconst validateAddInput = (input) => {\n  // Buffer|ReadableStream|PullStream|File\n  const isPrimitive = obj => isBuffer(obj) || isStream.readable(obj) || isSource(obj) || kindOf(obj) === 'file'\n\n  // An object like { content?, path? }, where content isBufferOrStream and path isString\n  const isContentObject = obj => {\n    if (typeof obj !== 'object') return false\n    // path is optional if content is present\n    if (obj.content) return isPrimitive(obj.content)\n    // path must be a non-empty string if no content\n    return Boolean(obj.path) && typeof obj.path === 'string'\n  }\n\n  // An input atom: a buffer, stream or content object\n  const isInput = obj => isPrimitive(obj) || isContentObject(obj)\n\n  if (isInput(input) || (Array.isArray(input) && input.every(isInput))) {\n    return true\n  } else {\n    throw new Error(`Input not supported. Expected Buffer|ReadableStream|PullStream|File|Array<Object> got ${kindOf(input)}. Check the documentation for more info https://github.com/ipfs/interface-js-ipfs-core/blob/master/SPEC/FILES.md#add`)\n  }\n}\n\nmodule.exports = validateAddInput\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AACjC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;AACrC,MAAM;EAAEE;AAAS,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAC9C,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAW,CAAC;AAErC,MAAMI,gBAAgB,GAAIC,KAAK,IAAK;EAClC;EACA,MAAMC,WAAW,GAAGC,GAAG,IAAIJ,QAAQ,CAACI,GAAG,CAAC,IAAIN,QAAQ,CAACO,QAAQ,CAACD,GAAG,CAAC,IAAIL,QAAQ,CAACK,GAAG,CAAC,IAAIR,MAAM,CAACQ,GAAG,CAAC,KAAK,MAAM;;EAE7G;EACA,MAAME,eAAe,GAAGF,GAAG,IAAI;IAC7B,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,OAAO,KAAK;IACzC;IACA,IAAIA,GAAG,CAACG,OAAO,EAAE,OAAOJ,WAAW,CAACC,GAAG,CAACG,OAAO,CAAC;IAChD;IACA,OAAOC,OAAO,CAACJ,GAAG,CAACK,IAAI,CAAC,IAAI,OAAOL,GAAG,CAACK,IAAI,KAAK,QAAQ;EAC1D,CAAC;;EAED;EACA,MAAMC,OAAO,GAAGN,GAAG,IAAID,WAAW,CAACC,GAAG,CAAC,IAAIE,eAAe,CAACF,GAAG,CAAC;EAE/D,IAAIM,OAAO,CAACR,KAAK,CAAC,IAAKS,KAAK,CAACC,OAAO,CAACV,KAAK,CAAC,IAAIA,KAAK,CAACW,KAAK,CAACH,OAAO,CAAE,EAAE;IACpE,OAAO,IAAI;EACb,CAAC,MAAM;IACL,MAAM,IAAII,KAAK,CAAE,yFAAwFlB,MAAM,CAACM,KAAK,CAAE,sHAAqH,CAAC;EAC/O;AACF,CAAC;AAEDa,MAAM,CAACC,OAAO,GAAGf,gBAAgB"},"metadata":{},"sourceType":"script"}