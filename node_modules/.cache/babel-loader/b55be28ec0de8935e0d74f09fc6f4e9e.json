{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst multiaddr = require('multiaddr');\nconst PeerId = require('peer-id');\nmodule.exports = send => {\n  return promisify((opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    const verbose = opts.v || opts.verbose;\n    send({\n      path: 'swarm/peers',\n      qs: opts\n    }, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n      const peerInfo = parsePeersResponse(verbose, response);\n      callback(null, peerInfo);\n    });\n  });\n};\nfunction parsePeersResponse(verbose, response) {\n  // go-ipfs <= 0.4.4\n  if (Array.isArray(response.Strings)) {\n    return response.Strings.map(parseLegacyPeer.bind(null, verbose));\n  }\n  // go-ipfs >= 0.4.5\n  if (Array.isArray(response.Peers)) {\n    return response.Peers.map(parsePeer.bind(null, verbose));\n  }\n  return [];\n}\nfunction parseLegacyPeer(verbose, peer) {\n  const res = {};\n  try {\n    if (verbose) {\n      const parts = peer.split(' ');\n      res.addr = multiaddr(parts[0]);\n      res.latency = parts[1];\n    } else {\n      res.addr = multiaddr(peer);\n    }\n    res.peer = PeerId.createFromB58String(res.addr.getPeerId());\n  } catch (error) {\n    res.error = error;\n    res.rawPeerInfo = peer;\n  }\n  return res;\n}\nfunction parsePeer(verbose, peer) {\n  const res = {};\n  try {\n    res.addr = multiaddr(peer.Addr);\n    res.peer = PeerId.createFromB58String(peer.Peer);\n    res.muxer = peer.Muxer;\n  } catch (error) {\n    res.error = error;\n    res.rawPeerInfo = peer;\n  }\n  if (peer.Latency) {\n    res.latency = peer.Latency;\n  }\n  if (peer.Streams) {\n    res.streams = peer.Streams;\n  }\n  return res;\n}","map":{"version":3,"names":["promisify","require","multiaddr","PeerId","module","exports","send","opts","callback","verbose","v","path","qs","err","response","peerInfo","parsePeersResponse","Array","isArray","Strings","map","parseLegacyPeer","bind","Peers","parsePeer","peer","res","parts","split","addr","latency","createFromB58String","getPeerId","error","rawPeerInfo","Addr","Peer","muxer","Muxer","Latency","Streams","streams"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/swarm/peers.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst multiaddr = require('multiaddr')\nconst PeerId = require('peer-id')\n\nmodule.exports = (send) => {\n  return promisify((opts, callback) => {\n    if (typeof (opts) === 'function') {\n      callback = opts\n      opts = {}\n    }\n    const verbose = opts.v || opts.verbose\n    send({\n      path: 'swarm/peers',\n      qs: opts\n    }, (err, response) => {\n      if (err) {\n        return callback(err)\n      }\n      const peerInfo = parsePeersResponse(verbose, response)\n      callback(null, peerInfo)\n    })\n  })\n}\n\nfunction parsePeersResponse (verbose, response) {\n  // go-ipfs <= 0.4.4\n  if (Array.isArray(response.Strings)) {\n    return response.Strings.map(parseLegacyPeer.bind(null, verbose))\n  }\n  // go-ipfs >= 0.4.5\n  if (Array.isArray(response.Peers)) {\n    return response.Peers.map(parsePeer.bind(null, verbose))\n  }\n  return []\n}\n\nfunction parseLegacyPeer (verbose, peer) {\n  const res = {}\n  try {\n    if (verbose) {\n      const parts = peer.split(' ')\n      res.addr = multiaddr(parts[0])\n      res.latency = parts[1]\n    } else {\n      res.addr = multiaddr(peer)\n    }\n    res.peer = PeerId.createFromB58String(res.addr.getPeerId())\n  } catch (error) {\n    res.error = error\n    res.rawPeerInfo = peer\n  }\n  return res\n}\n\nfunction parsePeer (verbose, peer) {\n  const res = {}\n  try {\n    res.addr = multiaddr(peer.Addr)\n    res.peer = PeerId.createFromB58String(peer.Peer)\n    res.muxer = peer.Muxer\n  } catch (error) {\n    res.error = error\n    res.rawPeerInfo = peer\n  }\n  if (peer.Latency) {\n    res.latency = peer.Latency\n  }\n  if (peer.Streams) {\n    res.streams = peer.Streams\n  }\n  return res\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAW,CAAC;AACtC,MAAME,MAAM,GAAGF,OAAO,CAAC,SAAS,CAAC;AAEjCG,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAON,SAAS,CAAC,CAACO,IAAI,EAAEC,QAAQ,KAAK;IACnC,IAAI,OAAQD,IAAK,KAAK,UAAU,EAAE;MAChCC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IACA,MAAME,OAAO,GAAGF,IAAI,CAACG,CAAC,IAAIH,IAAI,CAACE,OAAO;IACtCH,IAAI,CAAC;MACHK,IAAI,EAAE,aAAa;MACnBC,EAAE,EAAEL;IACN,CAAC,EAAE,CAACM,GAAG,EAAEC,QAAQ,KAAK;MACpB,IAAID,GAAG,EAAE;QACP,OAAOL,QAAQ,CAACK,GAAG,CAAC;MACtB;MACA,MAAME,QAAQ,GAAGC,kBAAkB,CAACP,OAAO,EAAEK,QAAQ,CAAC;MACtDN,QAAQ,CAAC,IAAI,EAAEO,QAAQ,CAAC;IAC1B,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,SAASC,kBAAkBA,CAAEP,OAAO,EAAEK,QAAQ,EAAE;EAC9C;EACA,IAAIG,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACK,OAAO,CAAC,EAAE;IACnC,OAAOL,QAAQ,CAACK,OAAO,CAACC,GAAG,CAACC,eAAe,CAACC,IAAI,CAAC,IAAI,EAAEb,OAAO,CAAC,CAAC;EAClE;EACA;EACA,IAAIQ,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACS,KAAK,CAAC,EAAE;IACjC,OAAOT,QAAQ,CAACS,KAAK,CAACH,GAAG,CAACI,SAAS,CAACF,IAAI,CAAC,IAAI,EAAEb,OAAO,CAAC,CAAC;EAC1D;EACA,OAAO,EAAE;AACX;AAEA,SAASY,eAAeA,CAAEZ,OAAO,EAAEgB,IAAI,EAAE;EACvC,MAAMC,GAAG,GAAG,CAAC,CAAC;EACd,IAAI;IACF,IAAIjB,OAAO,EAAE;MACX,MAAMkB,KAAK,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;MAC7BF,GAAG,CAACG,IAAI,GAAG3B,SAAS,CAACyB,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9BD,GAAG,CAACI,OAAO,GAAGH,KAAK,CAAC,CAAC,CAAC;IACxB,CAAC,MAAM;MACLD,GAAG,CAACG,IAAI,GAAG3B,SAAS,CAACuB,IAAI,CAAC;IAC5B;IACAC,GAAG,CAACD,IAAI,GAAGtB,MAAM,CAAC4B,mBAAmB,CAACL,GAAG,CAACG,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,GAAG,CAACO,KAAK,GAAGA,KAAK;IACjBP,GAAG,CAACQ,WAAW,GAAGT,IAAI;EACxB;EACA,OAAOC,GAAG;AACZ;AAEA,SAASF,SAASA,CAAEf,OAAO,EAAEgB,IAAI,EAAE;EACjC,MAAMC,GAAG,GAAG,CAAC,CAAC;EACd,IAAI;IACFA,GAAG,CAACG,IAAI,GAAG3B,SAAS,CAACuB,IAAI,CAACU,IAAI,CAAC;IAC/BT,GAAG,CAACD,IAAI,GAAGtB,MAAM,CAAC4B,mBAAmB,CAACN,IAAI,CAACW,IAAI,CAAC;IAChDV,GAAG,CAACW,KAAK,GAAGZ,IAAI,CAACa,KAAK;EACxB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdP,GAAG,CAACO,KAAK,GAAGA,KAAK;IACjBP,GAAG,CAACQ,WAAW,GAAGT,IAAI;EACxB;EACA,IAAIA,IAAI,CAACc,OAAO,EAAE;IAChBb,GAAG,CAACI,OAAO,GAAGL,IAAI,CAACc,OAAO;EAC5B;EACA,IAAId,IAAI,CAACe,OAAO,EAAE;IAChBd,GAAG,CAACe,OAAO,GAAGhB,IAAI,CAACe,OAAO;EAC5B;EACA,OAAOd,GAAG;AACZ"},"metadata":{},"sourceType":"script"}