{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst EventEmitter = require('events');\nconst eos = require('end-of-stream');\nconst isNode = require('detect-node');\nconst setImmediate = require('async/setImmediate');\nconst PubsubMessageStream = require('./utils/pubsub-message-stream');\nconst stringlistToArray = require('./utils/stringlist-to-array');\nconst moduleConfig = require('./utils/module-config');\nconst NotSupportedError = () => new Error('pubsub is currently not supported when run in the browser');\n\n/* Public API */\nmodule.exports = arg => {\n  const send = moduleConfig(arg);\n\n  /* Internal subscriptions state and functions */\n  const ps = new EventEmitter();\n  const subscriptions = {};\n  ps.id = Math.random();\n  return {\n    subscribe: (topic, handler, options, callback) => {\n      const defaultOptions = {\n        discover: false\n      };\n      if (typeof options === 'function') {\n        callback = options;\n        options = defaultOptions;\n      }\n      if (!options) {\n        options = defaultOptions;\n      }\n\n      // Throw an error if ran in the browsers\n      if (!isNode) {\n        if (!callback) {\n          return Promise.reject(NotSupportedError());\n        }\n        return setImmediate(() => callback(NotSupportedError()));\n      }\n\n      // promisify doesn't work as we always pass a\n      // function as last argument (`handler`)\n      if (!callback) {\n        return new Promise((resolve, reject) => {\n          subscribe(topic, handler, options, err => {\n            if (err) {\n              return reject(err);\n            }\n            resolve();\n          });\n        });\n      }\n      subscribe(topic, handler, options, callback);\n    },\n    unsubscribe: (topic, handler, callback) => {\n      if (!isNode) {\n        if (!callback) {\n          return Promise.reject(NotSupportedError());\n        }\n        return setImmediate(() => callback(NotSupportedError()));\n      }\n      if (ps.listenerCount(topic) === 0 || !subscriptions[topic]) {\n        const err = new Error(`Not subscribed to '${topic}'`);\n        if (!callback) {\n          return Promise.reject(err);\n        }\n        return setImmediate(() => callback(err));\n      }\n      if (!handler && !callback) {\n        ps.removeAllListeners(topic);\n      } else {\n        ps.removeListener(topic, handler);\n      }\n\n      // Drop the request once we are actually done\n      if (ps.listenerCount(topic) === 0) {\n        if (!callback) {\n          return new Promise((resolve, reject) => {\n            // When the response stream has ended, resolve the promise\n            eos(subscriptions[topic].res, err => {\n              // FIXME: Artificial timeout needed to ensure unsubscribed\n              setTimeout(() => {\n                if (err) return reject(err);\n                resolve();\n              });\n            });\n            subscriptions[topic].req.abort();\n            subscriptions[topic] = null;\n          });\n        }\n\n        // When the response stream has ended, call the callback\n        eos(subscriptions[topic].res, err => {\n          // FIXME: Artificial timeout needed to ensure unsubscribed\n          setTimeout(() => callback(err));\n        });\n        subscriptions[topic].req.abort();\n        subscriptions[topic] = null;\n        return;\n      }\n      if (!callback) {\n        return Promise.resolve();\n      }\n      setImmediate(() => callback());\n    },\n    publish: promisify((topic, data, callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError());\n      }\n      if (!Buffer.isBuffer(data)) {\n        return callback(new Error('data must be a Buffer'));\n      }\n      const request = {\n        path: 'pubsub/pub',\n        args: [topic, data]\n      };\n      send(request, callback);\n    }),\n    ls: promisify(callback => {\n      if (!isNode) {\n        return callback(NotSupportedError());\n      }\n      const request = {\n        path: 'pubsub/ls'\n      };\n      send.andTransform(request, stringlistToArray, callback);\n    }),\n    peers: promisify((topic, callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError());\n      }\n      const request = {\n        path: 'pubsub/peers',\n        args: [topic]\n      };\n      send.andTransform(request, stringlistToArray, callback);\n    }),\n    setMaxListeners(n) {\n      return ps.setMaxListeners(n);\n    }\n  };\n  function subscribe(topic, handler, options, callback) {\n    ps.on(topic, handler);\n    if (subscriptions[topic]) {\n      // TODO: should a callback error be returned?\n      return callback();\n    }\n\n    // Request params\n    const request = {\n      path: 'pubsub/sub',\n      args: [topic],\n      qs: {\n        discover: options.discover\n      }\n    };\n\n    // Start the request and transform the response\n    // stream to Pubsub messages stream\n    subscriptions[topic] = {};\n    subscriptions[topic].req = send.andTransform(request, PubsubMessageStream.from, (err, stream) => {\n      if (err) {\n        subscriptions[topic] = null;\n        ps.removeListener(topic, handler);\n        return callback(err);\n      }\n      subscriptions[topic].res = stream;\n      stream.on('data', msg => {\n        ps.emit(topic, msg);\n      });\n      stream.on('error', err => {\n        ps.emit('error', err);\n      });\n      eos(stream, err => {\n        if (err) {\n          ps.emit('error', err);\n        }\n        subscriptions[topic] = null;\n        ps.removeListener(topic, handler);\n      });\n      callback();\n    });\n  }\n};","map":{"version":3,"names":["promisify","require","EventEmitter","eos","isNode","setImmediate","PubsubMessageStream","stringlistToArray","moduleConfig","NotSupportedError","Error","module","exports","arg","send","ps","subscriptions","id","Math","random","subscribe","topic","handler","options","callback","defaultOptions","discover","Promise","reject","resolve","err","unsubscribe","listenerCount","removeAllListeners","removeListener","res","setTimeout","req","abort","publish","data","Buffer","isBuffer","request","path","args","ls","andTransform","peers","setMaxListeners","n","on","qs","from","stream","msg","emit"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/pubsub.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst EventEmitter = require('events')\nconst eos = require('end-of-stream')\nconst isNode = require('detect-node')\nconst setImmediate = require('async/setImmediate')\nconst PubsubMessageStream = require('./utils/pubsub-message-stream')\nconst stringlistToArray = require('./utils/stringlist-to-array')\nconst moduleConfig = require('./utils/module-config')\n\nconst NotSupportedError = () => new Error('pubsub is currently not supported when run in the browser')\n\n/* Public API */\nmodule.exports = (arg) => {\n  const send = moduleConfig(arg)\n\n  /* Internal subscriptions state and functions */\n  const ps = new EventEmitter()\n  const subscriptions = {}\n  ps.id = Math.random()\n  return {\n    subscribe: (topic, handler, options, callback) => {\n      const defaultOptions = {\n        discover: false\n      }\n\n      if (typeof options === 'function') {\n        callback = options\n        options = defaultOptions\n      }\n\n      if (!options) {\n        options = defaultOptions\n      }\n\n      // Throw an error if ran in the browsers\n      if (!isNode) {\n        if (!callback) {\n          return Promise.reject(NotSupportedError())\n        }\n\n        return setImmediate(() => callback(NotSupportedError()))\n      }\n\n      // promisify doesn't work as we always pass a\n      // function as last argument (`handler`)\n      if (!callback) {\n        return new Promise((resolve, reject) => {\n          subscribe(topic, handler, options, (err) => {\n            if (err) {\n              return reject(err)\n            }\n            resolve()\n          })\n        })\n      }\n\n      subscribe(topic, handler, options, callback)\n    },\n    unsubscribe: (topic, handler, callback) => {\n      if (!isNode) {\n        if (!callback) {\n          return Promise.reject(NotSupportedError())\n        }\n\n        return setImmediate(() => callback(NotSupportedError()))\n      }\n\n      if (ps.listenerCount(topic) === 0 || !subscriptions[topic]) {\n        const err = new Error(`Not subscribed to '${topic}'`)\n\n        if (!callback) {\n          return Promise.reject(err)\n        }\n\n        return setImmediate(() => callback(err))\n      }\n\n      if (!handler && !callback) {\n        ps.removeAllListeners(topic)\n      } else {\n        ps.removeListener(topic, handler)\n      }\n\n      // Drop the request once we are actually done\n      if (ps.listenerCount(topic) === 0) {\n        if (!callback) {\n          return new Promise((resolve, reject) => {\n            // When the response stream has ended, resolve the promise\n            eos(subscriptions[topic].res, (err) => {\n              // FIXME: Artificial timeout needed to ensure unsubscribed\n              setTimeout(() => {\n                if (err) return reject(err)\n                resolve()\n              })\n            })\n            subscriptions[topic].req.abort()\n            subscriptions[topic] = null\n          })\n        }\n\n        // When the response stream has ended, call the callback\n        eos(subscriptions[topic].res, (err) => {\n          // FIXME: Artificial timeout needed to ensure unsubscribed\n          setTimeout(() => callback(err))\n        })\n        subscriptions[topic].req.abort()\n        subscriptions[topic] = null\n        return\n      }\n\n      if (!callback) {\n        return Promise.resolve()\n      }\n\n      setImmediate(() => callback())\n    },\n    publish: promisify((topic, data, callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError())\n      }\n\n      if (!Buffer.isBuffer(data)) {\n        return callback(new Error('data must be a Buffer'))\n      }\n\n      const request = {\n        path: 'pubsub/pub',\n        args: [topic, data]\n      }\n\n      send(request, callback)\n    }),\n    ls: promisify((callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError())\n      }\n\n      const request = {\n        path: 'pubsub/ls'\n      }\n\n      send.andTransform(request, stringlistToArray, callback)\n    }),\n    peers: promisify((topic, callback) => {\n      if (!isNode) {\n        return callback(NotSupportedError())\n      }\n\n      const request = {\n        path: 'pubsub/peers',\n        args: [topic]\n      }\n\n      send.andTransform(request, stringlistToArray, callback)\n    }),\n    setMaxListeners (n) {\n      return ps.setMaxListeners(n)\n    }\n  }\n\n  function subscribe (topic, handler, options, callback) {\n    ps.on(topic, handler)\n\n    if (subscriptions[topic]) {\n      // TODO: should a callback error be returned?\n      return callback()\n    }\n\n    // Request params\n    const request = {\n      path: 'pubsub/sub',\n      args: [topic],\n      qs: {\n        discover: options.discover\n      }\n    }\n\n    // Start the request and transform the response\n    // stream to Pubsub messages stream\n    subscriptions[topic] = {}\n    subscriptions[topic].req = send.andTransform(request, PubsubMessageStream.from, (err, stream) => {\n      if (err) {\n        subscriptions[topic] = null\n        ps.removeListener(topic, handler)\n        return callback(err)\n      }\n\n      subscriptions[topic].res = stream\n\n      stream.on('data', (msg) => {\n        ps.emit(topic, msg)\n      })\n\n      stream.on('error', (err) => {\n        ps.emit('error', err)\n      })\n\n      eos(stream, (err) => {\n        if (err) {\n          ps.emit('error', err)\n        }\n\n        subscriptions[topic] = null\n        ps.removeListener(topic, handler)\n      })\n\n      callback()\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}