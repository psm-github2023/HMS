{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst multibase = require('multibase');\nconst CID = require('cids');\nmodule.exports = send => {\n  return promisify((args, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.cidBase) {\n      opts['cid-base'] = opts.cidBase;\n      delete opts.cidBase;\n    }\n    const transform = (res, callback) => {\n      if (!opts['cid-base']) {\n        return callback(null, res.Path);\n      }\n\n      // FIXME: remove when go-ipfs supports ?cid-base for /api/v0/resolve\n      // https://github.com/ipfs/go-ipfs/pull/5777#issuecomment-439838555\n      const parts = res.Path.split('/'); // ['', 'ipfs', 'QmHash', ...]\n\n      if (multibase.isEncoded(parts[2]) !== opts['cid-base']) {\n        try {\n          let cid = new CID(parts[2]);\n          if (cid.version === 0 && opts['cid-base'] !== 'base58btc') {\n            cid = cid.toV1();\n          }\n          parts[2] = cid.toBaseEncodedString(opts['cid-base']);\n          res.Path = parts.join('/');\n        } catch (err) {\n          return callback(err);\n        }\n      }\n      callback(null, res.Path);\n    };\n    send.andTransform({\n      path: 'resolve',\n      args: args,\n      qs: opts\n    }, transform, callback);\n  });\n};","map":{"version":3,"names":["promisify","require","multibase","CID","module","exports","send","args","opts","callback","cidBase","transform","res","Path","parts","split","isEncoded","cid","version","toV1","toBaseEncodedString","join","err","andTransform","path","qs"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/resolve.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst multibase = require('multibase')\nconst CID = require('cids')\n\nmodule.exports = (send) => {\n  return promisify((args, opts, callback) => {\n    if (typeof (opts) === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    opts = opts || {}\n\n    if (opts.cidBase) {\n      opts['cid-base'] = opts.cidBase\n      delete opts.cidBase\n    }\n\n    const transform = (res, callback) => {\n      if (!opts['cid-base']) {\n        return callback(null, res.Path)\n      }\n\n      // FIXME: remove when go-ipfs supports ?cid-base for /api/v0/resolve\n      // https://github.com/ipfs/go-ipfs/pull/5777#issuecomment-439838555\n      const parts = res.Path.split('/') // ['', 'ipfs', 'QmHash', ...]\n\n      if (multibase.isEncoded(parts[2]) !== opts['cid-base']) {\n        try {\n          let cid = new CID(parts[2])\n\n          if (cid.version === 0 && opts['cid-base'] !== 'base58btc') {\n            cid = cid.toV1()\n          }\n\n          parts[2] = cid.toBaseEncodedString(opts['cid-base'])\n          res.Path = parts.join('/')\n        } catch (err) {\n          return callback(err)\n        }\n      }\n\n      callback(null, res.Path)\n    }\n\n    send.andTransform({\n      path: 'resolve',\n      args: args,\n      qs: opts\n    }, transform, callback)\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAW,CAAC;AACtC,MAAME,GAAG,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE3BG,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAON,SAAS,CAAC,CAACO,IAAI,EAAEC,IAAI,EAAEC,QAAQ,KAAK;IACzC,IAAI,OAAQD,IAAK,KAAK,UAAU,EAAE;MAChCC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IAEAA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,IAAIA,IAAI,CAACE,OAAO,EAAE;MAChBF,IAAI,CAAC,UAAU,CAAC,GAAGA,IAAI,CAACE,OAAO;MAC/B,OAAOF,IAAI,CAACE,OAAO;IACrB;IAEA,MAAMC,SAAS,GAAGA,CAACC,GAAG,EAAEH,QAAQ,KAAK;MACnC,IAAI,CAACD,IAAI,CAAC,UAAU,CAAC,EAAE;QACrB,OAAOC,QAAQ,CAAC,IAAI,EAAEG,GAAG,CAACC,IAAI,CAAC;MACjC;;MAEA;MACA;MACA,MAAMC,KAAK,GAAGF,GAAG,CAACC,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,EAAC;;MAElC,IAAIb,SAAS,CAACc,SAAS,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,KAAKN,IAAI,CAAC,UAAU,CAAC,EAAE;QACtD,IAAI;UACF,IAAIS,GAAG,GAAG,IAAId,GAAG,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC;UAE3B,IAAIG,GAAG,CAACC,OAAO,KAAK,CAAC,IAAIV,IAAI,CAAC,UAAU,CAAC,KAAK,WAAW,EAAE;YACzDS,GAAG,GAAGA,GAAG,CAACE,IAAI,CAAC,CAAC;UAClB;UAEAL,KAAK,CAAC,CAAC,CAAC,GAAGG,GAAG,CAACG,mBAAmB,CAACZ,IAAI,CAAC,UAAU,CAAC,CAAC;UACpDI,GAAG,CAACC,IAAI,GAAGC,KAAK,CAACO,IAAI,CAAC,GAAG,CAAC;QAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;UACZ,OAAOb,QAAQ,CAACa,GAAG,CAAC;QACtB;MACF;MAEAb,QAAQ,CAAC,IAAI,EAAEG,GAAG,CAACC,IAAI,CAAC;IAC1B,CAAC;IAEDP,IAAI,CAACiB,YAAY,CAAC;MAChBC,IAAI,EAAE,SAAS;MACfjB,IAAI,EAAEA,IAAI;MACVkB,EAAE,EAAEjB;IACN,CAAC,EAAEG,SAAS,EAAEF,QAAQ,CAAC;EACzB,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}