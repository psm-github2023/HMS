{"ast":null,"code":"'use strict';\n\nconst sha3 = require('js-sha3');\nconst murmur3 = require('murmurhash3js');\nconst utils = require('./utils');\nconst sha = require('./crypto-sha1-2');\nconst toCallback = utils.toCallback;\nconst toBuf = utils.toBuf;\nconst fromString = utils.fromString;\nconst fromNumberTo32BitBuf = utils.fromNumberTo32BitBuf;\nconst dblSha2256 = (buf, cb) => {\n  sha.sha2256(buf, (err, firstHash) => {\n    if (err) {\n      cb(err);\n    }\n    sha.sha2256(Buffer.from(firstHash), cb);\n  });\n};\nmodule.exports = {\n  sha1: sha.sha1,\n  sha2256: sha.sha2256,\n  sha2512: sha.sha2512,\n  sha3512: toCallback(toBuf(sha3.sha3_512)),\n  sha3384: toCallback(toBuf(sha3.sha3_384)),\n  sha3256: toCallback(toBuf(sha3.sha3_256)),\n  sha3224: toCallback(toBuf(sha3.sha3_224)),\n  shake128: toCallback(toBuf(sha3.shake_128, 128)),\n  shake256: toCallback(toBuf(sha3.shake_256, 256)),\n  keccak224: toCallback(toBuf(sha3.keccak_224)),\n  keccak256: toCallback(toBuf(sha3.keccak_256)),\n  keccak384: toCallback(toBuf(sha3.keccak_384)),\n  keccak512: toCallback(toBuf(sha3.keccak_512)),\n  murmur3128: toCallback(toBuf(fromString(murmur3.x64.hash128))),\n  murmur332: toCallback(fromNumberTo32BitBuf(fromString(murmur3.x86.hash32))),\n  addBlake: require('./blake'),\n  dblSha2256: dblSha2256\n};","map":{"version":3,"names":["sha3","require","murmur3","utils","sha","toCallback","toBuf","fromString","fromNumberTo32BitBuf","dblSha2256","buf","cb","sha2256","err","firstHash","Buffer","from","module","exports","sha1","sha2512","sha3512","sha3_512","sha3384","sha3_384","sha3256","sha3_256","sha3224","sha3_224","shake128","shake_128","shake256","shake_256","keccak224","keccak_224","keccak256","keccak_256","keccak384","keccak_384","keccak512","keccak_512","murmur3128","x64","hash128","murmur332","x86","hash32","addBlake"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/libp2p-crypto/node_modules/multihashing-async/src/crypto.js"],"sourcesContent":["'use strict'\n\nconst sha3 = require('js-sha3')\nconst murmur3 = require('murmurhash3js')\n\nconst utils = require('./utils')\nconst sha = require('./crypto-sha1-2')\n\nconst toCallback = utils.toCallback\nconst toBuf = utils.toBuf\nconst fromString = utils.fromString\nconst fromNumberTo32BitBuf = utils.fromNumberTo32BitBuf\n\nconst dblSha2256 = (buf, cb) => {\n  sha.sha2256(buf, (err, firstHash) => {\n    if (err) {\n      cb(err)\n    }\n    sha.sha2256((Buffer.from(firstHash)), cb)\n  })\n}\n\nmodule.exports = {\n  sha1: sha.sha1,\n  sha2256: sha.sha2256,\n  sha2512: sha.sha2512,\n  sha3512: toCallback(toBuf(sha3.sha3_512)),\n  sha3384: toCallback(toBuf(sha3.sha3_384)),\n  sha3256: toCallback(toBuf(sha3.sha3_256)),\n  sha3224: toCallback(toBuf(sha3.sha3_224)),\n  shake128: toCallback(toBuf(sha3.shake_128, 128)),\n  shake256: toCallback(toBuf(sha3.shake_256, 256)),\n  keccak224: toCallback(toBuf(sha3.keccak_224)),\n  keccak256: toCallback(toBuf(sha3.keccak_256)),\n  keccak384: toCallback(toBuf(sha3.keccak_384)),\n  keccak512: toCallback(toBuf(sha3.keccak_512)),\n  murmur3128: toCallback(toBuf(fromString(murmur3.x64.hash128))),\n  murmur332: toCallback(fromNumberTo32BitBuf(fromString(murmur3.x86.hash32))),\n  addBlake: require('./blake'),\n  dblSha2256: dblSha2256\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC/B,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAe,CAAC;AAExC,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMG,GAAG,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAEtC,MAAMI,UAAU,GAAGF,KAAK,CAACE,UAAU;AACnC,MAAMC,KAAK,GAAGH,KAAK,CAACG,KAAK;AACzB,MAAMC,UAAU,GAAGJ,KAAK,CAACI,UAAU;AACnC,MAAMC,oBAAoB,GAAGL,KAAK,CAACK,oBAAoB;AAEvD,MAAMC,UAAU,GAAGA,CAACC,GAAG,EAAEC,EAAE,KAAK;EAC9BP,GAAG,CAACQ,OAAO,CAACF,GAAG,EAAE,CAACG,GAAG,EAAEC,SAAS,KAAK;IACnC,IAAID,GAAG,EAAE;MACPF,EAAE,CAACE,GAAG,CAAC;IACT;IACAT,GAAG,CAACQ,OAAO,CAAEG,MAAM,CAACC,IAAI,CAACF,SAAS,CAAC,EAAGH,EAAE,CAAC;EAC3C,CAAC,CAAC;AACJ,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAG;EACfC,IAAI,EAAEf,GAAG,CAACe,IAAI;EACdP,OAAO,EAAER,GAAG,CAACQ,OAAO;EACpBQ,OAAO,EAAEhB,GAAG,CAACgB,OAAO;EACpBC,OAAO,EAAEhB,UAAU,CAACC,KAAK,CAACN,IAAI,CAACsB,QAAQ,CAAC,CAAC;EACzCC,OAAO,EAAElB,UAAU,CAACC,KAAK,CAACN,IAAI,CAACwB,QAAQ,CAAC,CAAC;EACzCC,OAAO,EAAEpB,UAAU,CAACC,KAAK,CAACN,IAAI,CAAC0B,QAAQ,CAAC,CAAC;EACzCC,OAAO,EAAEtB,UAAU,CAACC,KAAK,CAACN,IAAI,CAAC4B,QAAQ,CAAC,CAAC;EACzCC,QAAQ,EAAExB,UAAU,CAACC,KAAK,CAACN,IAAI,CAAC8B,SAAS,EAAE,GAAG,CAAC,CAAC;EAChDC,QAAQ,EAAE1B,UAAU,CAACC,KAAK,CAACN,IAAI,CAACgC,SAAS,EAAE,GAAG,CAAC,CAAC;EAChDC,SAAS,EAAE5B,UAAU,CAACC,KAAK,CAACN,IAAI,CAACkC,UAAU,CAAC,CAAC;EAC7CC,SAAS,EAAE9B,UAAU,CAACC,KAAK,CAACN,IAAI,CAACoC,UAAU,CAAC,CAAC;EAC7CC,SAAS,EAAEhC,UAAU,CAACC,KAAK,CAACN,IAAI,CAACsC,UAAU,CAAC,CAAC;EAC7CC,SAAS,EAAElC,UAAU,CAACC,KAAK,CAACN,IAAI,CAACwC,UAAU,CAAC,CAAC;EAC7CC,UAAU,EAAEpC,UAAU,CAACC,KAAK,CAACC,UAAU,CAACL,OAAO,CAACwC,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;EAC9DC,SAAS,EAAEvC,UAAU,CAACG,oBAAoB,CAACD,UAAU,CAACL,OAAO,CAAC2C,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC;EAC3EC,QAAQ,EAAE9C,OAAO,CAAC,SAAS,CAAC;EAC5BQ,UAAU,EAAEA;AACd,CAAC"},"metadata":{},"sourceType":"script"}