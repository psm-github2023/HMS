{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst ConcatStream = require('concat-stream');\nconst once = require('once');\nconst {\n  isSource\n} = require('is-pull-stream');\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter');\nconst SendFilesStream = require('../utils/send-files-stream');\nconst validateAddInput = require('ipfs-utils/src/files/add-input-validation');\nmodule.exports = send => {\n  const createAddStream = SendFilesStream(send, 'add');\n  const add = promisify((_files, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options;\n      options = null;\n    }\n    const callback = once(_callback);\n    if (!options) {\n      options = {};\n    }\n    options.converter = FileResultStreamConverter;\n    try {\n      validateAddInput(_files);\n    } catch (err) {\n      return callback(err);\n    }\n    const files = [].concat(_files);\n    const stream = createAddStream({\n      qs: options\n    });\n    const concat = ConcatStream(result => callback(null, result));\n    stream.once('error', callback);\n    stream.pipe(concat);\n    files.forEach(file => stream.write(file));\n    stream.end();\n  });\n  return function () {\n    const args = Array.from(arguments);\n\n    // If we files.add(<pull stream>), then promisify thinks the pull stream is\n    // a callback! Add an empty options object in this case so that a promise\n    // is returned.\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({});\n    }\n    return add.apply(null, args);\n  };\n};","map":{"version":3,"names":["promisify","require","ConcatStream","once","isSource","FileResultStreamConverter","SendFilesStream","validateAddInput","module","exports","send","createAddStream","add","_files","options","_callback","callback","converter","err","files","concat","stream","qs","result","pipe","forEach","file","write","end","args","Array","from","arguments","length","push","apply"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/files-regular/add.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst ConcatStream = require('concat-stream')\nconst once = require('once')\nconst { isSource } = require('is-pull-stream')\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter')\nconst SendFilesStream = require('../utils/send-files-stream')\nconst validateAddInput = require('ipfs-utils/src/files/add-input-validation')\n\nmodule.exports = (send) => {\n  const createAddStream = SendFilesStream(send, 'add')\n\n  const add = promisify((_files, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options\n      options = null\n    }\n    const callback = once(_callback)\n\n    if (!options) {\n      options = {}\n    }\n    options.converter = FileResultStreamConverter\n\n    try {\n      validateAddInput(_files)\n    } catch (err) {\n      return callback(err)\n    }\n\n    const files = [].concat(_files)\n\n    const stream = createAddStream({ qs: options })\n    const concat = ConcatStream((result) => callback(null, result))\n    stream.once('error', callback)\n    stream.pipe(concat)\n\n    files.forEach((file) => stream.write(file))\n    stream.end()\n  })\n\n  return function () {\n    const args = Array.from(arguments)\n\n    // If we files.add(<pull stream>), then promisify thinks the pull stream is\n    // a callback! Add an empty options object in this case so that a promise\n    // is returned.\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({})\n    }\n\n    return add.apply(null, args)\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC7C,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEG;AAAS,CAAC,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAC9C,MAAMI,yBAAyB,GAAGJ,OAAO,CAAC,uCAAuC,CAAC;AAClF,MAAMK,eAAe,GAAGL,OAAO,CAAC,4BAA4B,CAAC;AAC7D,MAAMM,gBAAgB,GAAGN,OAAO,CAAC,2CAA2C,CAAC;AAE7EO,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,MAAMC,eAAe,GAAGL,eAAe,CAACI,IAAI,EAAE,KAAK,CAAC;EAEpD,MAAME,GAAG,GAAGZ,SAAS,CAAC,CAACa,MAAM,EAAEC,OAAO,EAAEC,SAAS,KAAK;IACpD,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;MACjCC,SAAS,GAAGD,OAAO;MACnBA,OAAO,GAAG,IAAI;IAChB;IACA,MAAME,QAAQ,GAAGb,IAAI,CAACY,SAAS,CAAC;IAEhC,IAAI,CAACD,OAAO,EAAE;MACZA,OAAO,GAAG,CAAC,CAAC;IACd;IACAA,OAAO,CAACG,SAAS,GAAGZ,yBAAyB;IAE7C,IAAI;MACFE,gBAAgB,CAACM,MAAM,CAAC;IAC1B,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZ,OAAOF,QAAQ,CAACE,GAAG,CAAC;IACtB;IAEA,MAAMC,KAAK,GAAG,EAAE,CAACC,MAAM,CAACP,MAAM,CAAC;IAE/B,MAAMQ,MAAM,GAAGV,eAAe,CAAC;MAAEW,EAAE,EAAER;IAAQ,CAAC,CAAC;IAC/C,MAAMM,MAAM,GAAGlB,YAAY,CAAEqB,MAAM,IAAKP,QAAQ,CAAC,IAAI,EAAEO,MAAM,CAAC,CAAC;IAC/DF,MAAM,CAAClB,IAAI,CAAC,OAAO,EAAEa,QAAQ,CAAC;IAC9BK,MAAM,CAACG,IAAI,CAACJ,MAAM,CAAC;IAEnBD,KAAK,CAACM,OAAO,CAAEC,IAAI,IAAKL,MAAM,CAACM,KAAK,CAACD,IAAI,CAAC,CAAC;IAC3CL,MAAM,CAACO,GAAG,CAAC,CAAC;EACd,CAAC,CAAC;EAEF,OAAO,YAAY;IACjB,MAAMC,IAAI,GAAGC,KAAK,CAACC,IAAI,CAACC,SAAS,CAAC;;IAElC;IACA;IACA;IACA,IAAIH,IAAI,CAACI,MAAM,KAAK,CAAC,IAAI7B,QAAQ,CAACyB,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1CA,IAAI,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;IACf;IAEA,OAAOtB,GAAG,CAACuB,KAAK,CAAC,IAAI,EAAEN,IAAI,CAAC;EAC9B,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script"}