{"ast":null,"code":"'use strict';\n\nconst cbor = require('borc');\nconst {\n  Buffer\n} = require('buffer');\nconst multicodec = require('multicodec');\nconst multihashing = require('multihashing-async');\nconst CID = require('cids');\nconst isCircular = require('is-circular');\n\n// https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\nconst CID_CBOR_TAG = 42;\nfunction tagCID(cid) {\n  if (typeof cid === 'string') {\n    cid = new CID(cid).buffer;\n  } else if (CID.isCID(cid)) {\n    cid = cid.buffer;\n  }\n  return new cbor.Tagged(CID_CBOR_TAG, Buffer.concat([Buffer.from('00', 'hex'),\n  // thanks jdag\n  cid]));\n}\nfunction replaceCIDbyTAG(dagNode) {\n  let circular;\n  try {\n    circular = isCircular(dagNode);\n  } catch (e) {\n    circular = false;\n  }\n  if (circular) {\n    throw new Error('The object passed has circular references');\n  }\n  function transform(obj) {\n    if (!obj || obj instanceof Uint8Array || typeof obj === 'string') {\n      return obj;\n    }\n    if (Array.isArray(obj)) {\n      return obj.map(transform);\n    }\n    if (CID.isCID(obj)) {\n      return tagCID(obj);\n    }\n    const keys = Object.keys(obj);\n    if (keys.length > 0) {\n      // Recursive transform\n      const out = {};\n      keys.forEach(key => {\n        if (typeof obj[key] === 'object') {\n          out[key] = transform(obj[key]);\n        } else {\n          out[key] = obj[key];\n        }\n      });\n      return out;\n    } else {\n      return obj;\n    }\n  }\n  return transform(dagNode);\n}\nexports = module.exports;\nexports.codec = multicodec.DAG_CBOR;\nexports.defaultHashAlg = multicodec.SHA2_256;\nconst defaultTags = {\n  [CID_CBOR_TAG]: val => {\n    // remove that 0\n    val = val.slice(1);\n    return new CID(val);\n  }\n};\nconst defaultSize = 64 * 1024; // current decoder heap size, 64 Kb\nlet currentSize = defaultSize;\nconst defaultMaxSize = 64 * 1024 * 1024; // max heap size when auto-growing, 64 Mb\nlet maxSize = defaultMaxSize;\nlet decoder = null;\n\n/**\n * Configure the underlying CBOR decoder.\n *\n * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.\n * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`\n * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error\n * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`\n */\nexports.configureDecoder = options => {\n  let tags = defaultTags;\n  if (options) {\n    if (typeof options.size === 'number') {\n      currentSize = options.size;\n    }\n    if (typeof options.maxSize === 'number') {\n      maxSize = options.maxSize;\n    }\n    if (options.tags) {\n      tags = Object.assign({}, defaultTags, options && options.tags);\n    }\n  } else {\n    // no options, reset to defaults\n    currentSize = defaultSize;\n    maxSize = defaultMaxSize;\n  }\n  const decoderOptions = {\n    tags,\n    size: currentSize\n  };\n  decoder = new cbor.Decoder(decoderOptions);\n  // borc edits opts.size in-place so we can capture _actual_ size\n  currentSize = decoderOptions.size;\n};\nexports.configureDecoder(); // Setup default cbor.Decoder\n\n/**\n * Serialize internal representation into a binary CBOR block.\n *\n * @param {Object} node - Internal representation of a CBOR block\n * @returns {Buffer} - The encoded binary representation\n */\nexports.serialize = node => {\n  const nodeTagged = replaceCIDbyTAG(node);\n  const serialized = cbor.encode(nodeTagged);\n  return serialized;\n};\n\n/**\n * Deserialize CBOR block into the internal representation.\n *\n * @param {Buffer} data - Binary representation of a CBOR block\n * @returns {Object} - An object that conforms to the IPLD Data Model\n */\nexports.deserialize = data => {\n  if (data.length > currentSize && data.length <= maxSize) {\n    exports.configureDecoder({\n      size: data.length\n    });\n  }\n  if (data.length > currentSize) {\n    throw new Error('Data is too large to deserialize with current decoder');\n  }\n  const deserialized = decoder.decodeFirst(data);\n  return deserialized;\n};\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\nexports.cid = async (binaryBlob, userOptions) => {\n  const defaultOptions = {\n    cidVersion: 1,\n    hashAlg: exports.defaultHashAlg\n  };\n  const options = Object.assign(defaultOptions, userOptions);\n  const multihash = await multihashing(binaryBlob, options.hashAlg);\n  const codecName = multicodec.print[exports.codec];\n  const cid = new CID(options.cidVersion, codecName, multihash);\n  return cid;\n};","map":{"version":3,"names":["cbor","require","Buffer","multicodec","multihashing","CID","isCircular","CID_CBOR_TAG","tagCID","cid","buffer","isCID","Tagged","concat","from","replaceCIDbyTAG","dagNode","circular","e","Error","transform","obj","Uint8Array","Array","isArray","map","keys","Object","length","out","forEach","key","exports","module","codec","DAG_CBOR","defaultHashAlg","SHA2_256","defaultTags","val","slice","defaultSize","currentSize","defaultMaxSize","maxSize","decoder","configureDecoder","options","tags","size","assign","decoderOptions","Decoder","serialize","node","nodeTagged","serialized","encode","deserialize","data","deserialized","decodeFirst","binaryBlob","userOptions","defaultOptions","cidVersion","hashAlg","multihash","codecName","print"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipld-dag-cbor/src/util.js"],"sourcesContent":["'use strict'\n\nconst cbor = require('borc')\nconst { Buffer } = require('buffer')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst isCircular = require('is-circular')\n\n// https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\nconst CID_CBOR_TAG = 42\n\nfunction tagCID (cid) {\n  if (typeof cid === 'string') {\n    cid = new CID(cid).buffer\n  } else if (CID.isCID(cid)) {\n    cid = cid.buffer\n  }\n\n  return new cbor.Tagged(CID_CBOR_TAG, Buffer.concat([\n    Buffer.from('00', 'hex'), // thanks jdag\n    cid\n  ]))\n}\n\nfunction replaceCIDbyTAG (dagNode) {\n  let circular\n  try {\n    circular = isCircular(dagNode)\n  } catch (e) {\n    circular = false\n  }\n  if (circular) {\n    throw new Error('The object passed has circular references')\n  }\n\n  function transform (obj) {\n    if (!obj || obj instanceof Uint8Array || typeof obj === 'string') {\n      return obj\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(transform)\n    }\n\n    if (CID.isCID(obj)) {\n      return tagCID(obj)\n    }\n\n    const keys = Object.keys(obj)\n\n    if (keys.length > 0) {\n      // Recursive transform\n      const out = {}\n      keys.forEach((key) => {\n        if (typeof obj[key] === 'object') {\n          out[key] = transform(obj[key])\n        } else {\n          out[key] = obj[key]\n        }\n      })\n      return out\n    } else {\n      return obj\n    }\n  }\n\n  return transform(dagNode)\n}\n\nexports = module.exports\n\nexports.codec = multicodec.DAG_CBOR\nexports.defaultHashAlg = multicodec.SHA2_256\n\nconst defaultTags = {\n  [CID_CBOR_TAG]: (val) => {\n    // remove that 0\n    val = val.slice(1)\n    return new CID(val)\n  }\n}\nconst defaultSize = 64 * 1024 // current decoder heap size, 64 Kb\nlet currentSize = defaultSize\nconst defaultMaxSize = 64 * 1024 * 1024 // max heap size when auto-growing, 64 Mb\nlet maxSize = defaultMaxSize\nlet decoder = null\n\n/**\n * Configure the underlying CBOR decoder.\n *\n * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.\n * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`\n * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error\n * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`\n */\nexports.configureDecoder = (options) => {\n  let tags = defaultTags\n\n  if (options) {\n    if (typeof options.size === 'number') {\n      currentSize = options.size\n    }\n    if (typeof options.maxSize === 'number') {\n      maxSize = options.maxSize\n    }\n    if (options.tags) {\n      tags = Object.assign({}, defaultTags, options && options.tags)\n    }\n  } else {\n    // no options, reset to defaults\n    currentSize = defaultSize\n    maxSize = defaultMaxSize\n  }\n\n  const decoderOptions = {\n    tags,\n    size: currentSize\n  }\n\n  decoder = new cbor.Decoder(decoderOptions)\n  // borc edits opts.size in-place so we can capture _actual_ size\n  currentSize = decoderOptions.size\n}\n\nexports.configureDecoder() // Setup default cbor.Decoder\n\n/**\n * Serialize internal representation into a binary CBOR block.\n *\n * @param {Object} node - Internal representation of a CBOR block\n * @returns {Buffer} - The encoded binary representation\n */\nexports.serialize = (node) => {\n  const nodeTagged = replaceCIDbyTAG(node)\n  const serialized = cbor.encode(nodeTagged)\n\n  return serialized\n}\n\n/**\n * Deserialize CBOR block into the internal representation.\n *\n * @param {Buffer} data - Binary representation of a CBOR block\n * @returns {Object} - An object that conforms to the IPLD Data Model\n */\nexports.deserialize = (data) => {\n  if (data.length > currentSize && data.length <= maxSize) {\n    exports.configureDecoder({ size: data.length })\n  }\n\n  if (data.length > currentSize) {\n    throw new Error('Data is too large to deserialize with current decoder')\n  }\n\n  const deserialized = decoder.decodeFirst(data)\n\n  return deserialized\n}\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\nexports.cid = async (binaryBlob, userOptions) => {\n  const defaultOptions = { cidVersion: 1, hashAlg: exports.defaultHashAlg }\n  const options = Object.assign(defaultOptions, userOptions)\n\n  const multihash = await multihashing(binaryBlob, options.hashAlg)\n  const codecName = multicodec.print[exports.codec]\n  const cid = new CID(options.cidVersion, codecName, multihash)\n\n  return cid\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}