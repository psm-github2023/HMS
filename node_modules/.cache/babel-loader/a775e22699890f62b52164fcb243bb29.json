{"ast":null,"code":"'use strict';\n\nconst pump = require('pump');\nconst tar = require('tar-stream');\nconst ReadableStream = require('readable-stream').Readable;\nclass ObjectsStreams extends ReadableStream {\n  constructor(options) {\n    const opts = Object.assign(options || {}, {\n      objectMode: true\n    });\n    super(opts);\n  }\n  _read() {}\n}\n\n/*\n  Transform a tar stream into a stream of objects:\n\n  Output format:\n  { path: 'string', content: Stream<Readable> }\n*/\nconst TarStreamToObjects = (inputStream, callback) => {\n  let outputStream = new ObjectsStreams();\n  let extractStream = tar.extract();\n  extractStream.on('entry', (header, stream, next) => {\n    stream.on('end', next);\n    if (header.type !== 'directory') {\n      outputStream.push({\n        path: header.name,\n        content: stream\n      });\n    } else {\n      outputStream.push({\n        path: header.name\n      });\n      stream.resume();\n    }\n  }).on('finish', () => outputStream.push(null));\n  pump(inputStream, extractStream);\n  callback(null, outputStream);\n};\nmodule.exports = TarStreamToObjects;","map":{"version":3,"names":["pump","require","tar","ReadableStream","Readable","ObjectsStreams","constructor","options","opts","Object","assign","objectMode","_read","TarStreamToObjects","inputStream","callback","outputStream","extractStream","extract","on","header","stream","next","type","push","path","name","content","resume","module","exports"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/utils/tar-stream-to-objects.js"],"sourcesContent":["'use strict'\n\nconst pump = require('pump')\nconst tar = require('tar-stream')\nconst ReadableStream = require('readable-stream').Readable\n\nclass ObjectsStreams extends ReadableStream {\n  constructor (options) {\n    const opts = Object.assign(options || {}, { objectMode: true })\n    super(opts)\n  }\n\n  _read () {}\n}\n\n/*\n  Transform a tar stream into a stream of objects:\n\n  Output format:\n  { path: 'string', content: Stream<Readable> }\n*/\nconst TarStreamToObjects = (inputStream, callback) => {\n  let outputStream = new ObjectsStreams()\n  let extractStream = tar.extract()\n\n  extractStream\n    .on('entry', (header, stream, next) => {\n      stream.on('end', next)\n\n      if (header.type !== 'directory') {\n        outputStream.push({\n          path: header.name,\n          content: stream\n        })\n      } else {\n        outputStream.push({\n          path: header.name\n        })\n        stream.resume()\n      }\n    })\n    .on('finish', () => outputStream.push(null))\n\n  pump(inputStream, extractStream)\n  callback(null, outputStream)\n}\n\nmodule.exports = TarStreamToObjects\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,GAAG,GAAGD,OAAO,CAAC,YAAY,CAAC;AACjC,MAAME,cAAc,GAAGF,OAAO,CAAC,iBAAiB,CAAC,CAACG,QAAQ;AAE1D,MAAMC,cAAc,SAASF,cAAc,CAAC;EAC1CG,WAAWA,CAAEC,OAAO,EAAE;IACpB,MAAMC,IAAI,GAAGC,MAAM,CAACC,MAAM,CAACH,OAAO,IAAI,CAAC,CAAC,EAAE;MAAEI,UAAU,EAAE;IAAK,CAAC,CAAC;IAC/D,KAAK,CAACH,IAAI,CAAC;EACb;EAEAI,KAAKA,CAAA,EAAI,CAAC;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAGA,CAACC,WAAW,EAAEC,QAAQ,KAAK;EACpD,IAAIC,YAAY,GAAG,IAAIX,cAAc,CAAC,CAAC;EACvC,IAAIY,aAAa,GAAGf,GAAG,CAACgB,OAAO,CAAC,CAAC;EAEjCD,aAAa,CACVE,EAAE,CAAC,OAAO,EAAE,CAACC,MAAM,EAAEC,MAAM,EAAEC,IAAI,KAAK;IACrCD,MAAM,CAACF,EAAE,CAAC,KAAK,EAAEG,IAAI,CAAC;IAEtB,IAAIF,MAAM,CAACG,IAAI,KAAK,WAAW,EAAE;MAC/BP,YAAY,CAACQ,IAAI,CAAC;QAChBC,IAAI,EAAEL,MAAM,CAACM,IAAI;QACjBC,OAAO,EAAEN;MACX,CAAC,CAAC;IACJ,CAAC,MAAM;MACLL,YAAY,CAACQ,IAAI,CAAC;QAChBC,IAAI,EAAEL,MAAM,CAACM;MACf,CAAC,CAAC;MACFL,MAAM,CAACO,MAAM,CAAC,CAAC;IACjB;EACF,CAAC,CAAC,CACDT,EAAE,CAAC,QAAQ,EAAE,MAAMH,YAAY,CAACQ,IAAI,CAAC,IAAI,CAAC,CAAC;EAE9CxB,IAAI,CAACc,WAAW,EAAEG,aAAa,CAAC;EAChCF,QAAQ,CAAC,IAAI,EAAEC,YAAY,CAAC;AAC9B,CAAC;AAEDa,MAAM,CAACC,OAAO,GAAGjB,kBAAkB"},"metadata":{},"sourceType":"script"}