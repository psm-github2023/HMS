{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst Block = require('ipfs-block');\nconst CID = require('cids');\nconst streamToValue = require('../utils/stream-to-value');\nmodule.exports = send => {\n  return promisify((args, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    // TODO this needs to be adjusted with the new go-ipfs http-api\n    let cid;\n    try {\n      if (CID.isCID(args)) {\n        cid = args;\n        args = cid.toBaseEncodedString();\n      } else if (Buffer.isBuffer(args)) {\n        cid = new CID(args);\n        args = cid.toBaseEncodedString();\n      } else if (typeof args === 'string') {\n        cid = new CID(args);\n      } else {\n        return callback(new Error('invalid argument'));\n      }\n    } catch (err) {\n      return callback(err);\n    }\n\n    // Transform the response from Buffer or a Stream to a Block\n    const transform = (res, callback) => {\n      if (Buffer.isBuffer(res)) {\n        callback(null, new Block(res, cid));\n        // For empty blocks, concat-stream can't infer the encoding so we are\n        // passed back an empty array\n      } else if (Array.isArray(res) && res.length === 0) {\n        callback(null, new Block(Buffer.alloc(0), cid));\n      } else {\n        streamToValue(res, (err, data) => {\n          if (err) {\n            return callback(err);\n          }\n          // For empty blocks, concat-stream can't infer the encoding so we are\n          // passed back an empty array\n          if (!data.length) data = Buffer.alloc(0);\n          callback(null, new Block(data, cid));\n        });\n      }\n    };\n    const request = {\n      path: 'block/get',\n      args: args,\n      qs: opts\n    };\n    send.andTransform(request, transform, callback);\n  });\n};","map":{"version":3,"names":["promisify","require","Block","CID","streamToValue","module","exports","send","args","opts","callback","cid","isCID","toBaseEncodedString","Buffer","isBuffer","Error","err","transform","res","Array","isArray","length","alloc","data","request","path","qs","andTransform"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/block/get.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst Block = require('ipfs-block')\nconst CID = require('cids')\nconst streamToValue = require('../utils/stream-to-value')\n\nmodule.exports = (send) => {\n  return promisify((args, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    // TODO this needs to be adjusted with the new go-ipfs http-api\n    let cid\n    try {\n      if (CID.isCID(args)) {\n        cid = args\n        args = cid.toBaseEncodedString()\n      } else if (Buffer.isBuffer(args)) {\n        cid = new CID(args)\n        args = cid.toBaseEncodedString()\n      } else if (typeof args === 'string') {\n        cid = new CID(args)\n      } else {\n        return callback(new Error('invalid argument'))\n      }\n    } catch (err) {\n      return callback(err)\n    }\n\n    // Transform the response from Buffer or a Stream to a Block\n    const transform = (res, callback) => {\n      if (Buffer.isBuffer(res)) {\n        callback(null, new Block(res, cid))\n      // For empty blocks, concat-stream can't infer the encoding so we are\n      // passed back an empty array\n      } else if (Array.isArray(res) && res.length === 0) {\n        callback(null, new Block(Buffer.alloc(0), cid))\n      } else {\n        streamToValue(res, (err, data) => {\n          if (err) {\n            return callback(err)\n          }\n          // For empty blocks, concat-stream can't infer the encoding so we are\n          // passed back an empty array\n          if (!data.length) data = Buffer.alloc(0)\n          callback(null, new Block(data, cid))\n        })\n      }\n    }\n\n    const request = {\n      path: 'block/get',\n      args: args,\n      qs: opts\n    }\n\n    send.andTransform(request, transform, callback)\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAY,CAAC;AACnC,MAAME,GAAG,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMG,aAAa,GAAGH,OAAO,CAAC,0BAA0B,CAAC;AAEzDI,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAOP,SAAS,CAAC,CAACQ,IAAI,EAAEC,IAAI,EAAEC,QAAQ,KAAK;IACzC,IAAI,OAAOD,IAAI,KAAK,UAAU,EAAE;MAC9BC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;;IAEA;IACA,IAAIE,GAAG;IACP,IAAI;MACF,IAAIR,GAAG,CAACS,KAAK,CAACJ,IAAI,CAAC,EAAE;QACnBG,GAAG,GAAGH,IAAI;QACVA,IAAI,GAAGG,GAAG,CAACE,mBAAmB,CAAC,CAAC;MAClC,CAAC,MAAM,IAAIC,MAAM,CAACC,QAAQ,CAACP,IAAI,CAAC,EAAE;QAChCG,GAAG,GAAG,IAAIR,GAAG,CAACK,IAAI,CAAC;QACnBA,IAAI,GAAGG,GAAG,CAACE,mBAAmB,CAAC,CAAC;MAClC,CAAC,MAAM,IAAI,OAAOL,IAAI,KAAK,QAAQ,EAAE;QACnCG,GAAG,GAAG,IAAIR,GAAG,CAACK,IAAI,CAAC;MACrB,CAAC,MAAM;QACL,OAAOE,QAAQ,CAAC,IAAIM,KAAK,CAAC,kBAAkB,CAAC,CAAC;MAChD;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,OAAOP,QAAQ,CAACO,GAAG,CAAC;IACtB;;IAEA;IACA,MAAMC,SAAS,GAAGA,CAACC,GAAG,EAAET,QAAQ,KAAK;MACnC,IAAII,MAAM,CAACC,QAAQ,CAACI,GAAG,CAAC,EAAE;QACxBT,QAAQ,CAAC,IAAI,EAAE,IAAIR,KAAK,CAACiB,GAAG,EAAER,GAAG,CAAC,CAAC;QACrC;QACA;MACA,CAAC,MAAM,IAAIS,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,IAAIA,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;QACjDZ,QAAQ,CAAC,IAAI,EAAE,IAAIR,KAAK,CAACY,MAAM,CAACS,KAAK,CAAC,CAAC,CAAC,EAAEZ,GAAG,CAAC,CAAC;MACjD,CAAC,MAAM;QACLP,aAAa,CAACe,GAAG,EAAE,CAACF,GAAG,EAAEO,IAAI,KAAK;UAChC,IAAIP,GAAG,EAAE;YACP,OAAOP,QAAQ,CAACO,GAAG,CAAC;UACtB;UACA;UACA;UACA,IAAI,CAACO,IAAI,CAACF,MAAM,EAAEE,IAAI,GAAGV,MAAM,CAACS,KAAK,CAAC,CAAC,CAAC;UACxCb,QAAQ,CAAC,IAAI,EAAE,IAAIR,KAAK,CAACsB,IAAI,EAAEb,GAAG,CAAC,CAAC;QACtC,CAAC,CAAC;MACJ;IACF,CAAC;IAED,MAAMc,OAAO,GAAG;MACdC,IAAI,EAAE,WAAW;MACjBlB,IAAI,EAAEA,IAAI;MACVmB,EAAE,EAAElB;IACN,CAAC;IAEDF,IAAI,CAACqB,YAAY,CAACH,OAAO,EAAEP,SAAS,EAAER,QAAQ,CAAC;EACjD,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}