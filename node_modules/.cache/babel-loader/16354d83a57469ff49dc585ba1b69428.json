{"ast":null,"code":"'use strict';\n\nconst crypto = self.crypto || self.msCrypto;\nconst {\n  Buffer\n} = require('buffer');\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nconst MAX_BYTES = 65536;\nfunction oldBrowser() {\n  throw new Error('Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11');\n}\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes;\n} else {\n  module.exports = oldBrowser;\n}\nfunction randomBytes(size) {\n  const bytes = new Uint8Array(size);\n  let generated = 0;\n  if (size > 0) {\n    // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) {\n      while (generated < size) {\n        if (generated + MAX_BYTES > size) {\n          crypto.getRandomValues(bytes.subarray(generated, generated + (size - generated)));\n          generated += size - generated;\n        } else {\n          crypto.getRandomValues(bytes.subarray(generated, generated + MAX_BYTES));\n          generated += MAX_BYTES;\n        }\n      }\n    } else {\n      crypto.getRandomValues(bytes);\n    }\n  }\n  return Buffer.from(bytes);\n}","map":{"version":3,"names":["crypto","self","msCrypto","Buffer","require","MAX_BYTES","oldBrowser","Error","getRandomValues","module","exports","randomBytes","size","bytes","Uint8Array","generated","subarray","from"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/iso-random-stream/src/random.browser.js"],"sourcesContent":["'use strict';\n\nconst crypto = self.crypto || self.msCrypto;\nconst { Buffer } = require('buffer');\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nconst MAX_BYTES = 65536;\n\nfunction oldBrowser() {\n    throw new Error(\n        'Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11'\n    );\n}\n\nif (crypto && crypto.getRandomValues) {\n    module.exports = randomBytes;\n} else {\n    module.exports = oldBrowser;\n}\n\nfunction randomBytes(size) {\n    const bytes = new Uint8Array(size);\n    let generated = 0;\n\n    if (size > 0) {\n        // getRandomValues fails on IE if size == 0\n        if (size > MAX_BYTES) {\n            while (generated < size) {\n                if (generated + MAX_BYTES > size) {\n                    crypto.getRandomValues(\n                        bytes.subarray(generated, generated + (size - generated))\n                    );\n                    generated += size - generated;\n                } else {\n                    crypto.getRandomValues(\n                        bytes.subarray(generated, generated + MAX_BYTES)\n                    );\n                    generated += MAX_BYTES;\n                }\n            }\n        } else {\n            crypto.getRandomValues(bytes);\n        }\n    }\n\n    return Buffer.from(bytes);\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,IAAI,CAACD,MAAM,IAAIC,IAAI,CAACC,QAAQ;AAC3C,MAAM;EAAEC;AAAO,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEpC;AACA;AACA,MAAMC,SAAS,GAAG,KAAK;AAEvB,SAASC,UAAUA,CAAA,EAAG;EAClB,MAAM,IAAIC,KAAK,CACX,gHACJ,CAAC;AACL;AAEA,IAAIP,MAAM,IAAIA,MAAM,CAACQ,eAAe,EAAE;EAClCC,MAAM,CAACC,OAAO,GAAGC,WAAW;AAChC,CAAC,MAAM;EACHF,MAAM,CAACC,OAAO,GAAGJ,UAAU;AAC/B;AAEA,SAASK,WAAWA,CAACC,IAAI,EAAE;EACvB,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACF,IAAI,CAAC;EAClC,IAAIG,SAAS,GAAG,CAAC;EAEjB,IAAIH,IAAI,GAAG,CAAC,EAAE;IACV;IACA,IAAIA,IAAI,GAAGP,SAAS,EAAE;MAClB,OAAOU,SAAS,GAAGH,IAAI,EAAE;QACrB,IAAIG,SAAS,GAAGV,SAAS,GAAGO,IAAI,EAAE;UAC9BZ,MAAM,CAACQ,eAAe,CAClBK,KAAK,CAACG,QAAQ,CAACD,SAAS,EAAEA,SAAS,IAAIH,IAAI,GAAGG,SAAS,CAAC,CAC5D,CAAC;UACDA,SAAS,IAAIH,IAAI,GAAGG,SAAS;QACjC,CAAC,MAAM;UACHf,MAAM,CAACQ,eAAe,CAClBK,KAAK,CAACG,QAAQ,CAACD,SAAS,EAAEA,SAAS,GAAGV,SAAS,CACnD,CAAC;UACDU,SAAS,IAAIV,SAAS;QAC1B;MACJ;IACJ,CAAC,MAAM;MACHL,MAAM,CAACQ,eAAe,CAACK,KAAK,CAAC;IACjC;EACJ;EAEA,OAAOV,MAAM,CAACc,IAAI,CAACJ,KAAK,CAAC;AAC7B"},"metadata":{},"sourceType":"script"}