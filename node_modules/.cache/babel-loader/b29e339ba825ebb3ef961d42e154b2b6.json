{"ast":null,"code":"'use strict';\n\nconst {\n  ensureMultiaddr\n} = require('./utils');\nconst uniqBy = require('unique-by');\n\n// Because JavaScript doesn't let you overload the compare in Set()..\nclass MultiaddrSet {\n  constructor(multiaddrs) {\n    this._multiaddrs = multiaddrs || [];\n    this._observedMultiaddrs = [];\n  }\n  add(ma) {\n    ma = ensureMultiaddr(ma);\n    if (!this.has(ma)) {\n      this._multiaddrs.push(ma);\n    }\n  }\n\n  // addSafe - prevent multiaddr explosion™\n  // Multiaddr explosion is when you dial to a bunch of nodes and every node\n  // gives you a different observed address and you start storing them all to\n  // share with other peers. This seems like a good idea until you realize that\n  // most of those addresses are unique to the subnet that peer is in and so,\n  // they are completely worthless for all the other peers. This method is\n  // exclusively used by identify.\n  addSafe(ma) {\n    ma = ensureMultiaddr(ma);\n    const check = this._observedMultiaddrs.some((m, i) => {\n      if (m.equals(ma)) {\n        this.add(ma);\n        this._observedMultiaddrs.splice(i, 1);\n        return true;\n      }\n    });\n    if (!check) {\n      this._observedMultiaddrs.push(ma);\n    }\n  }\n  toArray() {\n    return this._multiaddrs.slice();\n  }\n  get size() {\n    return this._multiaddrs.length;\n  }\n  forEach(fn) {\n    return this._multiaddrs.forEach(fn);\n  }\n  filterBy(maFmt) {\n    if (typeof maFmt !== 'object' || typeof maFmt.matches !== 'function' || typeof maFmt.partialMatch !== 'function' || typeof maFmt.toString !== 'function') return [];\n    return this._multiaddrs.filter(ma => maFmt.matches(ma));\n  }\n  has(ma) {\n    ma = ensureMultiaddr(ma);\n    return this._multiaddrs.some(m => m.equals(ma));\n  }\n  delete(ma) {\n    ma = ensureMultiaddr(ma);\n    this._multiaddrs.some((m, i) => {\n      if (m.equals(ma)) {\n        this._multiaddrs.splice(i, 1);\n        return true;\n      }\n    });\n  }\n\n  // replaces selected existing multiaddrs with new ones\n  replace(existing, fresh) {\n    if (!Array.isArray(existing)) {\n      existing = [existing];\n    }\n    if (!Array.isArray(fresh)) {\n      fresh = [fresh];\n    }\n    existing.forEach(m => this.delete(m));\n    fresh.forEach(m => this.add(m));\n  }\n  clear() {\n    this._multiaddrs = [];\n  }\n\n  // this only really helps make ip6 and ip4 multiaddrs distinct if they are\n  // different\n  // TODO this is not an ideal solution, probably this code should just be\n  // in libp2p-tcp\n  distinct() {\n    return uniqBy(this._multiaddrs, ma => {\n      return [ma.toOptions().port, ma.toOptions().transport].join();\n    });\n  }\n}\nmodule.exports = MultiaddrSet;","map":{"version":3,"names":["ensureMultiaddr","require","uniqBy","MultiaddrSet","constructor","multiaddrs","_multiaddrs","_observedMultiaddrs","add","ma","has","push","addSafe","check","some","m","i","equals","splice","toArray","slice","size","length","forEach","fn","filterBy","maFmt","matches","partialMatch","toString","filter","delete","replace","existing","fresh","Array","isArray","clear","distinct","toOptions","port","transport","join","module","exports"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/peer-info/src/multiaddr-set.js"],"sourcesContent":["'use strict'\n\nconst { ensureMultiaddr } = require('./utils')\nconst uniqBy = require('unique-by')\n\n// Because JavaScript doesn't let you overload the compare in Set()..\nclass MultiaddrSet {\n  constructor (multiaddrs) {\n    this._multiaddrs = multiaddrs || []\n    this._observedMultiaddrs = []\n  }\n\n  add (ma) {\n    ma = ensureMultiaddr(ma)\n\n    if (!this.has(ma)) {\n      this._multiaddrs.push(ma)\n    }\n  }\n\n  // addSafe - prevent multiaddr explosion™\n  // Multiaddr explosion is when you dial to a bunch of nodes and every node\n  // gives you a different observed address and you start storing them all to\n  // share with other peers. This seems like a good idea until you realize that\n  // most of those addresses are unique to the subnet that peer is in and so,\n  // they are completely worthless for all the other peers. This method is\n  // exclusively used by identify.\n  addSafe (ma) {\n    ma = ensureMultiaddr(ma)\n\n    const check = this._observedMultiaddrs.some((m, i) => {\n      if (m.equals(ma)) {\n        this.add(ma)\n        this._observedMultiaddrs.splice(i, 1)\n        return true\n      }\n    })\n    if (!check) {\n      this._observedMultiaddrs.push(ma)\n    }\n  }\n\n  toArray () {\n    return this._multiaddrs.slice()\n  }\n\n  get size () {\n    return this._multiaddrs.length\n  }\n\n  forEach (fn) {\n    return this._multiaddrs.forEach(fn)\n  }\n\n  filterBy (maFmt) {\n    if (typeof maFmt !== 'object' ||\n      typeof maFmt.matches !== 'function' ||\n      typeof maFmt.partialMatch !== 'function' ||\n      typeof maFmt.toString !== 'function') return []\n\n    return this._multiaddrs.filter((ma) => maFmt.matches(ma))\n  }\n\n  has (ma) {\n    ma = ensureMultiaddr(ma)\n    return this._multiaddrs.some((m) => m.equals(ma))\n  }\n\n  delete (ma) {\n    ma = ensureMultiaddr(ma)\n\n    this._multiaddrs.some((m, i) => {\n      if (m.equals(ma)) {\n        this._multiaddrs.splice(i, 1)\n        return true\n      }\n    })\n  }\n\n  // replaces selected existing multiaddrs with new ones\n  replace (existing, fresh) {\n    if (!Array.isArray(existing)) {\n      existing = [existing]\n    }\n    if (!Array.isArray(fresh)) {\n      fresh = [fresh]\n    }\n    existing.forEach((m) => this.delete(m))\n    fresh.forEach((m) => this.add(m))\n  }\n\n  clear () {\n    this._multiaddrs = []\n  }\n\n  // this only really helps make ip6 and ip4 multiaddrs distinct if they are\n  // different\n  // TODO this is not an ideal solution, probably this code should just be\n  // in libp2p-tcp\n  distinct () {\n    return uniqBy(this._multiaddrs, (ma) => {\n      return [ma.toOptions().port, ma.toOptions().transport].join()\n    })\n  }\n}\n\nmodule.exports = MultiaddrSet\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAgB,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC9C,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAW,CAAC;;AAEnC;AACA,MAAME,YAAY,CAAC;EACjBC,WAAWA,CAAEC,UAAU,EAAE;IACvB,IAAI,CAACC,WAAW,GAAGD,UAAU,IAAI,EAAE;IACnC,IAAI,CAACE,mBAAmB,GAAG,EAAE;EAC/B;EAEAC,GAAGA,CAAEC,EAAE,EAAE;IACPA,EAAE,GAAGT,eAAe,CAACS,EAAE,CAAC;IAExB,IAAI,CAAC,IAAI,CAACC,GAAG,CAACD,EAAE,CAAC,EAAE;MACjB,IAAI,CAACH,WAAW,CAACK,IAAI,CAACF,EAAE,CAAC;IAC3B;EACF;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACAG,OAAOA,CAAEH,EAAE,EAAE;IACXA,EAAE,GAAGT,eAAe,CAACS,EAAE,CAAC;IAExB,MAAMI,KAAK,GAAG,IAAI,CAACN,mBAAmB,CAACO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACpD,IAAID,CAAC,CAACE,MAAM,CAACR,EAAE,CAAC,EAAE;QAChB,IAAI,CAACD,GAAG,CAACC,EAAE,CAAC;QACZ,IAAI,CAACF,mBAAmB,CAACW,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC;QACrC,OAAO,IAAI;MACb;IACF,CAAC,CAAC;IACF,IAAI,CAACH,KAAK,EAAE;MACV,IAAI,CAACN,mBAAmB,CAACI,IAAI,CAACF,EAAE,CAAC;IACnC;EACF;EAEAU,OAAOA,CAAA,EAAI;IACT,OAAO,IAAI,CAACb,WAAW,CAACc,KAAK,CAAC,CAAC;EACjC;EAEA,IAAIC,IAAIA,CAAA,EAAI;IACV,OAAO,IAAI,CAACf,WAAW,CAACgB,MAAM;EAChC;EAEAC,OAAOA,CAAEC,EAAE,EAAE;IACX,OAAO,IAAI,CAAClB,WAAW,CAACiB,OAAO,CAACC,EAAE,CAAC;EACrC;EAEAC,QAAQA,CAAEC,KAAK,EAAE;IACf,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAC3B,OAAOA,KAAK,CAACC,OAAO,KAAK,UAAU,IACnC,OAAOD,KAAK,CAACE,YAAY,KAAK,UAAU,IACxC,OAAOF,KAAK,CAACG,QAAQ,KAAK,UAAU,EAAE,OAAO,EAAE;IAEjD,OAAO,IAAI,CAACvB,WAAW,CAACwB,MAAM,CAAErB,EAAE,IAAKiB,KAAK,CAACC,OAAO,CAAClB,EAAE,CAAC,CAAC;EAC3D;EAEAC,GAAGA,CAAED,EAAE,EAAE;IACPA,EAAE,GAAGT,eAAe,CAACS,EAAE,CAAC;IACxB,OAAO,IAAI,CAACH,WAAW,CAACQ,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACE,MAAM,CAACR,EAAE,CAAC,CAAC;EACnD;EAEAsB,MAAMA,CAAEtB,EAAE,EAAE;IACVA,EAAE,GAAGT,eAAe,CAACS,EAAE,CAAC;IAExB,IAAI,CAACH,WAAW,CAACQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC9B,IAAID,CAAC,CAACE,MAAM,CAACR,EAAE,CAAC,EAAE;QAChB,IAAI,CAACH,WAAW,CAACY,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC;QAC7B,OAAO,IAAI;MACb;IACF,CAAC,CAAC;EACJ;;EAEA;EACAgB,OAAOA,CAAEC,QAAQ,EAAEC,KAAK,EAAE;IACxB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;MAC5BA,QAAQ,GAAG,CAACA,QAAQ,CAAC;IACvB;IACA,IAAI,CAACE,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;MACzBA,KAAK,GAAG,CAACA,KAAK,CAAC;IACjB;IACAD,QAAQ,CAACV,OAAO,CAAER,CAAC,IAAK,IAAI,CAACgB,MAAM,CAAChB,CAAC,CAAC,CAAC;IACvCmB,KAAK,CAACX,OAAO,CAAER,CAAC,IAAK,IAAI,CAACP,GAAG,CAACO,CAAC,CAAC,CAAC;EACnC;EAEAsB,KAAKA,CAAA,EAAI;IACP,IAAI,CAAC/B,WAAW,GAAG,EAAE;EACvB;;EAEA;EACA;EACA;EACA;EACAgC,QAAQA,CAAA,EAAI;IACV,OAAOpC,MAAM,CAAC,IAAI,CAACI,WAAW,EAAGG,EAAE,IAAK;MACtC,OAAO,CAACA,EAAE,CAAC8B,SAAS,CAAC,CAAC,CAACC,IAAI,EAAE/B,EAAE,CAAC8B,SAAS,CAAC,CAAC,CAACE,SAAS,CAAC,CAACC,IAAI,CAAC,CAAC;IAC/D,CAAC,CAAC;EACJ;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGzC,YAAY"},"metadata":{},"sourceType":"script"}