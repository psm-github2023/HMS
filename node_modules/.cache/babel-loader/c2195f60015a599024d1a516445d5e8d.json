{"ast":null,"code":"'use strict';\n\nvar DuplexStream = require('readable-stream').Duplex,\n  util = require('util');\nfunction BufferList(callback) {\n  if (!(this instanceof BufferList)) return new BufferList(callback);\n  this._bufs = [];\n  this.length = 0;\n  if (typeof callback == 'function') {\n    this._callback = callback;\n    var piper = function piper(err) {\n      if (this._callback) {\n        this._callback(err);\n        this._callback = null;\n      }\n    }.bind(this);\n    this.on('pipe', function onPipe(src) {\n      src.on('error', piper);\n    });\n    this.on('unpipe', function onUnpipe(src) {\n      src.removeListener('error', piper);\n    });\n  } else {\n    this.append(callback);\n  }\n  DuplexStream.call(this);\n}\nutil.inherits(BufferList, DuplexStream);\nBufferList.prototype._offset = function _offset(offset) {\n  var tot = 0,\n    i = 0,\n    _t;\n  if (offset === 0) return [0, 0];\n  for (; i < this._bufs.length; i++) {\n    _t = tot + this._bufs[i].length;\n    if (offset < _t || i == this._bufs.length - 1) {\n      return [i, offset - tot];\n    }\n    tot = _t;\n  }\n};\nBufferList.prototype._reverseOffset = function (blOffset) {\n  var bufferId = blOffset[0];\n  var offset = blOffset[1];\n  for (var i = 0; i < bufferId; i++) {\n    offset += this._bufs[i].length;\n  }\n  return offset;\n};\nBufferList.prototype.append = function append(buf) {\n  var i = 0;\n  if (Buffer.isBuffer(buf)) {\n    this._appendBuffer(buf);\n  } else if (Array.isArray(buf)) {\n    for (; i < buf.length; i++) this.append(buf[i]);\n  } else if (buf instanceof BufferList) {\n    // unwrap argument into individual BufferLists\n    for (; i < buf._bufs.length; i++) this.append(buf._bufs[i]);\n  } else if (buf != null) {\n    // coerce number arguments to strings, since Buffer(number) does\n    // uninitialized memory allocation\n    if (typeof buf == 'number') buf = buf.toString();\n    this._appendBuffer(Buffer.from(buf));\n  }\n  return this;\n};\nBufferList.prototype._appendBuffer = function appendBuffer(buf) {\n  this._bufs.push(buf);\n  this.length += buf.length;\n};\nBufferList.prototype._write = function _write(buf, encoding, callback) {\n  this._appendBuffer(buf);\n  if (typeof callback == 'function') callback();\n};\nBufferList.prototype._read = function _read(size) {\n  if (!this.length) return this.push(null);\n  size = Math.min(size, this.length);\n  this.push(this.slice(0, size));\n  this.consume(size);\n};\nBufferList.prototype.end = function end(chunk) {\n  DuplexStream.prototype.end.call(this, chunk);\n  if (this._callback) {\n    this._callback(null, this.slice());\n    this._callback = null;\n  }\n};\nBufferList.prototype.get = function get(index) {\n  if (index > this.length || index < 0) {\n    return undefined;\n  }\n  var offset = this._offset(index);\n  return this._bufs[offset[0]][offset[1]];\n};\nBufferList.prototype.slice = function slice(start, end) {\n  if (typeof start == 'number' && start < 0) start += this.length;\n  if (typeof end == 'number' && end < 0) end += this.length;\n  return this.copy(null, 0, start, end);\n};\nBufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {\n  if (typeof srcStart != 'number' || srcStart < 0) srcStart = 0;\n  if (typeof srcEnd != 'number' || srcEnd > this.length) srcEnd = this.length;\n  if (srcStart >= this.length) return dst || Buffer.alloc(0);\n  if (srcEnd <= 0) return dst || Buffer.alloc(0);\n  var copy = !!dst,\n    off = this._offset(srcStart),\n    len = srcEnd - srcStart,\n    bytes = len,\n    bufoff = copy && dstStart || 0,\n    start = off[1],\n    l,\n    i;\n\n  // copy/slice everything\n  if (srcStart === 0 && srcEnd == this.length) {\n    if (!copy) {\n      // slice, but full concat if multiple buffers\n      return this._bufs.length === 1 ? this._bufs[0] : Buffer.concat(this._bufs, this.length);\n    }\n\n    // copy, need to copy individual buffers\n    for (i = 0; i < this._bufs.length; i++) {\n      this._bufs[i].copy(dst, bufoff);\n      bufoff += this._bufs[i].length;\n    }\n    return dst;\n  }\n\n  // easy, cheap case where it's a subset of one of the buffers\n  if (bytes <= this._bufs[off[0]].length - start) {\n    return copy ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) : this._bufs[off[0]].slice(start, start + bytes);\n  }\n  if (!copy)\n    // a slice, we need something to copy in to\n    dst = Buffer.allocUnsafe(len);\n  for (i = off[0]; i < this._bufs.length; i++) {\n    l = this._bufs[i].length - start;\n    if (bytes > l) {\n      this._bufs[i].copy(dst, bufoff, start);\n      bufoff += l;\n    } else {\n      this._bufs[i].copy(dst, bufoff, start, start + bytes);\n      bufoff += l;\n      break;\n    }\n    bytes -= l;\n    if (start) start = 0;\n  }\n\n  // safeguard so that we don't return uninitialized memory\n  if (dst.length > bufoff) return dst.slice(0, bufoff);\n  return dst;\n};\nBufferList.prototype.shallowSlice = function shallowSlice(start, end) {\n  start = start || 0;\n  end = typeof end !== 'number' ? this.length : end;\n  if (start < 0) start += this.length;\n  if (end < 0) end += this.length;\n  if (start === end) {\n    return new BufferList();\n  }\n  var startOffset = this._offset(start),\n    endOffset = this._offset(end),\n    buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);\n  if (endOffset[1] == 0) buffers.pop();else buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);\n  if (startOffset[1] != 0) buffers[0] = buffers[0].slice(startOffset[1]);\n  return new BufferList(buffers);\n};\nBufferList.prototype.toString = function toString(encoding, start, end) {\n  return this.slice(start, end).toString(encoding);\n};\nBufferList.prototype.consume = function consume(bytes) {\n  // first, normalize the argument, in accordance with how Buffer does it\n  bytes = Math.trunc(bytes);\n  // do nothing if not a positive number\n  if (Number.isNaN(bytes) || bytes <= 0) return this;\n  while (this._bufs.length) {\n    if (bytes >= this._bufs[0].length) {\n      bytes -= this._bufs[0].length;\n      this.length -= this._bufs[0].length;\n      this._bufs.shift();\n    } else {\n      this._bufs[0] = this._bufs[0].slice(bytes);\n      this.length -= bytes;\n      break;\n    }\n  }\n  return this;\n};\nBufferList.prototype.duplicate = function duplicate() {\n  var i = 0,\n    copy = new BufferList();\n  for (; i < this._bufs.length; i++) copy.append(this._bufs[i]);\n  return copy;\n};\nBufferList.prototype._destroy = function _destroy(err, cb) {\n  this._bufs.length = 0;\n  this.length = 0;\n  cb(err);\n};\nBufferList.prototype.indexOf = function (search, offset, encoding) {\n  if (encoding === undefined && typeof offset === 'string') {\n    encoding = offset;\n    offset = undefined;\n  }\n  if (typeof search === 'function' || Array.isArray(search)) {\n    throw new TypeError('The \"value\" argument must be one of type string, Buffer, BufferList, or Uint8Array.');\n  } else if (typeof search === 'number') {\n    search = Buffer.from([search]);\n  } else if (typeof search === 'string') {\n    search = Buffer.from(search, encoding);\n  } else if (search instanceof BufferList) {\n    search = search.slice();\n  } else if (!Buffer.isBuffer(search)) {\n    search = Buffer.from(search);\n  }\n  offset = Number(offset || 0);\n  if (isNaN(offset)) {\n    offset = 0;\n  }\n  if (offset < 0) {\n    offset = this.length + offset;\n  }\n  if (offset < 0) {\n    offset = 0;\n  }\n  if (search.length === 0) {\n    return offset > this.length ? this.length : offset;\n  }\n  var blOffset = this._offset(offset);\n  var blIndex = blOffset[0]; // index of which internal buffer we're working on\n  var buffOffset = blOffset[1]; // offset of the internal buffer we're working on\n\n  // scan over each buffer\n  for (blIndex; blIndex < this._bufs.length; blIndex++) {\n    var buff = this._bufs[blIndex];\n    while (buffOffset < buff.length) {\n      var availableWindow = buff.length - buffOffset;\n      if (availableWindow >= search.length) {\n        var nativeSearchResult = buff.indexOf(search, buffOffset);\n        if (nativeSearchResult !== -1) {\n          return this._reverseOffset([blIndex, nativeSearchResult]);\n        }\n        buffOffset = buff.length - search.length + 1; // end of native search window\n      } else {\n        var revOffset = this._reverseOffset([blIndex, buffOffset]);\n        if (this._match(revOffset, search)) {\n          return revOffset;\n        }\n        buffOffset++;\n      }\n    }\n    buffOffset = 0;\n  }\n  return -1;\n};\nBufferList.prototype._match = function (offset, search) {\n  if (this.length - offset < search.length) {\n    return false;\n  }\n  for (var searchOffset = 0; searchOffset < search.length; searchOffset++) {\n    if (this.get(offset + searchOffset) !== search[searchOffset]) {\n      return false;\n    }\n  }\n  return true;\n};\n(function () {\n  var methods = {\n    'readDoubleBE': 8,\n    'readDoubleLE': 8,\n    'readFloatBE': 4,\n    'readFloatLE': 4,\n    'readInt32BE': 4,\n    'readInt32LE': 4,\n    'readUInt32BE': 4,\n    'readUInt32LE': 4,\n    'readInt16BE': 2,\n    'readInt16LE': 2,\n    'readUInt16BE': 2,\n    'readUInt16LE': 2,\n    'readInt8': 1,\n    'readUInt8': 1,\n    'readIntBE': null,\n    'readIntLE': null,\n    'readUIntBE': null,\n    'readUIntLE': null\n  };\n  for (var m in methods) {\n    (function (m) {\n      if (methods[m] === null) {\n        BufferList.prototype[m] = function (offset, byteLength) {\n          return this.slice(offset, offset + byteLength)[m](0, byteLength);\n        };\n      } else {\n        BufferList.prototype[m] = function (offset) {\n          return this.slice(offset, offset + methods[m])[m](0);\n        };\n      }\n    })(m);\n  }\n})();\nmodule.exports = BufferList;","map":{"version":3,"names":["DuplexStream","require","Duplex","util","BufferList","callback","_bufs","length","_callback","piper","err","bind","on","onPipe","src","onUnpipe","removeListener","append","call","inherits","prototype","_offset","offset","tot","i","_t","_reverseOffset","blOffset","bufferId","buf","Buffer","isBuffer","_appendBuffer","Array","isArray","toString","from","appendBuffer","push","_write","encoding","_read","size","Math","min","slice","consume","end","chunk","get","index","undefined","start","copy","dst","dstStart","srcStart","srcEnd","alloc","off","len","bytes","bufoff","l","concat","allocUnsafe","shallowSlice","startOffset","endOffset","buffers","pop","trunc","Number","isNaN","shift","duplicate","_destroy","cb","indexOf","search","TypeError","blIndex","buffOffset","buff","availableWindow","nativeSearchResult","revOffset","_match","searchOffset","methods","m","byteLength","module","exports"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/bl/bl.js"],"sourcesContent":["'use strict'\nvar DuplexStream = require('readable-stream').Duplex\n  , util         = require('util')\n\nfunction BufferList (callback) {\n  if (!(this instanceof BufferList))\n    return new BufferList(callback)\n\n  this._bufs  = []\n  this.length = 0\n\n  if (typeof callback == 'function') {\n    this._callback = callback\n\n    var piper = function piper (err) {\n      if (this._callback) {\n        this._callback(err)\n        this._callback = null\n      }\n    }.bind(this)\n\n    this.on('pipe', function onPipe (src) {\n      src.on('error', piper)\n    })\n    this.on('unpipe', function onUnpipe (src) {\n      src.removeListener('error', piper)\n    })\n  } else {\n    this.append(callback)\n  }\n\n  DuplexStream.call(this)\n}\n\n\nutil.inherits(BufferList, DuplexStream)\n\n\nBufferList.prototype._offset = function _offset (offset) {\n  var tot = 0, i = 0, _t\n  if (offset === 0) return [ 0, 0 ]\n  for (; i < this._bufs.length; i++) {\n    _t = tot + this._bufs[i].length\n    if (offset < _t || i == this._bufs.length - 1) {\n      return [ i, offset - tot ]\n    }\n    tot = _t\n  }\n}\n\nBufferList.prototype._reverseOffset = function (blOffset) {\n  var bufferId = blOffset[0]\n  var offset = blOffset[1]\n  for (var i = 0; i < bufferId; i++) {\n    offset += this._bufs[i].length\n  }\n  return offset\n}\n\nBufferList.prototype.append = function append (buf) {\n  var i = 0\n\n  if (Buffer.isBuffer(buf)) {\n    this._appendBuffer(buf)\n  } else if (Array.isArray(buf)) {\n    for (; i < buf.length; i++)\n      this.append(buf[i])\n  } else if (buf instanceof BufferList) {\n    // unwrap argument into individual BufferLists\n    for (; i < buf._bufs.length; i++)\n      this.append(buf._bufs[i])\n  } else if (buf != null) {\n    // coerce number arguments to strings, since Buffer(number) does\n    // uninitialized memory allocation\n    if (typeof buf == 'number')\n      buf = buf.toString()\n\n    this._appendBuffer(Buffer.from(buf))\n  }\n\n  return this\n}\n\n\nBufferList.prototype._appendBuffer = function appendBuffer (buf) {\n  this._bufs.push(buf)\n  this.length += buf.length\n}\n\n\nBufferList.prototype._write = function _write (buf, encoding, callback) {\n  this._appendBuffer(buf)\n\n  if (typeof callback == 'function')\n    callback()\n}\n\n\nBufferList.prototype._read = function _read (size) {\n  if (!this.length)\n    return this.push(null)\n\n  size = Math.min(size, this.length)\n  this.push(this.slice(0, size))\n  this.consume(size)\n}\n\n\nBufferList.prototype.end = function end (chunk) {\n  DuplexStream.prototype.end.call(this, chunk)\n\n  if (this._callback) {\n    this._callback(null, this.slice())\n    this._callback = null\n  }\n}\n\n\nBufferList.prototype.get = function get (index) {\n  if (index > this.length || index < 0) {\n    return undefined\n  }\n  var offset = this._offset(index)\n  return this._bufs[offset[0]][offset[1]]\n}\n\n\nBufferList.prototype.slice = function slice (start, end) {\n  if (typeof start == 'number' && start < 0)\n    start += this.length\n  if (typeof end == 'number' && end < 0)\n    end += this.length\n  return this.copy(null, 0, start, end)\n}\n\n\nBufferList.prototype.copy = function copy (dst, dstStart, srcStart, srcEnd) {\n  if (typeof srcStart != 'number' || srcStart < 0)\n    srcStart = 0\n  if (typeof srcEnd != 'number' || srcEnd > this.length)\n    srcEnd = this.length\n  if (srcStart >= this.length)\n    return dst || Buffer.alloc(0)\n  if (srcEnd <= 0)\n    return dst || Buffer.alloc(0)\n\n  var copy   = !!dst\n    , off    = this._offset(srcStart)\n    , len    = srcEnd - srcStart\n    , bytes  = len\n    , bufoff = (copy && dstStart) || 0\n    , start  = off[1]\n    , l\n    , i\n\n  // copy/slice everything\n  if (srcStart === 0 && srcEnd == this.length) {\n    if (!copy) { // slice, but full concat if multiple buffers\n      return this._bufs.length === 1\n        ? this._bufs[0]\n        : Buffer.concat(this._bufs, this.length)\n    }\n\n    // copy, need to copy individual buffers\n    for (i = 0; i < this._bufs.length; i++) {\n      this._bufs[i].copy(dst, bufoff)\n      bufoff += this._bufs[i].length\n    }\n\n    return dst\n  }\n\n  // easy, cheap case where it's a subset of one of the buffers\n  if (bytes <= this._bufs[off[0]].length - start) {\n    return copy\n      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)\n      : this._bufs[off[0]].slice(start, start + bytes)\n  }\n\n  if (!copy) // a slice, we need something to copy in to\n    dst = Buffer.allocUnsafe(len)\n\n  for (i = off[0]; i < this._bufs.length; i++) {\n    l = this._bufs[i].length - start\n\n    if (bytes > l) {\n      this._bufs[i].copy(dst, bufoff, start)\n      bufoff += l\n    } else {\n      this._bufs[i].copy(dst, bufoff, start, start + bytes)\n      bufoff += l\n      break\n    }\n\n    bytes -= l\n\n    if (start)\n      start = 0\n  }\n\n  // safeguard so that we don't return uninitialized memory\n  if (dst.length > bufoff) return dst.slice(0, bufoff)\n\n  return dst\n}\n\nBufferList.prototype.shallowSlice = function shallowSlice (start, end) {\n  start = start || 0\n  end = typeof end !== 'number' ? this.length : end\n\n  if (start < 0)\n    start += this.length\n  if (end < 0)\n    end += this.length\n\n  if (start === end) {\n    return new BufferList()\n  }\n  var startOffset = this._offset(start)\n    , endOffset = this._offset(end)\n    , buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1)\n\n  if (endOffset[1] == 0)\n    buffers.pop()\n  else\n    buffers[buffers.length-1] = buffers[buffers.length-1].slice(0, endOffset[1])\n\n  if (startOffset[1] != 0)\n    buffers[0] = buffers[0].slice(startOffset[1])\n\n  return new BufferList(buffers)\n}\n\nBufferList.prototype.toString = function toString (encoding, start, end) {\n  return this.slice(start, end).toString(encoding)\n}\n\nBufferList.prototype.consume = function consume (bytes) {\n  // first, normalize the argument, in accordance with how Buffer does it\n  bytes = Math.trunc(bytes)\n  // do nothing if not a positive number\n  if (Number.isNaN(bytes) || bytes <= 0) return this\n\n  while (this._bufs.length) {\n    if (bytes >= this._bufs[0].length) {\n      bytes -= this._bufs[0].length\n      this.length -= this._bufs[0].length\n      this._bufs.shift()\n    } else {\n      this._bufs[0] = this._bufs[0].slice(bytes)\n      this.length -= bytes\n      break\n    }\n  }\n  return this\n}\n\n\nBufferList.prototype.duplicate = function duplicate () {\n  var i = 0\n    , copy = new BufferList()\n\n  for (; i < this._bufs.length; i++)\n    copy.append(this._bufs[i])\n\n  return copy\n}\n\n\nBufferList.prototype._destroy = function _destroy (err, cb) {\n  this._bufs.length = 0\n  this.length = 0\n  cb(err)\n}\n\n\nBufferList.prototype.indexOf = function (search, offset, encoding) {\n  if (encoding === undefined && typeof offset === 'string') {\n    encoding = offset\n    offset = undefined\n  }\n  if (typeof search === 'function' || Array.isArray(search)) {\n    throw new TypeError('The \"value\" argument must be one of type string, Buffer, BufferList, or Uint8Array.')\n  } else if (typeof search === 'number') {\n      search = Buffer.from([search])\n  } else if (typeof search === 'string') {\n    search = Buffer.from(search, encoding)\n  } else if (search instanceof BufferList) {\n    search = search.slice()\n  } else if (!Buffer.isBuffer(search)) {\n    search = Buffer.from(search)\n  }\n\n  offset = Number(offset || 0)\n  if (isNaN(offset)) {\n    offset = 0\n  }\n\n  if (offset < 0) {\n    offset = this.length + offset\n  }\n\n  if (offset < 0) {\n    offset = 0\n  }\n\n  if (search.length === 0) {\n    return offset > this.length ? this.length : offset\n  }\n\n  var blOffset = this._offset(offset)\n  var blIndex = blOffset[0] // index of which internal buffer we're working on\n  var buffOffset = blOffset[1] // offset of the internal buffer we're working on\n\n  // scan over each buffer\n  for (blIndex; blIndex < this._bufs.length; blIndex++) {\n    var buff = this._bufs[blIndex]\n    while(buffOffset < buff.length) {\n      var availableWindow = buff.length - buffOffset\n      if (availableWindow >= search.length) {\n        var nativeSearchResult = buff.indexOf(search, buffOffset)\n        if (nativeSearchResult !== -1) {\n          return this._reverseOffset([blIndex, nativeSearchResult])\n        }\n        buffOffset = buff.length - search.length + 1 // end of native search window\n      } else {\n        var revOffset = this._reverseOffset([blIndex, buffOffset])\n        if (this._match(revOffset, search)) {\n          return revOffset\n        }\n        buffOffset++\n      }\n    }\n    buffOffset = 0\n  }\n  return -1\n}\n\nBufferList.prototype._match = function(offset, search) {\n  if (this.length - offset < search.length) {\n    return false\n  }\n  for (var searchOffset = 0; searchOffset < search.length ; searchOffset++) {\n    if(this.get(offset + searchOffset) !== search[searchOffset]){\n      return false\n    }\n  }\n  return true\n}\n\n\n;(function () {\n  var methods = {\n      'readDoubleBE' : 8\n    , 'readDoubleLE' : 8\n    , 'readFloatBE'  : 4\n    , 'readFloatLE'  : 4\n    , 'readInt32BE'  : 4\n    , 'readInt32LE'  : 4\n    , 'readUInt32BE' : 4\n    , 'readUInt32LE' : 4\n    , 'readInt16BE'  : 2\n    , 'readInt16LE'  : 2\n    , 'readUInt16BE' : 2\n    , 'readUInt16LE' : 2\n    , 'readInt8'     : 1\n    , 'readUInt8'    : 1\n    , 'readIntBE'    : null\n    , 'readIntLE'    : null\n    , 'readUIntBE'   : null\n    , 'readUIntLE'   : null\n  }\n\n  for (var m in methods) {\n    (function (m) {\n      if (methods[m] === null) {\n        BufferList.prototype[m] = function (offset, byteLength) {\n          return this.slice(offset, offset + byteLength)[m](0, byteLength)\n        }\n      }\n      else {\n        BufferList.prototype[m] = function (offset) {\n          return this.slice(offset, offset + methods[m])[m](0)\n        }\n      }\n    }(m))\n  }\n}())\n\n\nmodule.exports = BufferList\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAiB,CAAC,CAACC,MAAM;EAChDC,IAAI,GAAWF,OAAO,CAAC,MAAM,CAAC;AAElC,SAASG,UAAUA,CAAEC,QAAQ,EAAE;EAC7B,IAAI,EAAE,IAAI,YAAYD,UAAU,CAAC,EAC/B,OAAO,IAAIA,UAAU,CAACC,QAAQ,CAAC;EAEjC,IAAI,CAACC,KAAK,GAAI,EAAE;EAChB,IAAI,CAACC,MAAM,GAAG,CAAC;EAEf,IAAI,OAAOF,QAAQ,IAAI,UAAU,EAAE;IACjC,IAAI,CAACG,SAAS,GAAGH,QAAQ;IAEzB,IAAII,KAAK,GAAG,SAASA,KAAKA,CAAEC,GAAG,EAAE;MAC/B,IAAI,IAAI,CAACF,SAAS,EAAE;QAClB,IAAI,CAACA,SAAS,CAACE,GAAG,CAAC;QACnB,IAAI,CAACF,SAAS,GAAG,IAAI;MACvB;IACF,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;IAEZ,IAAI,CAACC,EAAE,CAAC,MAAM,EAAE,SAASC,MAAMA,CAAEC,GAAG,EAAE;MACpCA,GAAG,CAACF,EAAE,CAAC,OAAO,EAAEH,KAAK,CAAC;IACxB,CAAC,CAAC;IACF,IAAI,CAACG,EAAE,CAAC,QAAQ,EAAE,SAASG,QAAQA,CAAED,GAAG,EAAE;MACxCA,GAAG,CAACE,cAAc,CAAC,OAAO,EAAEP,KAAK,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,IAAI,CAACQ,MAAM,CAACZ,QAAQ,CAAC;EACvB;EAEAL,YAAY,CAACkB,IAAI,CAAC,IAAI,CAAC;AACzB;AAGAf,IAAI,CAACgB,QAAQ,CAACf,UAAU,EAAEJ,YAAY,CAAC;AAGvCI,UAAU,CAACgB,SAAS,CAACC,OAAO,GAAG,SAASA,OAAOA,CAAEC,MAAM,EAAE;EACvD,IAAIC,GAAG,GAAG,CAAC;IAAEC,CAAC,GAAG,CAAC;IAAEC,EAAE;EACtB,IAAIH,MAAM,KAAK,CAAC,EAAE,OAAO,CAAE,CAAC,EAAE,CAAC,CAAE;EACjC,OAAOE,CAAC,GAAG,IAAI,CAAClB,KAAK,CAACC,MAAM,EAAEiB,CAAC,EAAE,EAAE;IACjCC,EAAE,GAAGF,GAAG,GAAG,IAAI,CAACjB,KAAK,CAACkB,CAAC,CAAC,CAACjB,MAAM;IAC/B,IAAIe,MAAM,GAAGG,EAAE,IAAID,CAAC,IAAI,IAAI,CAAClB,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MAC7C,OAAO,CAAEiB,CAAC,EAAEF,MAAM,GAAGC,GAAG,CAAE;IAC5B;IACAA,GAAG,GAAGE,EAAE;EACV;AACF,CAAC;AAEDrB,UAAU,CAACgB,SAAS,CAACM,cAAc,GAAG,UAAUC,QAAQ,EAAE;EACxD,IAAIC,QAAQ,GAAGD,QAAQ,CAAC,CAAC,CAAC;EAC1B,IAAIL,MAAM,GAAGK,QAAQ,CAAC,CAAC,CAAC;EACxB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,QAAQ,EAAEJ,CAAC,EAAE,EAAE;IACjCF,MAAM,IAAI,IAAI,CAAChB,KAAK,CAACkB,CAAC,CAAC,CAACjB,MAAM;EAChC;EACA,OAAOe,MAAM;AACf,CAAC;AAEDlB,UAAU,CAACgB,SAAS,CAACH,MAAM,GAAG,SAASA,MAAMA,CAAEY,GAAG,EAAE;EAClD,IAAIL,CAAC,GAAG,CAAC;EAET,IAAIM,MAAM,CAACC,QAAQ,CAACF,GAAG,CAAC,EAAE;IACxB,IAAI,CAACG,aAAa,CAACH,GAAG,CAAC;EACzB,CAAC,MAAM,IAAII,KAAK,CAACC,OAAO,CAACL,GAAG,CAAC,EAAE;IAC7B,OAAOL,CAAC,GAAGK,GAAG,CAACtB,MAAM,EAAEiB,CAAC,EAAE,EACxB,IAAI,CAACP,MAAM,CAACY,GAAG,CAACL,CAAC,CAAC,CAAC;EACvB,CAAC,MAAM,IAAIK,GAAG,YAAYzB,UAAU,EAAE;IACpC;IACA,OAAOoB,CAAC,GAAGK,GAAG,CAACvB,KAAK,CAACC,MAAM,EAAEiB,CAAC,EAAE,EAC9B,IAAI,CAACP,MAAM,CAACY,GAAG,CAACvB,KAAK,CAACkB,CAAC,CAAC,CAAC;EAC7B,CAAC,MAAM,IAAIK,GAAG,IAAI,IAAI,EAAE;IACtB;IACA;IACA,IAAI,OAAOA,GAAG,IAAI,QAAQ,EACxBA,GAAG,GAAGA,GAAG,CAACM,QAAQ,CAAC,CAAC;IAEtB,IAAI,CAACH,aAAa,CAACF,MAAM,CAACM,IAAI,CAACP,GAAG,CAAC,CAAC;EACtC;EAEA,OAAO,IAAI;AACb,CAAC;AAGDzB,UAAU,CAACgB,SAAS,CAACY,aAAa,GAAG,SAASK,YAAYA,CAAER,GAAG,EAAE;EAC/D,IAAI,CAACvB,KAAK,CAACgC,IAAI,CAACT,GAAG,CAAC;EACpB,IAAI,CAACtB,MAAM,IAAIsB,GAAG,CAACtB,MAAM;AAC3B,CAAC;AAGDH,UAAU,CAACgB,SAAS,CAACmB,MAAM,GAAG,SAASA,MAAMA,CAAEV,GAAG,EAAEW,QAAQ,EAAEnC,QAAQ,EAAE;EACtE,IAAI,CAAC2B,aAAa,CAACH,GAAG,CAAC;EAEvB,IAAI,OAAOxB,QAAQ,IAAI,UAAU,EAC/BA,QAAQ,CAAC,CAAC;AACd,CAAC;AAGDD,UAAU,CAACgB,SAAS,CAACqB,KAAK,GAAG,SAASA,KAAKA,CAAEC,IAAI,EAAE;EACjD,IAAI,CAAC,IAAI,CAACnC,MAAM,EACd,OAAO,IAAI,CAAC+B,IAAI,CAAC,IAAI,CAAC;EAExBI,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACF,IAAI,EAAE,IAAI,CAACnC,MAAM,CAAC;EAClC,IAAI,CAAC+B,IAAI,CAAC,IAAI,CAACO,KAAK,CAAC,CAAC,EAAEH,IAAI,CAAC,CAAC;EAC9B,IAAI,CAACI,OAAO,CAACJ,IAAI,CAAC;AACpB,CAAC;AAGDtC,UAAU,CAACgB,SAAS,CAAC2B,GAAG,GAAG,SAASA,GAAGA,CAAEC,KAAK,EAAE;EAC9ChD,YAAY,CAACoB,SAAS,CAAC2B,GAAG,CAAC7B,IAAI,CAAC,IAAI,EAAE8B,KAAK,CAAC;EAE5C,IAAI,IAAI,CAACxC,SAAS,EAAE;IAClB,IAAI,CAACA,SAAS,CAAC,IAAI,EAAE,IAAI,CAACqC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAI,CAACrC,SAAS,GAAG,IAAI;EACvB;AACF,CAAC;AAGDJ,UAAU,CAACgB,SAAS,CAAC6B,GAAG,GAAG,SAASA,GAAGA,CAAEC,KAAK,EAAE;EAC9C,IAAIA,KAAK,GAAG,IAAI,CAAC3C,MAAM,IAAI2C,KAAK,GAAG,CAAC,EAAE;IACpC,OAAOC,SAAS;EAClB;EACA,IAAI7B,MAAM,GAAG,IAAI,CAACD,OAAO,CAAC6B,KAAK,CAAC;EAChC,OAAO,IAAI,CAAC5C,KAAK,CAACgB,MAAM,CAAC,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC;AAGDlB,UAAU,CAACgB,SAAS,CAACyB,KAAK,GAAG,SAASA,KAAKA,CAAEO,KAAK,EAAEL,GAAG,EAAE;EACvD,IAAI,OAAOK,KAAK,IAAI,QAAQ,IAAIA,KAAK,GAAG,CAAC,EACvCA,KAAK,IAAI,IAAI,CAAC7C,MAAM;EACtB,IAAI,OAAOwC,GAAG,IAAI,QAAQ,IAAIA,GAAG,GAAG,CAAC,EACnCA,GAAG,IAAI,IAAI,CAACxC,MAAM;EACpB,OAAO,IAAI,CAAC8C,IAAI,CAAC,IAAI,EAAE,CAAC,EAAED,KAAK,EAAEL,GAAG,CAAC;AACvC,CAAC;AAGD3C,UAAU,CAACgB,SAAS,CAACiC,IAAI,GAAG,SAASA,IAAIA,CAAEC,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAE;EAC1E,IAAI,OAAOD,QAAQ,IAAI,QAAQ,IAAIA,QAAQ,GAAG,CAAC,EAC7CA,QAAQ,GAAG,CAAC;EACd,IAAI,OAAOC,MAAM,IAAI,QAAQ,IAAIA,MAAM,GAAG,IAAI,CAAClD,MAAM,EACnDkD,MAAM,GAAG,IAAI,CAAClD,MAAM;EACtB,IAAIiD,QAAQ,IAAI,IAAI,CAACjD,MAAM,EACzB,OAAO+C,GAAG,IAAIxB,MAAM,CAAC4B,KAAK,CAAC,CAAC,CAAC;EAC/B,IAAID,MAAM,IAAI,CAAC,EACb,OAAOH,GAAG,IAAIxB,MAAM,CAAC4B,KAAK,CAAC,CAAC,CAAC;EAE/B,IAAIL,IAAI,GAAK,CAAC,CAACC,GAAG;IACdK,GAAG,GAAM,IAAI,CAACtC,OAAO,CAACmC,QAAQ,CAAC;IAC/BI,GAAG,GAAMH,MAAM,GAAGD,QAAQ;IAC1BK,KAAK,GAAID,GAAG;IACZE,MAAM,GAAIT,IAAI,IAAIE,QAAQ,IAAK,CAAC;IAChCH,KAAK,GAAIO,GAAG,CAAC,CAAC,CAAC;IACfI,CAAC;IACDvC,CAAC;;EAEL;EACA,IAAIgC,QAAQ,KAAK,CAAC,IAAIC,MAAM,IAAI,IAAI,CAAClD,MAAM,EAAE;IAC3C,IAAI,CAAC8C,IAAI,EAAE;MAAE;MACX,OAAO,IAAI,CAAC/C,KAAK,CAACC,MAAM,KAAK,CAAC,GAC1B,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,GACbwB,MAAM,CAACkC,MAAM,CAAC,IAAI,CAAC1D,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IAC5C;;IAEA;IACA,KAAKiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAClB,KAAK,CAACC,MAAM,EAAEiB,CAAC,EAAE,EAAE;MACtC,IAAI,CAAClB,KAAK,CAACkB,CAAC,CAAC,CAAC6B,IAAI,CAACC,GAAG,EAAEQ,MAAM,CAAC;MAC/BA,MAAM,IAAI,IAAI,CAACxD,KAAK,CAACkB,CAAC,CAAC,CAACjB,MAAM;IAChC;IAEA,OAAO+C,GAAG;EACZ;;EAEA;EACA,IAAIO,KAAK,IAAI,IAAI,CAACvD,KAAK,CAACqD,GAAG,CAAC,CAAC,CAAC,CAAC,CAACpD,MAAM,GAAG6C,KAAK,EAAE;IAC9C,OAAOC,IAAI,GACP,IAAI,CAAC/C,KAAK,CAACqD,GAAG,CAAC,CAAC,CAAC,CAAC,CAACN,IAAI,CAACC,GAAG,EAAEC,QAAQ,EAAEH,KAAK,EAAEA,KAAK,GAAGS,KAAK,CAAC,GAC5D,IAAI,CAACvD,KAAK,CAACqD,GAAG,CAAC,CAAC,CAAC,CAAC,CAACd,KAAK,CAACO,KAAK,EAAEA,KAAK,GAAGS,KAAK,CAAC;EACpD;EAEA,IAAI,CAACR,IAAI;IAAE;IACTC,GAAG,GAAGxB,MAAM,CAACmC,WAAW,CAACL,GAAG,CAAC;EAE/B,KAAKpC,CAAC,GAAGmC,GAAG,CAAC,CAAC,CAAC,EAAEnC,CAAC,GAAG,IAAI,CAAClB,KAAK,CAACC,MAAM,EAAEiB,CAAC,EAAE,EAAE;IAC3CuC,CAAC,GAAG,IAAI,CAACzD,KAAK,CAACkB,CAAC,CAAC,CAACjB,MAAM,GAAG6C,KAAK;IAEhC,IAAIS,KAAK,GAAGE,CAAC,EAAE;MACb,IAAI,CAACzD,KAAK,CAACkB,CAAC,CAAC,CAAC6B,IAAI,CAACC,GAAG,EAAEQ,MAAM,EAAEV,KAAK,CAAC;MACtCU,MAAM,IAAIC,CAAC;IACb,CAAC,MAAM;MACL,IAAI,CAACzD,KAAK,CAACkB,CAAC,CAAC,CAAC6B,IAAI,CAACC,GAAG,EAAEQ,MAAM,EAAEV,KAAK,EAAEA,KAAK,GAAGS,KAAK,CAAC;MACrDC,MAAM,IAAIC,CAAC;MACX;IACF;IAEAF,KAAK,IAAIE,CAAC;IAEV,IAAIX,KAAK,EACPA,KAAK,GAAG,CAAC;EACb;;EAEA;EACA,IAAIE,GAAG,CAAC/C,MAAM,GAAGuD,MAAM,EAAE,OAAOR,GAAG,CAACT,KAAK,CAAC,CAAC,EAAEiB,MAAM,CAAC;EAEpD,OAAOR,GAAG;AACZ,CAAC;AAEDlD,UAAU,CAACgB,SAAS,CAAC8C,YAAY,GAAG,SAASA,YAAYA,CAAEd,KAAK,EAAEL,GAAG,EAAE;EACrEK,KAAK,GAAGA,KAAK,IAAI,CAAC;EAClBL,GAAG,GAAG,OAAOA,GAAG,KAAK,QAAQ,GAAG,IAAI,CAACxC,MAAM,GAAGwC,GAAG;EAEjD,IAAIK,KAAK,GAAG,CAAC,EACXA,KAAK,IAAI,IAAI,CAAC7C,MAAM;EACtB,IAAIwC,GAAG,GAAG,CAAC,EACTA,GAAG,IAAI,IAAI,CAACxC,MAAM;EAEpB,IAAI6C,KAAK,KAAKL,GAAG,EAAE;IACjB,OAAO,IAAI3C,UAAU,CAAC,CAAC;EACzB;EACA,IAAI+D,WAAW,GAAG,IAAI,CAAC9C,OAAO,CAAC+B,KAAK,CAAC;IACjCgB,SAAS,GAAG,IAAI,CAAC/C,OAAO,CAAC0B,GAAG,CAAC;IAC7BsB,OAAO,GAAG,IAAI,CAAC/D,KAAK,CAACuC,KAAK,CAACsB,WAAW,CAAC,CAAC,CAAC,EAAEC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAEhE,IAAIA,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EACnBC,OAAO,CAACC,GAAG,CAAC,CAAC,MAEbD,OAAO,CAACA,OAAO,CAAC9D,MAAM,GAAC,CAAC,CAAC,GAAG8D,OAAO,CAACA,OAAO,CAAC9D,MAAM,GAAC,CAAC,CAAC,CAACsC,KAAK,CAAC,CAAC,EAAEuB,SAAS,CAAC,CAAC,CAAC,CAAC;EAE9E,IAAID,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,EACrBE,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC,CAACxB,KAAK,CAACsB,WAAW,CAAC,CAAC,CAAC,CAAC;EAE/C,OAAO,IAAI/D,UAAU,CAACiE,OAAO,CAAC;AAChC,CAAC;AAEDjE,UAAU,CAACgB,SAAS,CAACe,QAAQ,GAAG,SAASA,QAAQA,CAAEK,QAAQ,EAAEY,KAAK,EAAEL,GAAG,EAAE;EACvE,OAAO,IAAI,CAACF,KAAK,CAACO,KAAK,EAAEL,GAAG,CAAC,CAACZ,QAAQ,CAACK,QAAQ,CAAC;AAClD,CAAC;AAEDpC,UAAU,CAACgB,SAAS,CAAC0B,OAAO,GAAG,SAASA,OAAOA,CAAEe,KAAK,EAAE;EACtD;EACAA,KAAK,GAAGlB,IAAI,CAAC4B,KAAK,CAACV,KAAK,CAAC;EACzB;EACA,IAAIW,MAAM,CAACC,KAAK,CAACZ,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC,EAAE,OAAO,IAAI;EAElD,OAAO,IAAI,CAACvD,KAAK,CAACC,MAAM,EAAE;IACxB,IAAIsD,KAAK,IAAI,IAAI,CAACvD,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM,EAAE;MACjCsD,KAAK,IAAI,IAAI,CAACvD,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM;MAC7B,IAAI,CAACA,MAAM,IAAI,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM;MACnC,IAAI,CAACD,KAAK,CAACoE,KAAK,CAAC,CAAC;IACpB,CAAC,MAAM;MACL,IAAI,CAACpE,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,CAACuC,KAAK,CAACgB,KAAK,CAAC;MAC1C,IAAI,CAACtD,MAAM,IAAIsD,KAAK;MACpB;IACF;EACF;EACA,OAAO,IAAI;AACb,CAAC;AAGDzD,UAAU,CAACgB,SAAS,CAACuD,SAAS,GAAG,SAASA,SAASA,CAAA,EAAI;EACrD,IAAInD,CAAC,GAAG,CAAC;IACL6B,IAAI,GAAG,IAAIjD,UAAU,CAAC,CAAC;EAE3B,OAAOoB,CAAC,GAAG,IAAI,CAAClB,KAAK,CAACC,MAAM,EAAEiB,CAAC,EAAE,EAC/B6B,IAAI,CAACpC,MAAM,CAAC,IAAI,CAACX,KAAK,CAACkB,CAAC,CAAC,CAAC;EAE5B,OAAO6B,IAAI;AACb,CAAC;AAGDjD,UAAU,CAACgB,SAAS,CAACwD,QAAQ,GAAG,SAASA,QAAQA,CAAElE,GAAG,EAAEmE,EAAE,EAAE;EAC1D,IAAI,CAACvE,KAAK,CAACC,MAAM,GAAG,CAAC;EACrB,IAAI,CAACA,MAAM,GAAG,CAAC;EACfsE,EAAE,CAACnE,GAAG,CAAC;AACT,CAAC;AAGDN,UAAU,CAACgB,SAAS,CAAC0D,OAAO,GAAG,UAAUC,MAAM,EAAEzD,MAAM,EAAEkB,QAAQ,EAAE;EACjE,IAAIA,QAAQ,KAAKW,SAAS,IAAI,OAAO7B,MAAM,KAAK,QAAQ,EAAE;IACxDkB,QAAQ,GAAGlB,MAAM;IACjBA,MAAM,GAAG6B,SAAS;EACpB;EACA,IAAI,OAAO4B,MAAM,KAAK,UAAU,IAAI9C,KAAK,CAACC,OAAO,CAAC6C,MAAM,CAAC,EAAE;IACzD,MAAM,IAAIC,SAAS,CAAC,qFAAqF,CAAC;EAC5G,CAAC,MAAM,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;IACnCA,MAAM,GAAGjD,MAAM,CAACM,IAAI,CAAC,CAAC2C,MAAM,CAAC,CAAC;EAClC,CAAC,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IACrCA,MAAM,GAAGjD,MAAM,CAACM,IAAI,CAAC2C,MAAM,EAAEvC,QAAQ,CAAC;EACxC,CAAC,MAAM,IAAIuC,MAAM,YAAY3E,UAAU,EAAE;IACvC2E,MAAM,GAAGA,MAAM,CAAClC,KAAK,CAAC,CAAC;EACzB,CAAC,MAAM,IAAI,CAACf,MAAM,CAACC,QAAQ,CAACgD,MAAM,CAAC,EAAE;IACnCA,MAAM,GAAGjD,MAAM,CAACM,IAAI,CAAC2C,MAAM,CAAC;EAC9B;EAEAzD,MAAM,GAAGkD,MAAM,CAAClD,MAAM,IAAI,CAAC,CAAC;EAC5B,IAAImD,KAAK,CAACnD,MAAM,CAAC,EAAE;IACjBA,MAAM,GAAG,CAAC;EACZ;EAEA,IAAIA,MAAM,GAAG,CAAC,EAAE;IACdA,MAAM,GAAG,IAAI,CAACf,MAAM,GAAGe,MAAM;EAC/B;EAEA,IAAIA,MAAM,GAAG,CAAC,EAAE;IACdA,MAAM,GAAG,CAAC;EACZ;EAEA,IAAIyD,MAAM,CAACxE,MAAM,KAAK,CAAC,EAAE;IACvB,OAAOe,MAAM,GAAG,IAAI,CAACf,MAAM,GAAG,IAAI,CAACA,MAAM,GAAGe,MAAM;EACpD;EAEA,IAAIK,QAAQ,GAAG,IAAI,CAACN,OAAO,CAACC,MAAM,CAAC;EACnC,IAAI2D,OAAO,GAAGtD,QAAQ,CAAC,CAAC,CAAC,EAAC;EAC1B,IAAIuD,UAAU,GAAGvD,QAAQ,CAAC,CAAC,CAAC,EAAC;;EAE7B;EACA,KAAKsD,OAAO,EAAEA,OAAO,GAAG,IAAI,CAAC3E,KAAK,CAACC,MAAM,EAAE0E,OAAO,EAAE,EAAE;IACpD,IAAIE,IAAI,GAAG,IAAI,CAAC7E,KAAK,CAAC2E,OAAO,CAAC;IAC9B,OAAMC,UAAU,GAAGC,IAAI,CAAC5E,MAAM,EAAE;MAC9B,IAAI6E,eAAe,GAAGD,IAAI,CAAC5E,MAAM,GAAG2E,UAAU;MAC9C,IAAIE,eAAe,IAAIL,MAAM,CAACxE,MAAM,EAAE;QACpC,IAAI8E,kBAAkB,GAAGF,IAAI,CAACL,OAAO,CAACC,MAAM,EAAEG,UAAU,CAAC;QACzD,IAAIG,kBAAkB,KAAK,CAAC,CAAC,EAAE;UAC7B,OAAO,IAAI,CAAC3D,cAAc,CAAC,CAACuD,OAAO,EAAEI,kBAAkB,CAAC,CAAC;QAC3D;QACAH,UAAU,GAAGC,IAAI,CAAC5E,MAAM,GAAGwE,MAAM,CAACxE,MAAM,GAAG,CAAC,EAAC;MAC/C,CAAC,MAAM;QACL,IAAI+E,SAAS,GAAG,IAAI,CAAC5D,cAAc,CAAC,CAACuD,OAAO,EAAEC,UAAU,CAAC,CAAC;QAC1D,IAAI,IAAI,CAACK,MAAM,CAACD,SAAS,EAAEP,MAAM,CAAC,EAAE;UAClC,OAAOO,SAAS;QAClB;QACAJ,UAAU,EAAE;MACd;IACF;IACAA,UAAU,GAAG,CAAC;EAChB;EACA,OAAO,CAAC,CAAC;AACX,CAAC;AAED9E,UAAU,CAACgB,SAAS,CAACmE,MAAM,GAAG,UAASjE,MAAM,EAAEyD,MAAM,EAAE;EACrD,IAAI,IAAI,CAACxE,MAAM,GAAGe,MAAM,GAAGyD,MAAM,CAACxE,MAAM,EAAE;IACxC,OAAO,KAAK;EACd;EACA,KAAK,IAAIiF,YAAY,GAAG,CAAC,EAAEA,YAAY,GAAGT,MAAM,CAACxE,MAAM,EAAGiF,YAAY,EAAE,EAAE;IACxE,IAAG,IAAI,CAACvC,GAAG,CAAC3B,MAAM,GAAGkE,YAAY,CAAC,KAAKT,MAAM,CAACS,YAAY,CAAC,EAAC;MAC1D,OAAO,KAAK;IACd;EACF;EACA,OAAO,IAAI;AACb,CAAC;AAGC,aAAY;EACZ,IAAIC,OAAO,GAAG;IACV,cAAc,EAAG,CAAC;IAClB,cAAc,EAAG,CAAC;IAClB,aAAa,EAAI,CAAC;IAClB,aAAa,EAAI,CAAC;IAClB,aAAa,EAAI,CAAC;IAClB,aAAa,EAAI,CAAC;IAClB,cAAc,EAAG,CAAC;IAClB,cAAc,EAAG,CAAC;IAClB,aAAa,EAAI,CAAC;IAClB,aAAa,EAAI,CAAC;IAClB,cAAc,EAAG,CAAC;IAClB,cAAc,EAAG,CAAC;IAClB,UAAU,EAAO,CAAC;IAClB,WAAW,EAAM,CAAC;IAClB,WAAW,EAAM,IAAI;IACrB,WAAW,EAAM,IAAI;IACrB,YAAY,EAAK,IAAI;IACrB,YAAY,EAAK;EACrB,CAAC;EAED,KAAK,IAAIC,CAAC,IAAID,OAAO,EAAE;IACpB,WAAUC,CAAC,EAAE;MACZ,IAAID,OAAO,CAACC,CAAC,CAAC,KAAK,IAAI,EAAE;QACvBtF,UAAU,CAACgB,SAAS,CAACsE,CAAC,CAAC,GAAG,UAAUpE,MAAM,EAAEqE,UAAU,EAAE;UACtD,OAAO,IAAI,CAAC9C,KAAK,CAACvB,MAAM,EAAEA,MAAM,GAAGqE,UAAU,CAAC,CAACD,CAAC,CAAC,CAAC,CAAC,EAAEC,UAAU,CAAC;QAClE,CAAC;MACH,CAAC,MACI;QACHvF,UAAU,CAACgB,SAAS,CAACsE,CAAC,CAAC,GAAG,UAAUpE,MAAM,EAAE;UAC1C,OAAO,IAAI,CAACuB,KAAK,CAACvB,MAAM,EAAEA,MAAM,GAAGmE,OAAO,CAACC,CAAC,CAAC,CAAC,CAACA,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC;MACH;IACF,CAAC,EAACA,CAAC,CAAC;EACN;AACF,CAAC,EAAC,CAAC;AAGHE,MAAM,CAACC,OAAO,GAAGzF,UAAU"},"metadata":{},"sourceType":"script"}