{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst {\n  URL\n} = require('iso-url');\nconst Bignumber = require('bignumber.js').BigNumber;\nconst utils = require('./utils');\nconst constants = require('./constants');\nconst MT = constants.MT;\nconst NUMBYTES = constants.NUMBYTES;\nconst SHIFT32 = constants.SHIFT32;\nconst SYMS = constants.SYMS;\nconst TAG = constants.TAG;\nconst HALF = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.TWO;\nconst FLOAT = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.FOUR;\nconst DOUBLE = constants.MT.SIMPLE_FLOAT << 5 | constants.NUMBYTES.EIGHT;\nconst TRUE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.TRUE;\nconst FALSE = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.FALSE;\nconst UNDEFINED = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.UNDEFINED;\nconst NULL = constants.MT.SIMPLE_FLOAT << 5 | constants.SIMPLE.NULL;\nconst MAXINT_BN = new Bignumber('0x20000000000000');\nconst BUF_NAN = Buffer.from('f97e00', 'hex');\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex');\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex');\nfunction toType(obj) {\n  // [object Type]\n  // --------8---1\n  return {}.toString.call(obj).slice(8, -1);\n}\n\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\nclass Encoder {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  constructor(options) {\n    options = options || {};\n    this.streaming = typeof options.stream === 'function';\n    this.onData = options.stream;\n    this.semanticTypes = [[URL, this._pushUrl], [Bignumber, this._pushBigNumber]];\n    const addTypes = options.genTypes || [];\n    const len = addTypes.length;\n    for (let i = 0; i < len; i++) {\n      this.addSemanticType(addTypes[i][0], addTypes[i][1]);\n    }\n    this._reset();\n  }\n  addSemanticType(type, fun) {\n    const len = this.semanticTypes.length;\n    for (let i = 0; i < len; i++) {\n      const typ = this.semanticTypes[i][0];\n      if (typ === type) {\n        const old = this.semanticTypes[i][1];\n        this.semanticTypes[i][1] = fun;\n        return old;\n      }\n    }\n    this.semanticTypes.push([type, fun]);\n    return null;\n  }\n  push(val) {\n    if (!val) {\n      return true;\n    }\n    this.result[this.offset] = val;\n    this.resultMethod[this.offset] = 0;\n    this.resultLength[this.offset] = val.length;\n    this.offset++;\n    if (this.streaming) {\n      this.onData(this.finalize());\n    }\n    return true;\n  }\n  pushWrite(val, method, len) {\n    this.result[this.offset] = val;\n    this.resultMethod[this.offset] = method;\n    this.resultLength[this.offset] = len;\n    this.offset++;\n    if (this.streaming) {\n      this.onData(this.finalize());\n    }\n    return true;\n  }\n  _pushUInt8(val) {\n    return this.pushWrite(val, 1, 1);\n  }\n  _pushUInt16BE(val) {\n    return this.pushWrite(val, 2, 2);\n  }\n  _pushUInt32BE(val) {\n    return this.pushWrite(val, 3, 4);\n  }\n  _pushDoubleBE(val) {\n    return this.pushWrite(val, 4, 8);\n  }\n  _pushNaN() {\n    return this.push(BUF_NAN);\n  }\n  _pushInfinity(obj) {\n    const half = obj < 0 ? BUF_INF_NEG : BUF_INF_POS;\n    return this.push(half);\n  }\n  _pushFloat(obj) {\n    const b2 = Buffer.allocUnsafe(2);\n    if (utils.writeHalf(b2, obj)) {\n      if (utils.parseHalf(b2) === obj) {\n        return this._pushUInt8(HALF) && this.push(b2);\n      }\n    }\n    const b4 = Buffer.allocUnsafe(4);\n    b4.writeFloatBE(obj, 0);\n    if (b4.readFloatBE(0) === obj) {\n      return this._pushUInt8(FLOAT) && this.push(b4);\n    }\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj);\n  }\n  _pushInt(obj, mt, orig) {\n    const m = mt << 5;\n    if (obj < 24) {\n      return this._pushUInt8(m | obj);\n    }\n    if (obj <= 0xff) {\n      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj);\n    }\n    if (obj <= 0xffff) {\n      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj);\n    }\n    if (obj <= 0xffffffff) {\n      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj);\n    }\n    if (obj <= Number.MAX_SAFE_INTEGER) {\n      return this._pushUInt8(m | NUMBYTES.EIGHT) && this._pushUInt32BE(Math.floor(obj / SHIFT32)) && this._pushUInt32BE(obj % SHIFT32);\n    }\n    if (mt === MT.NEG_INT) {\n      return this._pushFloat(orig);\n    }\n    return this._pushFloat(obj);\n  }\n  _pushIntNum(obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj);\n    } else {\n      return this._pushInt(obj, MT.POS_INT);\n    }\n  }\n  _pushNumber(obj) {\n    switch (false) {\n      case obj === obj:\n        // eslint-disable-line\n        return this._pushNaN(obj);\n      case isFinite(obj):\n        return this._pushInfinity(obj);\n      case obj % 1 !== 0:\n        return this._pushIntNum(obj);\n      default:\n        return this._pushFloat(obj);\n    }\n  }\n  _pushString(obj) {\n    const len = Buffer.byteLength(obj, 'utf8');\n    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len);\n  }\n  _pushBoolean(obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE);\n  }\n  _pushUndefined(obj) {\n    return this._pushUInt8(UNDEFINED);\n  }\n  _pushArray(gen, obj) {\n    const len = obj.length;\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false;\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _pushTag(tag) {\n    return this._pushInt(tag, MT.TAG);\n  }\n  _pushDate(gen, obj) {\n    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n    // still allowed to encode fractions of seconds which can be achieved by\n    // changing overwriting the encode function for Date objects.\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000));\n  }\n  _pushBuffer(gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj);\n  }\n  _pushNoFilter(gen, obj) {\n    return gen._pushBuffer(gen, obj.slice());\n  }\n  _pushRegexp(gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source);\n  }\n  _pushSet(gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false;\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  _pushUrl(gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format());\n  }\n  _pushBigint(obj) {\n    let tag = TAG.POS_BIGINT;\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1);\n      tag = TAG.NEG_BIGINT;\n    }\n    let str = obj.toString(16);\n    if (str.length % 2) {\n      str = '0' + str;\n    }\n    const buf = Buffer.from(str, 'hex');\n    return this._pushTag(tag) && this._pushBuffer(this, buf);\n  }\n  _pushBigNumber(gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN();\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity);\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj);\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) && gen._pushInt(2, MT.ARRAY))) {\n      return false;\n    }\n    const dec = obj.decimalPlaces();\n    const slide = obj.multipliedBy(new Bignumber(10).pow(dec));\n    if (!gen._pushIntNum(-dec)) {\n      return false;\n    }\n    if (slide.abs().isLessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber());\n    } else {\n      return gen._pushBigint(slide);\n    }\n  }\n  _pushMap(gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false;\n    }\n    return this._pushRawMap(obj.size, Array.from(obj));\n  }\n  _pushObject(obj) {\n    if (!obj) {\n      return this._pushUInt8(NULL);\n    }\n    var len = this.semanticTypes.length;\n    for (var i = 0; i < len; i++) {\n      if (obj instanceof this.semanticTypes[i][0]) {\n        return this.semanticTypes[i][1].call(obj, this, obj);\n      }\n    }\n    var f = obj.encodeCBOR;\n    if (typeof f === 'function') {\n      return f.call(obj, this);\n    }\n    var keys = Object.keys(obj);\n    var keyLength = keys.length;\n    if (!this._pushInt(keyLength, MT.MAP)) {\n      return false;\n    }\n    return this._pushRawMap(keyLength, keys.map(k => [k, obj[k]]));\n  }\n  _pushRawMap(len, map) {\n    // Sort keys for canoncialization\n    // 1. encode key\n    // 2. shorter key comes before longer key\n    // 3. same length keys are sorted with lower\n    //    byte value before higher\n\n    map = map.map(function (a) {\n      a[0] = Encoder.encode(a[0]);\n      return a;\n    }).sort(utils.keySorter);\n    for (var j = 0; j < len; j++) {\n      if (!this.push(map[j][0])) {\n        return false;\n      }\n      if (!this.pushAny(map[j][1])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Alias for `.pushAny`\n   *\n   * @param {*} obj\n   * @returns {boolean} true on success\n   */\n  write(obj) {\n    return this.pushAny(obj);\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny(obj) {\n    var typ = toType(obj);\n    switch (typ) {\n      case 'Number':\n        return this._pushNumber(obj);\n      case 'String':\n        return this._pushString(obj);\n      case 'Boolean':\n        return this._pushBoolean(obj);\n      case 'Object':\n        return this._pushObject(obj);\n      case 'Array':\n        return this._pushArray(this, obj);\n      case 'Uint8Array':\n        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj));\n      case 'Null':\n        return this._pushUInt8(NULL);\n      case 'Undefined':\n        return this._pushUndefined(obj);\n      case 'Map':\n        return this._pushMap(this, obj);\n      case 'Set':\n        return this._pushSet(this, obj);\n      case 'URL':\n        return this._pushUrl(this, obj);\n      case 'BigNumber':\n        return this._pushBigNumber(this, obj);\n      case 'Date':\n        return this._pushDate(this, obj);\n      case 'RegExp':\n        return this._pushRegexp(this, obj);\n      case 'Symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushObject(null);\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(undefined);\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString());\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''));\n    }\n  }\n  finalize() {\n    if (this.offset === 0) {\n      return null;\n    }\n    var result = this.result;\n    var resultLength = this.resultLength;\n    var resultMethod = this.resultMethod;\n    var offset = this.offset;\n\n    // Determine the size of the buffer\n    var size = 0;\n    var i = 0;\n    for (; i < offset; i++) {\n      size += resultLength[i];\n    }\n    var res = Buffer.allocUnsafe(size);\n    var index = 0;\n    var length = 0;\n\n    // Write the content into the result buffer\n    for (i = 0; i < offset; i++) {\n      length = resultLength[i];\n      switch (resultMethod[i]) {\n        case 0:\n          result[i].copy(res, index);\n          break;\n        case 1:\n          res.writeUInt8(result[i], index, true);\n          break;\n        case 2:\n          res.writeUInt16BE(result[i], index, true);\n          break;\n        case 3:\n          res.writeUInt32BE(result[i], index, true);\n          break;\n        case 4:\n          res.writeDoubleBE(result[i], index, true);\n          break;\n        case 5:\n          res.write(result[i], index, length, 'utf8');\n          break;\n        default:\n          throw new Error('unkown method');\n      }\n      index += length;\n    }\n    var tmp = res;\n    this._reset();\n    return tmp;\n  }\n  _reset() {\n    this.result = [];\n    this.resultMethod = [];\n    this.resultLength = [];\n    this.offset = 0;\n  }\n\n  /**\n   * Encode the given value\n   * @param {*} o\n   * @returns {Buffer}\n   */\n  static encode(o) {\n    const enc = new Encoder();\n    const ret = enc.pushAny(o);\n    if (!ret) {\n      throw new Error('Failed to encode input');\n    }\n    return enc.finalize();\n  }\n}\nmodule.exports = Encoder;","map":{"version":3,"names":["Buffer","require","URL","Bignumber","BigNumber","utils","constants","MT","NUMBYTES","SHIFT32","SYMS","TAG","HALF","SIMPLE_FLOAT","TWO","FLOAT","FOUR","DOUBLE","EIGHT","TRUE","SIMPLE","FALSE","UNDEFINED","NULL","MAXINT_BN","BUF_NAN","from","BUF_INF_NEG","BUF_INF_POS","toType","obj","toString","call","slice","Encoder","constructor","options","streaming","stream","onData","semanticTypes","_pushUrl","_pushBigNumber","addTypes","genTypes","len","length","i","addSemanticType","_reset","type","fun","typ","old","push","val","result","offset","resultMethod","resultLength","finalize","pushWrite","method","_pushUInt8","_pushUInt16BE","_pushUInt32BE","_pushDoubleBE","_pushNaN","_pushInfinity","half","_pushFloat","b2","allocUnsafe","writeHalf","parseHalf","b4","writeFloatBE","readFloatBE","_pushInt","mt","orig","m","ONE","Number","MAX_SAFE_INTEGER","Math","floor","NEG_INT","_pushIntNum","POS_INT","_pushNumber","isFinite","_pushString","byteLength","UTF8_STRING","_pushBoolean","_pushUndefined","_pushArray","gen","ARRAY","j","pushAny","_pushTag","tag","_pushDate","DATE_EPOCH","round","_pushBuffer","BYTE_STRING","_pushNoFilter","_pushRegexp","REGEXP","source","_pushSet","size","x","URI","format","_pushBigint","POS_BIGINT","isNegative","negated","minus","NEG_BIGINT","str","buf","isNaN","Infinity","isInteger","DECIMAL_FRAC","dec","decimalPlaces","slide","multipliedBy","pow","abs","isLessThan","toNumber","_pushMap","MAP","_pushRawMap","Array","_pushObject","f","encodeCBOR","keys","Object","keyLength","map","k","a","encode","sort","keySorter","write","isBuffer","undefined","Error","res","index","copy","writeUInt8","writeUInt16BE","writeUInt32BE","writeDoubleBE","tmp","o","enc","ret","module","exports"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/borc/src/encoder.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst { URL } = require('iso-url')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst utils = require('./utils')\nconst constants = require('./constants')\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SHIFT32 = constants.SHIFT32\nconst SYMS = constants.SYMS\nconst TAG = constants.TAG\nconst HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO\nconst FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR\nconst DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT\nconst TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE\nconst FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE\nconst UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED\nconst NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL\n\nconst MAXINT_BN = new Bignumber('0x20000000000000')\nconst BUF_NAN = Buffer.from('f97e00', 'hex')\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex')\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex')\n\nfunction toType (obj) {\n  // [object Type]\n  // --------8---1\n  return ({}).toString.call(obj).slice(8, -1)\n}\n\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\nclass Encoder {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  constructor (options) {\n    options = options || {}\n\n    this.streaming = typeof options.stream === 'function'\n    this.onData = options.stream\n\n    this.semanticTypes = [\n      [URL, this._pushUrl],\n      [Bignumber, this._pushBigNumber]\n    ]\n\n    const addTypes = options.genTypes || []\n    const len = addTypes.length\n    for (let i = 0; i < len; i++) {\n      this.addSemanticType(\n        addTypes[i][0],\n        addTypes[i][1]\n      )\n    }\n\n    this._reset()\n  }\n\n  addSemanticType (type, fun) {\n    const len = this.semanticTypes.length\n    for (let i = 0; i < len; i++) {\n      const typ = this.semanticTypes[i][0]\n      if (typ === type) {\n        const old = this.semanticTypes[i][1]\n        this.semanticTypes[i][1] = fun\n        return old\n      }\n    }\n    this.semanticTypes.push([type, fun])\n    return null\n  }\n\n  push (val) {\n    if (!val) {\n      return true\n    }\n\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = 0\n    this.resultLength[this.offset] = val.length\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  pushWrite (val, method, len) {\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = method\n    this.resultLength[this.offset] = len\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  _pushUInt8 (val) {\n    return this.pushWrite(val, 1, 1)\n  }\n\n  _pushUInt16BE (val) {\n    return this.pushWrite(val, 2, 2)\n  }\n\n  _pushUInt32BE (val) {\n    return this.pushWrite(val, 3, 4)\n  }\n\n  _pushDoubleBE (val) {\n    return this.pushWrite(val, 4, 8)\n  }\n\n  _pushNaN () {\n    return this.push(BUF_NAN)\n  }\n\n  _pushInfinity (obj) {\n    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS\n    return this.push(half)\n  }\n\n  _pushFloat (obj) {\n    const b2 = Buffer.allocUnsafe(2)\n\n    if (utils.writeHalf(b2, obj)) {\n      if (utils.parseHalf(b2) === obj) {\n        return this._pushUInt8(HALF) && this.push(b2)\n      }\n    }\n\n    const b4 = Buffer.allocUnsafe(4)\n    b4.writeFloatBE(obj, 0)\n    if (b4.readFloatBE(0) === obj) {\n      return this._pushUInt8(FLOAT) && this.push(b4)\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)\n  }\n\n  _pushInt (obj, mt, orig) {\n    const m = mt << 5\n    if (obj < 24) {\n      return this._pushUInt8(m | obj)\n    }\n\n    if (obj <= 0xff) {\n      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)\n    }\n\n    if (obj <= 0xffff) {\n      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)\n    }\n\n    if (obj <= 0xffffffff) {\n      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)\n    }\n\n    if (obj <= Number.MAX_SAFE_INTEGER) {\n      return this._pushUInt8(m | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&\n        this._pushUInt32BE(obj % SHIFT32)\n    }\n\n    if (mt === MT.NEG_INT) {\n      return this._pushFloat(orig)\n    }\n\n    return this._pushFloat(obj)\n  }\n\n  _pushIntNum (obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj)\n    } else {\n      return this._pushInt(obj, MT.POS_INT)\n    }\n  }\n\n  _pushNumber (obj) {\n    switch (false) {\n      case (obj === obj): // eslint-disable-line\n        return this._pushNaN(obj)\n      case isFinite(obj):\n        return this._pushInfinity(obj)\n      case ((obj % 1) !== 0):\n        return this._pushIntNum(obj)\n      default:\n        return this._pushFloat(obj)\n    }\n  }\n\n  _pushString (obj) {\n    const len = Buffer.byteLength(obj, 'utf8')\n    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len)\n  }\n\n  _pushBoolean (obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE)\n  }\n\n  _pushUndefined (obj) {\n    return this._pushUInt8(UNDEFINED)\n  }\n\n  _pushArray (gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushTag (tag) {\n    return this._pushInt(tag, MT.TAG)\n  }\n\n  _pushDate (gen, obj) {\n    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n    // still allowed to encode fractions of seconds which can be achieved by\n    // changing overwriting the encode function for Date objects.\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000))\n  }\n\n  _pushBuffer (gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)\n  }\n\n  _pushNoFilter (gen, obj) {\n    return gen._pushBuffer(gen, obj.slice())\n  }\n\n  _pushRegexp (gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)\n  }\n\n  _pushSet (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUrl (gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())\n  }\n\n  _pushBigint (obj) {\n    let tag = TAG.POS_BIGINT\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1)\n      tag = TAG.NEG_BIGINT\n    }\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  _pushBigNumber (gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN()\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj)\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&\n      gen._pushInt(2, MT.ARRAY))) {\n      return false\n    }\n\n    const dec = obj.decimalPlaces()\n    const slide = obj.multipliedBy(new Bignumber(10).pow(dec))\n    if (!gen._pushIntNum(-dec)) {\n      return false\n    }\n    if (slide.abs().isLessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber())\n    } else {\n      return gen._pushBigint(slide)\n    }\n  }\n\n  _pushMap (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      obj.size,\n      Array.from(obj)\n    )\n  }\n\n  _pushObject (obj) {\n    if (!obj) {\n      return this._pushUInt8(NULL)\n    }\n\n    var len = this.semanticTypes.length\n    for (var i = 0; i < len; i++) {\n      if (obj instanceof this.semanticTypes[i][0]) {\n        return this.semanticTypes[i][1].call(obj, this, obj)\n      }\n    }\n\n    var f = obj.encodeCBOR\n    if (typeof f === 'function') {\n      return f.call(obj, this)\n    }\n\n    var keys = Object.keys(obj)\n    var keyLength = keys.length\n    if (!this._pushInt(keyLength, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      keyLength,\n      keys.map((k) => [k, obj[k]])\n    )\n  }\n\n  _pushRawMap (len, map) {\n    // Sort keys for canoncialization\n    // 1. encode key\n    // 2. shorter key comes before longer key\n    // 3. same length keys are sorted with lower\n    //    byte value before higher\n\n    map = map.map(function (a) {\n      a[0] = Encoder.encode(a[0])\n      return a\n    }).sort(utils.keySorter)\n\n    for (var j = 0; j < len; j++) {\n      if (!this.push(map[j][0])) {\n        return false\n      }\n\n      if (!this.pushAny(map[j][1])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Alias for `.pushAny`\n   *\n   * @param {*} obj\n   * @returns {boolean} true on success\n   */\n  write (obj) {\n    return this.pushAny(obj)\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny (obj) {\n    var typ = toType(obj)\n\n    switch (typ) {\n      case 'Number':\n        return this._pushNumber(obj)\n      case 'String':\n        return this._pushString(obj)\n      case 'Boolean':\n        return this._pushBoolean(obj)\n      case 'Object':\n        return this._pushObject(obj)\n      case 'Array':\n        return this._pushArray(this, obj)\n      case 'Uint8Array':\n        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj))\n      case 'Null':\n        return this._pushUInt8(NULL)\n      case 'Undefined':\n        return this._pushUndefined(obj)\n      case 'Map':\n        return this._pushMap(this, obj)\n      case 'Set':\n        return this._pushSet(this, obj)\n      case 'URL':\n        return this._pushUrl(this, obj)\n      case 'BigNumber':\n        return this._pushBigNumber(this, obj)\n      case 'Date':\n        return this._pushDate(this, obj)\n      case 'RegExp':\n        return this._pushRegexp(this, obj)\n      case 'Symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushObject(null)\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(undefined)\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString())\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''))\n    }\n  }\n\n  finalize () {\n    if (this.offset === 0) {\n      return null\n    }\n\n    var result = this.result\n    var resultLength = this.resultLength\n    var resultMethod = this.resultMethod\n    var offset = this.offset\n\n    // Determine the size of the buffer\n    var size = 0\n    var i = 0\n\n    for (; i < offset; i++) {\n      size += resultLength[i]\n    }\n\n    var res = Buffer.allocUnsafe(size)\n    var index = 0\n    var length = 0\n\n    // Write the content into the result buffer\n    for (i = 0; i < offset; i++) {\n      length = resultLength[i]\n\n      switch (resultMethod[i]) {\n        case 0:\n          result[i].copy(res, index)\n          break\n        case 1:\n          res.writeUInt8(result[i], index, true)\n          break\n        case 2:\n          res.writeUInt16BE(result[i], index, true)\n          break\n        case 3:\n          res.writeUInt32BE(result[i], index, true)\n          break\n        case 4:\n          res.writeDoubleBE(result[i], index, true)\n          break\n        case 5:\n          res.write(result[i], index, length, 'utf8')\n          break\n        default:\n          throw new Error('unkown method')\n      }\n\n      index += length\n    }\n\n    var tmp = res\n\n    this._reset()\n\n    return tmp\n  }\n\n  _reset () {\n    this.result = []\n    this.resultMethod = []\n    this.resultLength = []\n    this.offset = 0\n  }\n\n  /**\n   * Encode the given value\n   * @param {*} o\n   * @returns {Buffer}\n   */\n  static encode (o) {\n    const enc = new Encoder()\n    const ret = enc.pushAny(o)\n    if (!ret) {\n      throw new Error('Failed to encode input')\n    }\n\n    return enc.finalize()\n  }\n}\n\nmodule.exports = Encoder\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}