{"ast":null,"code":"'use strict';\n\nconst secp256k1 = require('secp256k1');\nconst multihashing = require('multihashing-async');\nconst setImmediate = require('async/setImmediate');\nconst HASH_ALGORITHM = 'sha2-256';\nmodule.exports = randomBytes => {\n  const privateKeyLength = 32;\n  function generateKey(callback) {\n    const done = (err, res) => setImmediate(() => callback(err, res));\n    let privateKey;\n    do {\n      privateKey = randomBytes(32);\n    } while (!secp256k1.privateKeyVerify(privateKey));\n    done(null, privateKey);\n  }\n  function hashAndSign(key, msg, callback) {\n    const done = (err, res) => setImmediate(() => callback(err, res));\n    multihashing.digest(msg, HASH_ALGORITHM, (err, digest) => {\n      if (err) {\n        return done(err);\n      }\n      try {\n        const sig = secp256k1.sign(digest, key);\n        const sigDER = secp256k1.signatureExport(sig.signature);\n        return done(null, sigDER);\n      } catch (err) {\n        done(err);\n      }\n    });\n  }\n  function hashAndVerify(key, sig, msg, callback) {\n    const done = (err, res) => setImmediate(() => callback(err, res));\n    multihashing.digest(msg, HASH_ALGORITHM, (err, digest) => {\n      if (err) {\n        return done(err);\n      }\n      try {\n        sig = secp256k1.signatureImport(sig);\n        const valid = secp256k1.verify(digest, sig, key);\n        return done(null, valid);\n      } catch (err) {\n        done(err);\n      }\n    });\n  }\n  function compressPublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n    return secp256k1.publicKeyConvert(key, true);\n  }\n  function decompressPublicKey(key) {\n    return secp256k1.publicKeyConvert(key, false);\n  }\n  function validatePrivateKey(key) {\n    if (!secp256k1.privateKeyVerify(key)) {\n      throw new Error('Invalid private key');\n    }\n  }\n  function validatePublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n  }\n  function computePublicKey(privateKey) {\n    validatePrivateKey(privateKey);\n    return secp256k1.publicKeyCreate(privateKey);\n  }\n  return {\n    generateKey: generateKey,\n    privateKeyLength: privateKeyLength,\n    hashAndSign: hashAndSign,\n    hashAndVerify: hashAndVerify,\n    compressPublicKey: compressPublicKey,\n    decompressPublicKey: decompressPublicKey,\n    validatePrivateKey: validatePrivateKey,\n    validatePublicKey: validatePublicKey,\n    computePublicKey: computePublicKey\n  };\n};","map":{"version":3,"names":["secp256k1","require","multihashing","setImmediate","HASH_ALGORITHM","module","exports","randomBytes","privateKeyLength","generateKey","callback","done","err","res","privateKey","privateKeyVerify","hashAndSign","key","msg","digest","sig","sign","sigDER","signatureExport","signature","hashAndVerify","signatureImport","valid","verify","compressPublicKey","publicKeyVerify","Error","publicKeyConvert","decompressPublicKey","validatePrivateKey","validatePublicKey","computePublicKey","publicKeyCreate"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/libp2p-crypto-secp256k1/src/crypto.js"],"sourcesContent":["'use strict'\n\nconst secp256k1 = require('secp256k1')\nconst multihashing = require('multihashing-async')\nconst setImmediate = require('async/setImmediate')\n\nconst HASH_ALGORITHM = 'sha2-256'\n\nmodule.exports = (randomBytes) => {\n  const privateKeyLength = 32\n\n  function generateKey (callback) {\n    const done = (err, res) => setImmediate(() => callback(err, res))\n\n    let privateKey\n    do {\n      privateKey = randomBytes(32)\n    } while (!secp256k1.privateKeyVerify(privateKey))\n\n    done(null, privateKey)\n  }\n\n  function hashAndSign (key, msg, callback) {\n    const done = (err, res) => setImmediate(() => callback(err, res))\n\n    multihashing.digest(msg, HASH_ALGORITHM, (err, digest) => {\n      if (err) { return done(err) }\n\n      try {\n        const sig = secp256k1.sign(digest, key)\n        const sigDER = secp256k1.signatureExport(sig.signature)\n        return done(null, sigDER)\n      } catch (err) { done(err) }\n    })\n  }\n\n  function hashAndVerify (key, sig, msg, callback) {\n    const done = (err, res) => setImmediate(() => callback(err, res))\n\n    multihashing.digest(msg, HASH_ALGORITHM, (err, digest) => {\n      if (err) { return done(err) }\n      try {\n        sig = secp256k1.signatureImport(sig)\n        const valid = secp256k1.verify(digest, sig, key)\n        return done(null, valid)\n      } catch (err) { done(err) }\n    })\n  }\n\n  function compressPublicKey (key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key')\n    }\n    return secp256k1.publicKeyConvert(key, true)\n  }\n\n  function decompressPublicKey (key) {\n    return secp256k1.publicKeyConvert(key, false)\n  }\n\n  function validatePrivateKey (key) {\n    if (!secp256k1.privateKeyVerify(key)) {\n      throw new Error('Invalid private key')\n    }\n  }\n\n  function validatePublicKey (key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key')\n    }\n  }\n\n  function computePublicKey (privateKey) {\n    validatePrivateKey(privateKey)\n    return secp256k1.publicKeyCreate(privateKey)\n  }\n\n  return {\n    generateKey: generateKey,\n    privateKeyLength: privateKeyLength,\n    hashAndSign: hashAndSign,\n    hashAndVerify: hashAndVerify,\n    compressPublicKey: compressPublicKey,\n    decompressPublicKey: decompressPublicKey,\n    validatePrivateKey: validatePrivateKey,\n    validatePublicKey: validatePublicKey,\n    computePublicKey: computePublicKey\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}