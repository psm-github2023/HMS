{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst {\n  Buffer\n} = require('buffer');\nconst util = require('./util');\n\n/**\n * Resolves a path within a CBOR block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Buffer} binaryBlob - Binary representation of a CBOR block\n * @param {string} [path='/'] - Path that should be resolved\n * @returns {Object} result - Result of the path it it was resolved successfully\n * @returns {*} result.value - Value the path resolves to\n * @returns {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving\n */\nexports.resolve = (binaryBlob, path) => {\n  let node = util.deserialize(binaryBlob);\n  const parts = path.split('/').filter(Boolean);\n  while (parts.length) {\n    const key = parts.shift();\n    if (node[key] === undefined) {\n      throw new Error(`Object has no property '${key}'`);\n    }\n    node = node[key];\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      };\n    }\n  }\n  return {\n    value: node,\n    remainderPath: ''\n  };\n};\nconst traverse = function* (node, path) {\n  // Traverse only objects and arrays\n  if (Buffer.isBuffer(node) || CID.isCID(node) || typeof node === 'string' || node === null) {\n    return;\n  }\n  for (const item of Object.keys(node)) {\n    const nextpath = path === undefined ? item : path + '/' + item;\n    yield nextpath;\n    yield* traverse(node[item], nextpath);\n  }\n};\n\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Buffer} binaryBlob - Binary representation of a CBOR block\n * @yields {string} - A single path\n */\nexports.tree = function* (binaryBlob) {\n  const node = util.deserialize(binaryBlob);\n  yield* traverse(node);\n};","map":{"version":3,"names":["CID","require","Buffer","util","exports","resolve","binaryBlob","path","node","deserialize","parts","split","filter","Boolean","length","key","shift","undefined","Error","isCID","value","remainderPath","join","traverse","isBuffer","item","Object","keys","nextpath","tree"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipld-dag-cbor/src/resolver.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { Buffer } = require('buffer')\nconst util = require('./util')\n\n/**\n * Resolves a path within a CBOR block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Buffer} binaryBlob - Binary representation of a CBOR block\n * @param {string} [path='/'] - Path that should be resolved\n * @returns {Object} result - Result of the path it it was resolved successfully\n * @returns {*} result.value - Value the path resolves to\n * @returns {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving\n */\nexports.resolve = (binaryBlob, path) => {\n  let node = util.deserialize(binaryBlob)\n\n  const parts = path.split('/').filter(Boolean)\n  while (parts.length) {\n    const key = parts.shift()\n    if (node[key] === undefined) {\n      throw new Error(`Object has no property '${key}'`)\n    }\n\n    node = node[key]\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      }\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  }\n}\n\nconst traverse = function * (node, path) {\n  // Traverse only objects and arrays\n  if (Buffer.isBuffer(node) || CID.isCID(node) || typeof node === 'string' ||\n      node === null) {\n    return\n  }\n  for (const item of Object.keys(node)) {\n    const nextpath = path === undefined ? item : path + '/' + item\n    yield nextpath\n    yield * traverse(node[item], nextpath)\n  }\n}\n\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Buffer} binaryBlob - Binary representation of a CBOR block\n * @yields {string} - A single path\n */\nexports.tree = function * (binaryBlob) {\n  const node = util.deserialize(binaryBlob)\n\n  yield * traverse(node)\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC;AACpC,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,OAAO,CAACC,OAAO,GAAG,CAACC,UAAU,EAAEC,IAAI,KAAK;EACtC,IAAIC,IAAI,GAAGL,IAAI,CAACM,WAAW,CAACH,UAAU,CAAC;EAEvC,MAAMI,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;EAC7C,OAAOH,KAAK,CAACI,MAAM,EAAE;IACnB,MAAMC,GAAG,GAAGL,KAAK,CAACM,KAAK,CAAC,CAAC;IACzB,IAAIR,IAAI,CAACO,GAAG,CAAC,KAAKE,SAAS,EAAE;MAC3B,MAAM,IAAIC,KAAK,CAAE,2BAA0BH,GAAI,GAAE,CAAC;IACpD;IAEAP,IAAI,GAAGA,IAAI,CAACO,GAAG,CAAC;IAChB,IAAIf,GAAG,CAACmB,KAAK,CAACX,IAAI,CAAC,EAAE;MACnB,OAAO;QACLY,KAAK,EAAEZ,IAAI;QACXa,aAAa,EAAEX,KAAK,CAACY,IAAI,CAAC,GAAG;MAC/B,CAAC;IACH;EACF;EAEA,OAAO;IACLF,KAAK,EAAEZ,IAAI;IACXa,aAAa,EAAE;EACjB,CAAC;AACH,CAAC;AAED,MAAME,QAAQ,GAAG,UAAAA,CAAYf,IAAI,EAAED,IAAI,EAAE;EACvC;EACA,IAAIL,MAAM,CAACsB,QAAQ,CAAChB,IAAI,CAAC,IAAIR,GAAG,CAACmB,KAAK,CAACX,IAAI,CAAC,IAAI,OAAOA,IAAI,KAAK,QAAQ,IACpEA,IAAI,KAAK,IAAI,EAAE;IACjB;EACF;EACA,KAAK,MAAMiB,IAAI,IAAIC,MAAM,CAACC,IAAI,CAACnB,IAAI,CAAC,EAAE;IACpC,MAAMoB,QAAQ,GAAGrB,IAAI,KAAKU,SAAS,GAAGQ,IAAI,GAAGlB,IAAI,GAAG,GAAG,GAAGkB,IAAI;IAC9D,MAAMG,QAAQ;IACd,OAAQL,QAAQ,CAACf,IAAI,CAACiB,IAAI,CAAC,EAAEG,QAAQ,CAAC;EACxC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAxB,OAAO,CAACyB,IAAI,GAAG,WAAYvB,UAAU,EAAE;EACrC,MAAME,IAAI,GAAGL,IAAI,CAACM,WAAW,CAACH,UAAU,CAAC;EAEzC,OAAQiB,QAAQ,CAACf,IAAI,CAAC;AACxB,CAAC"},"metadata":{},"sourceType":"script"}