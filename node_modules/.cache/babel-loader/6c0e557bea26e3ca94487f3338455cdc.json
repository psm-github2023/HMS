{"ast":null,"code":"'use strict';\n\nconst cleanCID = require('../utils/clean-cid');\nconst TarStreamToObjects = require('../utils/tar-stream-to-objects');\nconst v = require('is-ipfs');\nconst pull = require('pull-stream/pull');\nconst map = require('pull-stream/throughs/map');\nconst toPull = require('stream-to-pull-stream');\nconst deferred = require('pull-defer');\nmodule.exports = send => {\n  return (path, opts) => {\n    opts = opts || {};\n    const p = deferred.source();\n    try {\n      path = cleanCID(path);\n    } catch (err) {\n      if (!v.ipfsPath(path)) {\n        return p.end(err);\n      }\n    }\n    const request = {\n      path: 'get',\n      args: path,\n      qs: opts\n    };\n\n    // Convert the response stream to TarStream objects\n    send.andTransform(request, TarStreamToObjects, (err, stream) => {\n      if (err) {\n        return p.end(err);\n      }\n      p.resolve(pull(toPull.source(stream), map(file => {\n        const {\n          path,\n          content\n        } = file;\n        return content ? {\n          path,\n          content: toPull.source(content)\n        } : file;\n      })));\n    });\n    return p;\n  };\n};","map":{"version":3,"names":["cleanCID","require","TarStreamToObjects","v","pull","map","toPull","deferred","module","exports","send","path","opts","p","source","err","ipfsPath","end","request","args","qs","andTransform","stream","resolve","file","content"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/files-regular/get-pull-stream.js"],"sourcesContent":["'use strict'\n\nconst cleanCID = require('../utils/clean-cid')\nconst TarStreamToObjects = require('../utils/tar-stream-to-objects')\nconst v = require('is-ipfs')\nconst pull = require('pull-stream/pull')\nconst map = require('pull-stream/throughs/map')\nconst toPull = require('stream-to-pull-stream')\nconst deferred = require('pull-defer')\n\nmodule.exports = (send) => {\n  return (path, opts) => {\n    opts = opts || {}\n\n    const p = deferred.source()\n\n    try {\n      path = cleanCID(path)\n    } catch (err) {\n      if (!v.ipfsPath(path)) {\n        return p.end(err)\n      }\n    }\n\n    const request = { path: 'get', args: path, qs: opts }\n\n    // Convert the response stream to TarStream objects\n    send.andTransform(request, TarStreamToObjects, (err, stream) => {\n      if (err) { return p.end(err) }\n\n      p.resolve(\n        pull(\n          toPull.source(stream),\n          map(file => {\n            const { path, content } = file\n            return content ? { path, content: toPull.source(content) } : file\n          })\n        )\n      )\n    })\n\n    return p\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC9C,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,gCAAgC,CAAC;AACpE,MAAME,CAAC,GAAGF,OAAO,CAAC,SAAS,CAAC;AAC5B,MAAMG,IAAI,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AACxC,MAAMI,GAAG,GAAGJ,OAAO,CAAC,0BAA0B,CAAC;AAC/C,MAAMK,MAAM,GAAGL,OAAO,CAAC,uBAAuB,CAAC;AAC/C,MAAMM,QAAQ,GAAGN,OAAO,CAAC,YAAY,CAAC;AAEtCO,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAO,CAACC,IAAI,EAAEC,IAAI,KAAK;IACrBA,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;IAEjB,MAAMC,CAAC,GAAGN,QAAQ,CAACO,MAAM,CAAC,CAAC;IAE3B,IAAI;MACFH,IAAI,GAAGX,QAAQ,CAACW,IAAI,CAAC;IACvB,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZ,IAAI,CAACZ,CAAC,CAACa,QAAQ,CAACL,IAAI,CAAC,EAAE;QACrB,OAAOE,CAAC,CAACI,GAAG,CAACF,GAAG,CAAC;MACnB;IACF;IAEA,MAAMG,OAAO,GAAG;MAAEP,IAAI,EAAE,KAAK;MAAEQ,IAAI,EAAER,IAAI;MAAES,EAAE,EAAER;IAAK,CAAC;;IAErD;IACAF,IAAI,CAACW,YAAY,CAACH,OAAO,EAAEhB,kBAAkB,EAAE,CAACa,GAAG,EAAEO,MAAM,KAAK;MAC9D,IAAIP,GAAG,EAAE;QAAE,OAAOF,CAAC,CAACI,GAAG,CAACF,GAAG,CAAC;MAAC;MAE7BF,CAAC,CAACU,OAAO,CACPnB,IAAI,CACFE,MAAM,CAACQ,MAAM,CAACQ,MAAM,CAAC,EACrBjB,GAAG,CAACmB,IAAI,IAAI;QACV,MAAM;UAAEb,IAAI;UAAEc;QAAQ,CAAC,GAAGD,IAAI;QAC9B,OAAOC,OAAO,GAAG;UAAEd,IAAI;UAAEc,OAAO,EAAEnB,MAAM,CAACQ,MAAM,CAACW,OAAO;QAAE,CAAC,GAAGD,IAAI;MACnE,CAAC,CACH,CACF,CAAC;IACH,CAAC,CAAC;IAEF,OAAOX,CAAC;EACV,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script"}