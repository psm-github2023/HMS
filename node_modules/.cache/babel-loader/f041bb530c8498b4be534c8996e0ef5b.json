{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\nconst multiaddr = require('multiaddr');\nconst PeerId = require('peer-id');\nconst PeerInfo = require('peer-info');\nconst errcode = require('err-code');\nmodule.exports = send => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    const handleResult = (res, callback) => {\n      // Inconsistent return values in the browser\n      if (Array.isArray(res)) {\n        res = res.find(r => r.Type === 2);\n      }\n\n      // Type 2 keys\n      // 2 = FinalPeer\n      // https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L18\n      if (!res || res.Type !== 2) {\n        const errMsg = `key was not found (type 4)`;\n        return callback(errcode(new Error(errMsg), 'ERR_KEY_TYPE_4_NOT_FOUND'));\n      }\n      const responseReceived = res.Responses[0];\n      const peerInfo = new PeerInfo(PeerId.createFromB58String(responseReceived.ID));\n      responseReceived.Addrs.forEach(addr => {\n        const ma = multiaddr(addr);\n        peerInfo.multiaddrs.add(ma);\n      });\n      callback(null, peerInfo);\n    };\n    send({\n      path: 'dht/findpeer',\n      args: peerId.toString(),\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","streamToValueWithTransformer","multiaddr","PeerId","PeerInfo","errcode","module","exports","send","peerId","opts","callback","handleResult","res","Array","isArray","find","r","Type","errMsg","Error","responseReceived","Responses","peerInfo","createFromB58String","ID","Addrs","forEach","addr","ma","multiaddrs","add","path","args","toString","qs","err","result"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/dht/findpeer.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer')\n\nconst multiaddr = require('multiaddr')\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst errcode = require('err-code')\n\nmodule.exports = (send) => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    const handleResult = (res, callback) => {\n      // Inconsistent return values in the browser\n      if (Array.isArray(res)) {\n        res = res.find(r => r.Type === 2)\n      }\n\n      // Type 2 keys\n      // 2 = FinalPeer\n      // https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L18\n      if (!res || res.Type !== 2) {\n        const errMsg = `key was not found (type 4)`\n        return callback(errcode(new Error(errMsg), 'ERR_KEY_TYPE_4_NOT_FOUND'))\n      }\n\n      const responseReceived = res.Responses[0]\n      const peerInfo = new PeerInfo(PeerId.createFromB58String(responseReceived.ID))\n\n      responseReceived.Addrs.forEach((addr) => {\n        const ma = multiaddr(addr)\n\n        peerInfo.multiaddrs.add(ma)\n      })\n\n      callback(null, peerInfo)\n    }\n\n    send({\n      path: 'dht/findpeer',\n      args: peerId.toString(),\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback)\n    })\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,4BAA4B,GAAGD,OAAO,CAAC,2CAA2C,CAAC;AAEzF,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMG,MAAM,GAAGH,OAAO,CAAC,SAAS,CAAC;AACjC,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAW,CAAC;AACrC,MAAMK,OAAO,GAAGL,OAAO,CAAC,UAAU,CAAC;AAEnCM,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAOT,SAAS,CAAC,CAACU,MAAM,EAAEC,IAAI,EAAEC,QAAQ,KAAK;IAC3C,IAAI,OAAOD,IAAI,KAAK,UAAU,IAAI,CAACC,QAAQ,EAAE;MAC3CA,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;;IAEA;IACA;IACA,IAAI,OAAOA,IAAI,KAAK,UAAU,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;MAChEA,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IAEA,MAAME,YAAY,GAAGA,CAACC,GAAG,EAAEF,QAAQ,KAAK;MACtC;MACA,IAAIG,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;QACtBA,GAAG,GAAGA,GAAG,CAACG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,CAAC,CAAC;MACnC;;MAEA;MACA;MACA;MACA,IAAI,CAACL,GAAG,IAAIA,GAAG,CAACK,IAAI,KAAK,CAAC,EAAE;QAC1B,MAAMC,MAAM,GAAI,4BAA2B;QAC3C,OAAOR,QAAQ,CAACN,OAAO,CAAC,IAAIe,KAAK,CAACD,MAAM,CAAC,EAAE,0BAA0B,CAAC,CAAC;MACzE;MAEA,MAAME,gBAAgB,GAAGR,GAAG,CAACS,SAAS,CAAC,CAAC,CAAC;MACzC,MAAMC,QAAQ,GAAG,IAAInB,QAAQ,CAACD,MAAM,CAACqB,mBAAmB,CAACH,gBAAgB,CAACI,EAAE,CAAC,CAAC;MAE9EJ,gBAAgB,CAACK,KAAK,CAACC,OAAO,CAAEC,IAAI,IAAK;QACvC,MAAMC,EAAE,GAAG3B,SAAS,CAAC0B,IAAI,CAAC;QAE1BL,QAAQ,CAACO,UAAU,CAACC,GAAG,CAACF,EAAE,CAAC;MAC7B,CAAC,CAAC;MAEFlB,QAAQ,CAAC,IAAI,EAAEY,QAAQ,CAAC;IAC1B,CAAC;IAEDf,IAAI,CAAC;MACHwB,IAAI,EAAE,cAAc;MACpBC,IAAI,EAAExB,MAAM,CAACyB,QAAQ,CAAC,CAAC;MACvBC,EAAE,EAAEzB;IACN,CAAC,EAAE,CAAC0B,GAAG,EAAEC,MAAM,KAAK;MAClB,IAAID,GAAG,EAAE;QACP,OAAOzB,QAAQ,CAACyB,GAAG,CAAC;MACtB;MAEAnC,4BAA4B,CAACoC,MAAM,EAAEzB,YAAY,EAAED,QAAQ,CAAC;IAC9D,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}