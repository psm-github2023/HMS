{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst blake = require('blakejs');\nconst minB = 0xb201;\nconst minS = 0xb241;\nconst blake2b = {\n  init: blake.blake2bInit,\n  update: blake.blake2bUpdate,\n  digest: blake.blake2bFinal\n};\nconst blake2s = {\n  init: blake.blake2sInit,\n  update: blake.blake2sUpdate,\n  digest: blake.blake2sFinal\n};\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\nconst makeB2Hash = (size, hf) => async data => {\n  const ctx = hf.init(size, null);\n  hf.update(ctx, data);\n  return Buffer.from(hf.digest(ctx));\n};\nmodule.exports = table => {\n  for (let i = 0; i < 64; i++) {\n    table[minB + i] = makeB2Hash(i + 1, blake2b);\n  }\n  for (let i = 0; i < 32; i++) {\n    table[minS + i] = makeB2Hash(i + 1, blake2s);\n  }\n};","map":{"version":3,"names":["Buffer","require","blake","minB","minS","blake2b","init","blake2bInit","update","blake2bUpdate","digest","blake2bFinal","blake2s","blake2sInit","blake2sUpdate","blake2sFinal","makeB2Hash","size","hf","data","ctx","from","module","exports","table","i"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipld-dag-pb/node_modules/multihashing-async/src/blake.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst blake = require('blakejs')\n\nconst minB = 0xb201\nconst minS = 0xb241\n\nconst blake2b = {\n  init: blake.blake2bInit,\n  update: blake.blake2bUpdate,\n  digest: blake.blake2bFinal\n}\n\nconst blake2s = {\n  init: blake.blake2sInit,\n  update: blake.blake2sUpdate,\n  digest: blake.blake2sFinal\n}\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\nconst makeB2Hash = (size, hf) => async (data) => {\n  const ctx = hf.init(size, null)\n  hf.update(ctx, data)\n  return Buffer.from(hf.digest(ctx))\n}\n\nmodule.exports = (table) => {\n  for (let i = 0; i < 64; i++) {\n    table[minB + i] = makeB2Hash(i + 1, blake2b)\n  }\n  for (let i = 0; i < 32; i++) {\n    table[minS + i] = makeB2Hash(i + 1, blake2s)\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACpC,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAS,CAAC;AAEhC,MAAME,IAAI,GAAG,MAAM;AACnB,MAAMC,IAAI,GAAG,MAAM;AAEnB,MAAMC,OAAO,GAAG;EACdC,IAAI,EAAEJ,KAAK,CAACK,WAAW;EACvBC,MAAM,EAAEN,KAAK,CAACO,aAAa;EAC3BC,MAAM,EAAER,KAAK,CAACS;AAChB,CAAC;AAED,MAAMC,OAAO,GAAG;EACdN,IAAI,EAAEJ,KAAK,CAACW,WAAW;EACvBL,MAAM,EAAEN,KAAK,CAACY,aAAa;EAC3BJ,MAAM,EAAER,KAAK,CAACa;AAChB,CAAC;;AAED;AACA;AACA;AACA,MAAMC,UAAU,GAAGA,CAACC,IAAI,EAAEC,EAAE,KAAK,MAAOC,IAAI,IAAK;EAC/C,MAAMC,GAAG,GAAGF,EAAE,CAACZ,IAAI,CAACW,IAAI,EAAE,IAAI,CAAC;EAC/BC,EAAE,CAACV,MAAM,CAACY,GAAG,EAAED,IAAI,CAAC;EACpB,OAAOnB,MAAM,CAACqB,IAAI,CAACH,EAAE,CAACR,MAAM,CAACU,GAAG,CAAC,CAAC;AACpC,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAIC,KAAK,IAAK;EAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3BD,KAAK,CAACrB,IAAI,GAAGsB,CAAC,CAAC,GAAGT,UAAU,CAACS,CAAC,GAAG,CAAC,EAAEpB,OAAO,CAAC;EAC9C;EACA,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3BD,KAAK,CAACpB,IAAI,GAAGqB,CAAC,CAAC,GAAGT,UAAU,CAACS,CAAC,GAAG,CAAC,EAAEb,OAAO,CAAC;EAC9C;AACF,CAAC"},"metadata":{},"sourceType":"script"}