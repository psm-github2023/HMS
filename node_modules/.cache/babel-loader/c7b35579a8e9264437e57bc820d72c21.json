{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst sha3 = require('js-sha3');\nconst mur = require('murmurhash3js-revisited');\nconst sha = require('./sha');\nconst {\n  fromNumberTo32BitBuf\n} = require('./utils');\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\nconst hash = algorithm => async data => {\n  switch (algorithm) {\n    case 'sha3-224':\n      return Buffer.from(sha3.sha3_224.arrayBuffer(data));\n    case 'sha3-256':\n      return Buffer.from(sha3.sha3_256.arrayBuffer(data));\n    case 'sha3-384':\n      return Buffer.from(sha3.sha3_384.arrayBuffer(data));\n    case 'sha3-512':\n      return Buffer.from(sha3.sha3_512.arrayBuffer(data));\n    case 'shake-128':\n      return Buffer.from(sha3.shake128.create(128).update(data).arrayBuffer());\n    case 'shake-256':\n      return Buffer.from(sha3.shake256.create(256).update(data).arrayBuffer());\n    case 'keccak-224':\n      return Buffer.from(sha3.keccak224.arrayBuffer(data));\n    case 'keccak-256':\n      return Buffer.from(sha3.keccak256.arrayBuffer(data));\n    case 'keccak-384':\n      return Buffer.from(sha3.keccak384.arrayBuffer(data));\n    case 'keccak-512':\n      return Buffer.from(sha3.keccak512.arrayBuffer(data));\n    case 'murmur3-128':\n      return Buffer.from(mur.x64.hash128(data), 'hex');\n    case 'murmur3-32':\n      return fromNumberTo32BitBuf(mur.x86.hash32(data));\n    default:\n      throw new TypeError(`${algorithm} is not a supported algorithm`);\n  }\n};\nmodule.exports = {\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n};","map":{"version":3,"names":["Buffer","require","sha3","mur","sha","fromNumberTo32BitBuf","hash","algorithm","data","from","sha3_224","arrayBuffer","sha3_256","sha3_384","sha3_512","shake128","create","update","shake256","keccak224","keccak256","keccak384","keccak512","x64","hash128","x86","hash32","TypeError","module","exports","sha1","sha2256","sha2512","dblSha2256","sha3224","sha3256","sha3384","sha3512","murmur3128","murmur332","addBlake"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipld-dag-pb/node_modules/multihashing-async/src/crypto.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst sha3 = require('js-sha3')\nconst mur = require('murmurhash3js-revisited')\nconst sha = require('./sha')\nconst { fromNumberTo32BitBuf } = require('./utils')\n\n// Note that although this function doesn't do any asynchronous work, we mark\n// the function as async because it must return a Promise to match the API\n// for other functions that do perform asynchronous work (see sha.browser.js)\nconst hash = (algorithm) => async (data) => {\n  switch (algorithm) {\n    case 'sha3-224':\n      return Buffer.from(sha3.sha3_224.arrayBuffer(data))\n    case 'sha3-256':\n      return Buffer.from(sha3.sha3_256.arrayBuffer(data))\n    case 'sha3-384':\n      return Buffer.from(sha3.sha3_384.arrayBuffer(data))\n    case 'sha3-512':\n      return Buffer.from(sha3.sha3_512.arrayBuffer(data))\n    case 'shake-128':\n      return Buffer.from(sha3.shake128.create(128).update(data).arrayBuffer())\n    case 'shake-256':\n      return Buffer.from(sha3.shake256.create(256).update(data).arrayBuffer())\n    case 'keccak-224':\n      return Buffer.from(sha3.keccak224.arrayBuffer(data))\n    case 'keccak-256':\n      return Buffer.from(sha3.keccak256.arrayBuffer(data))\n    case 'keccak-384':\n      return Buffer.from(sha3.keccak384.arrayBuffer(data))\n    case 'keccak-512':\n      return Buffer.from(sha3.keccak512.arrayBuffer(data))\n    case 'murmur3-128':\n      return Buffer.from(mur.x64.hash128(data), 'hex')\n    case 'murmur3-32':\n      return fromNumberTo32BitBuf(mur.x86.hash32(data))\n\n    default:\n      throw new TypeError(`${algorithm} is not a supported algorithm`)\n  }\n}\n\nmodule.exports = {\n  sha1: sha('sha1'),\n  sha2256: sha('sha2-256'),\n  sha2512: sha('sha2-512'),\n  dblSha2256: sha('dbl-sha2-256'),\n  sha3224: hash('sha3-224'),\n  sha3256: hash('sha3-256'),\n  sha3384: hash('sha3-384'),\n  sha3512: hash('sha3-512'),\n  shake128: hash('shake-128'),\n  shake256: hash('shake-256'),\n  keccak224: hash('keccak-224'),\n  keccak256: hash('keccak-256'),\n  keccak384: hash('keccak-384'),\n  keccak512: hash('keccak-512'),\n  murmur3128: hash('murmur3-128'),\n  murmur332: hash('murmur3-32'),\n  addBlake: require('./blake')\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACpC,MAAMC,IAAI,GAAGD,OAAO,CAAC,SAAS,CAAC;AAC/B,MAAME,GAAG,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AAC9C,MAAMG,GAAG,GAAGH,OAAO,CAAC,OAAO,CAAC;AAC5B,MAAM;EAAEI;AAAqB,CAAC,GAAGJ,OAAO,CAAC,SAAS,CAAC;;AAEnD;AACA;AACA;AACA,MAAMK,IAAI,GAAIC,SAAS,IAAK,MAAOC,IAAI,IAAK;EAC1C,QAAQD,SAAS;IACf,KAAK,UAAU;MACb,OAAOP,MAAM,CAACS,IAAI,CAACP,IAAI,CAACQ,QAAQ,CAACC,WAAW,CAACH,IAAI,CAAC,CAAC;IACrD,KAAK,UAAU;MACb,OAAOR,MAAM,CAACS,IAAI,CAACP,IAAI,CAACU,QAAQ,CAACD,WAAW,CAACH,IAAI,CAAC,CAAC;IACrD,KAAK,UAAU;MACb,OAAOR,MAAM,CAACS,IAAI,CAACP,IAAI,CAACW,QAAQ,CAACF,WAAW,CAACH,IAAI,CAAC,CAAC;IACrD,KAAK,UAAU;MACb,OAAOR,MAAM,CAACS,IAAI,CAACP,IAAI,CAACY,QAAQ,CAACH,WAAW,CAACH,IAAI,CAAC,CAAC;IACrD,KAAK,WAAW;MACd,OAAOR,MAAM,CAACS,IAAI,CAACP,IAAI,CAACa,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC,CAACC,MAAM,CAACT,IAAI,CAAC,CAACG,WAAW,CAAC,CAAC,CAAC;IAC1E,KAAK,WAAW;MACd,OAAOX,MAAM,CAACS,IAAI,CAACP,IAAI,CAACgB,QAAQ,CAACF,MAAM,CAAC,GAAG,CAAC,CAACC,MAAM,CAACT,IAAI,CAAC,CAACG,WAAW,CAAC,CAAC,CAAC;IAC1E,KAAK,YAAY;MACf,OAAOX,MAAM,CAACS,IAAI,CAACP,IAAI,CAACiB,SAAS,CAACR,WAAW,CAACH,IAAI,CAAC,CAAC;IACtD,KAAK,YAAY;MACf,OAAOR,MAAM,CAACS,IAAI,CAACP,IAAI,CAACkB,SAAS,CAACT,WAAW,CAACH,IAAI,CAAC,CAAC;IACtD,KAAK,YAAY;MACf,OAAOR,MAAM,CAACS,IAAI,CAACP,IAAI,CAACmB,SAAS,CAACV,WAAW,CAACH,IAAI,CAAC,CAAC;IACtD,KAAK,YAAY;MACf,OAAOR,MAAM,CAACS,IAAI,CAACP,IAAI,CAACoB,SAAS,CAACX,WAAW,CAACH,IAAI,CAAC,CAAC;IACtD,KAAK,aAAa;MAChB,OAAOR,MAAM,CAACS,IAAI,CAACN,GAAG,CAACoB,GAAG,CAACC,OAAO,CAAChB,IAAI,CAAC,EAAE,KAAK,CAAC;IAClD,KAAK,YAAY;MACf,OAAOH,oBAAoB,CAACF,GAAG,CAACsB,GAAG,CAACC,MAAM,CAAClB,IAAI,CAAC,CAAC;IAEnD;MACE,MAAM,IAAImB,SAAS,CAAE,GAAEpB,SAAU,+BAA8B,CAAC;EACpE;AACF,CAAC;AAEDqB,MAAM,CAACC,OAAO,GAAG;EACfC,IAAI,EAAE1B,GAAG,CAAC,MAAM,CAAC;EACjB2B,OAAO,EAAE3B,GAAG,CAAC,UAAU,CAAC;EACxB4B,OAAO,EAAE5B,GAAG,CAAC,UAAU,CAAC;EACxB6B,UAAU,EAAE7B,GAAG,CAAC,cAAc,CAAC;EAC/B8B,OAAO,EAAE5B,IAAI,CAAC,UAAU,CAAC;EACzB6B,OAAO,EAAE7B,IAAI,CAAC,UAAU,CAAC;EACzB8B,OAAO,EAAE9B,IAAI,CAAC,UAAU,CAAC;EACzB+B,OAAO,EAAE/B,IAAI,CAAC,UAAU,CAAC;EACzBS,QAAQ,EAAET,IAAI,CAAC,WAAW,CAAC;EAC3BY,QAAQ,EAAEZ,IAAI,CAAC,WAAW,CAAC;EAC3Ba,SAAS,EAAEb,IAAI,CAAC,YAAY,CAAC;EAC7Bc,SAAS,EAAEd,IAAI,CAAC,YAAY,CAAC;EAC7Be,SAAS,EAAEf,IAAI,CAAC,YAAY,CAAC;EAC7BgB,SAAS,EAAEhB,IAAI,CAAC,YAAY,CAAC;EAC7BgC,UAAU,EAAEhC,IAAI,CAAC,aAAa,CAAC;EAC/BiC,SAAS,EAAEjC,IAAI,CAAC,YAAY,CAAC;EAC7BkC,QAAQ,EAAEvC,OAAO,CAAC,SAAS;AAC7B,CAAC"},"metadata":{},"sourceType":"script"}