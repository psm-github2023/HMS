{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nmodule.exports = send => {\n  return promisify((key, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    function handleResult(done, err, res) {\n      if (err) {\n        return done(err);\n      }\n      if (!res) {\n        return done(new Error('empty response'));\n      }\n      if (res.length === 0) {\n        return done(new Error('no value returned for key'));\n      }\n\n      // Inconsistent return values in the browser vs node\n      if (Array.isArray(res)) {\n        res = res[0];\n      }\n      if (res.Type === 5) {\n        done(null, res.Extra);\n      } else {\n        let error = new Error('key was not found (type 6)');\n        done(error);\n      }\n    }\n    send({\n      path: 'dht/get',\n      args: key,\n      qs: opts\n    }, handleResult.bind(null, callback));\n  });\n};","map":{"version":3,"names":["promisify","require","module","exports","send","key","opts","callback","handleResult","done","err","res","Error","length","Array","isArray","Type","Extra","error","path","args","qs","bind"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/dht/get.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\n\nmodule.exports = (send) => {\n  return promisify((key, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    function handleResult (done, err, res) {\n      if (err) {\n        return done(err)\n      }\n      if (!res) {\n        return done(new Error('empty response'))\n      }\n      if (res.length === 0) {\n        return done(new Error('no value returned for key'))\n      }\n\n      // Inconsistent return values in the browser vs node\n      if (Array.isArray(res)) {\n        res = res[0]\n      }\n\n      if (res.Type === 5) {\n        done(null, res.Extra)\n      } else {\n        let error = new Error('key was not found (type 6)')\n        done(error)\n      }\n    }\n\n    send({\n      path: 'dht/get',\n      args: key,\n      qs: opts\n    }, handleResult.bind(null, callback))\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE1CC,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAOJ,SAAS,CAAC,CAACK,GAAG,EAAEC,IAAI,EAAEC,QAAQ,KAAK;IACxC,IAAI,OAAOD,IAAI,KAAK,UAAU,IAAI,CAACC,QAAQ,EAAE;MAC3CA,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;;IAEA;IACA;IACA,IAAI,OAAOA,IAAI,KAAK,UAAU,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;MAChEA,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IAEA,SAASE,YAAYA,CAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAE;MACrC,IAAID,GAAG,EAAE;QACP,OAAOD,IAAI,CAACC,GAAG,CAAC;MAClB;MACA,IAAI,CAACC,GAAG,EAAE;QACR,OAAOF,IAAI,CAAC,IAAIG,KAAK,CAAC,gBAAgB,CAAC,CAAC;MAC1C;MACA,IAAID,GAAG,CAACE,MAAM,KAAK,CAAC,EAAE;QACpB,OAAOJ,IAAI,CAAC,IAAIG,KAAK,CAAC,2BAA2B,CAAC,CAAC;MACrD;;MAEA;MACA,IAAIE,KAAK,CAACC,OAAO,CAACJ,GAAG,CAAC,EAAE;QACtBA,GAAG,GAAGA,GAAG,CAAC,CAAC,CAAC;MACd;MAEA,IAAIA,GAAG,CAACK,IAAI,KAAK,CAAC,EAAE;QAClBP,IAAI,CAAC,IAAI,EAAEE,GAAG,CAACM,KAAK,CAAC;MACvB,CAAC,MAAM;QACL,IAAIC,KAAK,GAAG,IAAIN,KAAK,CAAC,4BAA4B,CAAC;QACnDH,IAAI,CAACS,KAAK,CAAC;MACb;IACF;IAEAd,IAAI,CAAC;MACHe,IAAI,EAAE,SAAS;MACfC,IAAI,EAAEf,GAAG;MACTgB,EAAE,EAAEf;IACN,CAAC,EAAEE,YAAY,CAACc,IAAI,CAAC,IAAI,EAAEf,QAAQ,CAAC,CAAC;EACvC,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}