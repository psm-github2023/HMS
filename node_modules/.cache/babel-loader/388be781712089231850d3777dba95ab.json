{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\nvar createHash = require('create-hash');\nvar HmacDRBG = require('drbg.js/hmac');\nvar messages = require('../messages.json');\nvar BN = require('./bn');\nvar ECPoint = require('./ecpoint');\nvar g = require('./ecpointg');\nexports.privateKeyVerify = function (privateKey) {\n  var bn = BN.fromBuffer(privateKey);\n  return !(bn.isOverflow() || bn.isZero());\n};\nexports.privateKeyExport = function (privateKey, compressed) {\n  var d = BN.fromBuffer(privateKey);\n  if (d.isOverflow() || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL);\n  return g.mul(d).toPublicKey(compressed);\n};\nexports.privateKeyNegate = function (privateKey) {\n  var bn = BN.fromBuffer(privateKey);\n  if (bn.isZero()) return Buffer.alloc(32);\n  if (bn.ucmp(BN.n) > 0) bn.isub(BN.n);\n  return BN.n.sub(bn).toBuffer();\n};\nexports.privateKeyModInverse = function (privateKey) {\n  var bn = BN.fromBuffer(privateKey);\n  if (bn.isOverflow() || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID);\n  return bn.uinvm().toBuffer();\n};\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n  var bn = BN.fromBuffer(tweak);\n  if (bn.isOverflow()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);\n  bn.iadd(BN.fromBuffer(privateKey));\n  if (bn.isOverflow()) bn.isub(BN.n);\n  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);\n  return bn.toBuffer();\n};\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n  var bn = BN.fromBuffer(tweak);\n  if (bn.isOverflow() || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL);\n  var d = BN.fromBuffer(privateKey);\n  return bn.umul(d).ureduce().toBuffer();\n};\nexports.publicKeyCreate = function (privateKey, compressed) {\n  var d = BN.fromBuffer(privateKey);\n  if (d.isOverflow() || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL);\n  return g.mul(d).toPublicKey(compressed);\n};\nexports.publicKeyConvert = function (publicKey, compressed) {\n  var point = ECPoint.fromPublicKey(publicKey);\n  if (point === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);\n  return point.toPublicKey(compressed);\n};\nexports.publicKeyVerify = function (publicKey) {\n  return ECPoint.fromPublicKey(publicKey) !== null;\n};\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n  var point = ECPoint.fromPublicKey(publicKey);\n  if (point === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);\n  tweak = BN.fromBuffer(tweak);\n  if (tweak.isOverflow()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);\n  var result = g.mul(tweak).add(point);\n  if (result.inf) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);\n  return result.toPublicKey(compressed);\n};\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n  var point = ECPoint.fromPublicKey(publicKey);\n  if (point === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);\n  tweak = BN.fromBuffer(tweak);\n  if (tweak.isOverflow() || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL);\n  return point.mul(tweak).toPublicKey(compressed);\n};\nexports.publicKeyCombine = function (publicKeys, compressed) {\n  var points = new Array(publicKeys.length);\n  for (var i = 0; i < publicKeys.length; ++i) {\n    points[i] = ECPoint.fromPublicKey(publicKeys[i]);\n    if (points[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);\n  }\n  var point = points[0];\n  for (var j = 1; j < points.length; ++j) point = point.add(points[j]);\n  if (point.inf) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL);\n  return point.toPublicKey(compressed);\n};\nexports.signatureNormalize = function (signature) {\n  var r = BN.fromBuffer(signature.slice(0, 32));\n  var s = BN.fromBuffer(signature.slice(32, 64));\n  if (r.isOverflow() || s.isOverflow()) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);\n  var result = Buffer.from(signature);\n  if (s.isHigh()) BN.n.sub(s).toBuffer().copy(result, 32);\n  return result;\n};\nexports.signatureExport = function (signature) {\n  var r = signature.slice(0, 32);\n  var s = signature.slice(32, 64);\n  if (BN.fromBuffer(r).isOverflow() || BN.fromBuffer(s).isOverflow()) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);\n  return {\n    r: r,\n    s: s\n  };\n};\nexports.signatureImport = function (sigObj) {\n  var r = BN.fromBuffer(sigObj.r);\n  if (r.isOverflow()) r = BN.fromNumber(0);\n  var s = BN.fromBuffer(sigObj.s);\n  if (s.isOverflow()) s = BN.fromNumber(0);\n  return Buffer.concat([r.toBuffer(), s.toBuffer()]);\n};\nexports.sign = function (message, privateKey, noncefn, data) {\n  var d = BN.fromBuffer(privateKey);\n  if (d.isOverflow() || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL);\n  if (noncefn === null) {\n    var drbg = new HmacDRBG('sha256', privateKey, message, data);\n    noncefn = function () {\n      return drbg.generate(32);\n    };\n  }\n  var bnMessage = BN.fromBuffer(message);\n  for (var count = 0;; ++count) {\n    var nonce = noncefn(message, privateKey, null, data, count);\n    if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL);\n    var k = BN.fromBuffer(nonce);\n    if (k.isOverflow() || k.isZero()) continue;\n    var kp = g.mul(k);\n    var r = kp.x.fireduce();\n    if (r.isZero()) continue;\n    var s = k.uinvm().umul(r.umul(d).ureduce().iadd(bnMessage).fireduce()).ureduce();\n    if (s.isZero()) continue;\n    var recovery = (kp.x.ucmp(r) !== 0 ? 2 : 0) | (kp.y.isOdd() ? 1 : 0);\n    if (s.isHigh()) {\n      s = BN.n.sub(s);\n      recovery ^= 1;\n    }\n    return {\n      signature: Buffer.concat([r.toBuffer(), s.toBuffer()]),\n      recovery: recovery\n    };\n  }\n};\nexports.verify = function (message, signature, publicKey) {\n  var sigr = BN.fromBuffer(signature.slice(0, 32));\n  var sigs = BN.fromBuffer(signature.slice(32, 64));\n  if (sigr.isOverflow() || sigs.isOverflow()) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);\n  if (sigs.isHigh() || sigr.isZero() || sigs.isZero()) return false;\n  var pub = ECPoint.fromPublicKey(publicKey);\n  if (pub === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);\n  var sinv = sigs.uinvm();\n  var u1 = sinv.umul(BN.fromBuffer(message)).ureduce();\n  var u2 = sinv.umul(sigr).ureduce();\n  var point = g.mulAdd(u1, pub, u2);\n  if (point.inf) return false;\n\n  // return ECPoint.fromECJPoint(point).x.fireduce().ucmp(sigr) === 0\n  // Inversion-free\n  var z2 = point.z.redSqr();\n  if (sigr.redMul(z2).ucmp(point.x) === 0) return true;\n  if (sigr.ucmp(BN.psn) >= 0) return false;\n  return sigr.iadd(BN.psn).redMul(z2).ucmp(point.x) === 0;\n};\nexports.recover = function (message, signature, recovery, compressed) {\n  var sigr = BN.fromBuffer(signature.slice(0, 32));\n  var sigs = BN.fromBuffer(signature.slice(32, 64));\n  if (sigr.isOverflow() || sigs.isOverflow()) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);\n  do {\n    if (sigr.isZero() || sigs.isZero()) break;\n    var kpx = sigr;\n    if (recovery >> 1) {\n      if (kpx.ucmp(BN.psn) >= 0) break;\n      kpx = sigr.add(BN.n);\n    }\n    var kpPublicKey = Buffer.concat([Buffer.from([0x02 + (recovery & 0x01)]), kpx.toBuffer()]);\n    var kp = ECPoint.fromPublicKey(kpPublicKey);\n    if (kp === null) break;\n    var rInv = sigr.uinvm();\n    var s1 = BN.n.sub(BN.fromBuffer(message)).umul(rInv).ureduce();\n    var s2 = sigs.umul(rInv).ureduce();\n    var point = ECPoint.fromECJPoint(g.mulAdd(s1, kp, s2));\n    return point.toPublicKey(compressed);\n  } while (false);\n  throw new Error(messages.ECDSA_RECOVER_FAIL);\n};\nexports.ecdh = function (publicKey, privateKey) {\n  var shared = exports.ecdhUnsafe(publicKey, privateKey, true);\n  return createHash('sha256').update(shared).digest();\n};\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  var point = ECPoint.fromPublicKey(publicKey);\n  if (point === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);\n  var scalar = BN.fromBuffer(privateKey);\n  if (scalar.isOverflow() || scalar.isZero()) throw new Error(messages.ECDH_FAIL);\n  return point.mul(scalar).toPublicKey(compressed);\n};","map":{"version":3,"names":["Buffer","require","createHash","HmacDRBG","messages","BN","ECPoint","g","exports","privateKeyVerify","privateKey","bn","fromBuffer","isOverflow","isZero","privateKeyExport","compressed","d","Error","EC_PRIVATE_KEY_EXPORT_DER_FAIL","mul","toPublicKey","privateKeyNegate","alloc","ucmp","n","isub","sub","toBuffer","privateKeyModInverse","EC_PRIVATE_KEY_RANGE_INVALID","uinvm","privateKeyTweakAdd","tweak","EC_PRIVATE_KEY_TWEAK_ADD_FAIL","iadd","privateKeyTweakMul","EC_PRIVATE_KEY_TWEAK_MUL_FAIL","umul","ureduce","publicKeyCreate","EC_PUBLIC_KEY_CREATE_FAIL","publicKeyConvert","publicKey","point","fromPublicKey","EC_PUBLIC_KEY_PARSE_FAIL","publicKeyVerify","publicKeyTweakAdd","EC_PUBLIC_KEY_TWEAK_ADD_FAIL","result","add","inf","publicKeyTweakMul","EC_PUBLIC_KEY_TWEAK_MUL_FAIL","publicKeyCombine","publicKeys","points","Array","length","i","j","EC_PUBLIC_KEY_COMBINE_FAIL","signatureNormalize","signature","r","slice","s","ECDSA_SIGNATURE_PARSE_FAIL","from","isHigh","copy","signatureExport","signatureImport","sigObj","fromNumber","concat","sign","message","noncefn","data","ECDSA_SIGN_FAIL","drbg","generate","bnMessage","count","nonce","isBuffer","k","kp","x","fireduce","recovery","y","isOdd","verify","sigr","sigs","pub","sinv","u1","u2","mulAdd","z2","z","redSqr","redMul","psn","recover","kpx","kpPublicKey","rInv","s1","s2","fromECJPoint","ECDSA_RECOVER_FAIL","ecdh","shared","ecdhUnsafe","update","digest","scalar","ECDH_FAIL"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/libp2p-crypto-secp256k1/node_modules/secp256k1/lib/js/index.js"],"sourcesContent":["'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar createHash = require('create-hash')\nvar HmacDRBG = require('drbg.js/hmac')\nvar messages = require('../messages.json')\nvar BN = require('./bn')\nvar ECPoint = require('./ecpoint')\nvar g = require('./ecpointg')\n\nexports.privateKeyVerify = function (privateKey) {\n  var bn = BN.fromBuffer(privateKey)\n  return !(bn.isOverflow() || bn.isZero())\n}\n\nexports.privateKeyExport = function (privateKey, compressed) {\n  var d = BN.fromBuffer(privateKey)\n  if (d.isOverflow() || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)\n\n  return g.mul(d).toPublicKey(compressed)\n}\n\nexports.privateKeyNegate = function (privateKey) {\n  var bn = BN.fromBuffer(privateKey)\n  if (bn.isZero()) return Buffer.alloc(32)\n\n  if (bn.ucmp(BN.n) > 0) bn.isub(BN.n)\n  return BN.n.sub(bn).toBuffer()\n}\n\nexports.privateKeyModInverse = function (privateKey) {\n  var bn = BN.fromBuffer(privateKey)\n  if (bn.isOverflow() || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)\n\n  return bn.uinvm().toBuffer()\n}\n\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n  var bn = BN.fromBuffer(tweak)\n  if (bn.isOverflow()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  bn.iadd(BN.fromBuffer(privateKey))\n  if (bn.isOverflow()) bn.isub(BN.n)\n  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  return bn.toBuffer()\n}\n\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n  var bn = BN.fromBuffer(tweak)\n  if (bn.isOverflow() || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)\n\n  var d = BN.fromBuffer(privateKey)\n  return bn.umul(d).ureduce().toBuffer()\n}\n\nexports.publicKeyCreate = function (privateKey, compressed) {\n  var d = BN.fromBuffer(privateKey)\n  if (d.isOverflow() || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)\n\n  return g.mul(d).toPublicKey(compressed)\n}\n\nexports.publicKeyConvert = function (publicKey, compressed) {\n  var point = ECPoint.fromPublicKey(publicKey)\n  if (point === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return point.toPublicKey(compressed)\n}\n\nexports.publicKeyVerify = function (publicKey) {\n  return ECPoint.fromPublicKey(publicKey) !== null\n}\n\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n  var point = ECPoint.fromPublicKey(publicKey)\n  if (point === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = BN.fromBuffer(tweak)\n  if (tweak.isOverflow()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  var result = g.mul(tweak).add(point)\n  if (result.inf) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  return result.toPublicKey(compressed)\n}\n\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n  var point = ECPoint.fromPublicKey(publicKey)\n  if (point === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = BN.fromBuffer(tweak)\n  if (tweak.isOverflow() || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)\n\n  return point.mul(tweak).toPublicKey(compressed)\n}\n\nexports.publicKeyCombine = function (publicKeys, compressed) {\n  var points = new Array(publicKeys.length)\n  for (var i = 0; i < publicKeys.length; ++i) {\n    points[i] = ECPoint.fromPublicKey(publicKeys[i])\n    if (points[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n  }\n\n  var point = points[0]\n  for (var j = 1; j < points.length; ++j) point = point.add(points[j])\n  if (point.inf) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)\n\n  return point.toPublicKey(compressed)\n}\n\nexports.signatureNormalize = function (signature) {\n  var r = BN.fromBuffer(signature.slice(0, 32))\n  var s = BN.fromBuffer(signature.slice(32, 64))\n  if (r.isOverflow() || s.isOverflow()) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  var result = Buffer.from(signature)\n  if (s.isHigh()) BN.n.sub(s).toBuffer().copy(result, 32)\n\n  return result\n}\n\nexports.signatureExport = function (signature) {\n  var r = signature.slice(0, 32)\n  var s = signature.slice(32, 64)\n  if (BN.fromBuffer(r).isOverflow() || BN.fromBuffer(s).isOverflow()) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImport = function (sigObj) {\n  var r = BN.fromBuffer(sigObj.r)\n  if (r.isOverflow()) r = BN.fromNumber(0)\n\n  var s = BN.fromBuffer(sigObj.s)\n  if (s.isOverflow()) s = BN.fromNumber(0)\n\n  return Buffer.concat([r.toBuffer(), s.toBuffer()])\n}\n\nexports.sign = function (message, privateKey, noncefn, data) {\n  var d = BN.fromBuffer(privateKey)\n  if (d.isOverflow() || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n  if (noncefn === null) {\n    var drbg = new HmacDRBG('sha256', privateKey, message, data)\n    noncefn = function () { return drbg.generate(32) }\n  }\n\n  var bnMessage = BN.fromBuffer(message)\n  for (var count = 0; ; ++count) {\n    var nonce = noncefn(message, privateKey, null, data, count)\n    if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n    var k = BN.fromBuffer(nonce)\n    if (k.isOverflow() || k.isZero()) continue\n\n    var kp = g.mul(k)\n    var r = kp.x.fireduce()\n    if (r.isZero()) continue\n\n    var s = k.uinvm().umul(r.umul(d).ureduce().iadd(bnMessage).fireduce()).ureduce()\n    if (s.isZero()) continue\n\n    var recovery = (kp.x.ucmp(r) !== 0 ? 2 : 0) | (kp.y.isOdd() ? 1 : 0)\n    if (s.isHigh()) {\n      s = BN.n.sub(s)\n      recovery ^= 1\n    }\n\n    return {\n      signature: Buffer.concat([r.toBuffer(), s.toBuffer()]),\n      recovery: recovery\n    }\n  }\n}\n\nexports.verify = function (message, signature, publicKey) {\n  var sigr = BN.fromBuffer(signature.slice(0, 32))\n  var sigs = BN.fromBuffer(signature.slice(32, 64))\n  if (sigr.isOverflow() || sigs.isOverflow()) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  if (sigs.isHigh() || sigr.isZero() || sigs.isZero()) return false\n\n  var pub = ECPoint.fromPublicKey(publicKey)\n  if (pub === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  var sinv = sigs.uinvm()\n  var u1 = sinv.umul(BN.fromBuffer(message)).ureduce()\n  var u2 = sinv.umul(sigr).ureduce()\n  var point = g.mulAdd(u1, pub, u2)\n  if (point.inf) return false\n\n  // return ECPoint.fromECJPoint(point).x.fireduce().ucmp(sigr) === 0\n  // Inversion-free\n  var z2 = point.z.redSqr()\n  if (sigr.redMul(z2).ucmp(point.x) === 0) return true\n  if (sigr.ucmp(BN.psn) >= 0) return false\n\n  return sigr.iadd(BN.psn).redMul(z2).ucmp(point.x) === 0\n}\n\nexports.recover = function (message, signature, recovery, compressed) {\n  var sigr = BN.fromBuffer(signature.slice(0, 32))\n  var sigs = BN.fromBuffer(signature.slice(32, 64))\n  if (sigr.isOverflow() || sigs.isOverflow()) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  do {\n    if (sigr.isZero() || sigs.isZero()) break\n\n    var kpx = sigr\n    if (recovery >> 1) {\n      if (kpx.ucmp(BN.psn) >= 0) break\n      kpx = sigr.add(BN.n)\n    }\n\n    var kpPublicKey = Buffer.concat([Buffer.from([0x02 + (recovery & 0x01)]), kpx.toBuffer()])\n    var kp = ECPoint.fromPublicKey(kpPublicKey)\n    if (kp === null) break\n\n    var rInv = sigr.uinvm()\n    var s1 = BN.n.sub(BN.fromBuffer(message)).umul(rInv).ureduce()\n    var s2 = sigs.umul(rInv).ureduce()\n    var point = ECPoint.fromECJPoint(g.mulAdd(s1, kp, s2))\n    return point.toPublicKey(compressed)\n  } while (false)\n\n  throw new Error(messages.ECDSA_RECOVER_FAIL)\n}\n\nexports.ecdh = function (publicKey, privateKey) {\n  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)\n  return createHash('sha256').update(shared).digest()\n}\n\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  var point = ECPoint.fromPublicKey(publicKey)\n  if (point === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  var scalar = BN.fromBuffer(privateKey)\n  if (scalar.isOverflow() || scalar.isZero()) throw new Error(messages.ECDH_FAIL)\n\n  return point.mul(scalar).toPublicKey(compressed)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}