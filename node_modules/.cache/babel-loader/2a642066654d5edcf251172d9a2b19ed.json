{"ast":null,"code":"'use strict';\n\nconst asn1 = require('asn1.js');\nconst util = require('./../util');\nconst toBase64 = util.toBase64;\nconst toBn = util.toBn;\nconst RSAPrivateKey = asn1.define('RSAPrivateKey', function () {\n  this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());\n});\nconst AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {\n  this.seq().obj(this.key('algorithm').objid({\n    '1.2.840.113549.1.1.1': 'rsa'\n  }), this.key('none').optional().null_(), this.key('curve').optional().objid(), this.key('params').optional().seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()));\n});\nconst PublicKey = asn1.define('RSAPublicKey', function () {\n  this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());\n});\nconst RSAPublicKey = asn1.define('RSAPublicKey', function () {\n  this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());\n});\n\n// Convert a PKCS#1 in ASN1 DER format to a JWK key\nexports.pkcs1ToJwk = function (bytes) {\n  const asn1 = RSAPrivateKey.decode(bytes, 'der');\n  return {\n    kty: 'RSA',\n    n: toBase64(asn1.modulus),\n    e: toBase64(asn1.publicExponent),\n    d: toBase64(asn1.privateExponent),\n    p: toBase64(asn1.prime1),\n    q: toBase64(asn1.prime2),\n    dp: toBase64(asn1.exponent1),\n    dq: toBase64(asn1.exponent2),\n    qi: toBase64(asn1.coefficient),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  };\n};\n\n// Convert a JWK key into PKCS#1 in ASN1 DER format\nexports.jwkToPkcs1 = function (jwk) {\n  return RSAPrivateKey.encode({\n    version: 0,\n    modulus: toBn(jwk.n),\n    publicExponent: toBn(jwk.e),\n    privateExponent: toBn(jwk.d),\n    prime1: toBn(jwk.p),\n    prime2: toBn(jwk.q),\n    exponent1: toBn(jwk.dp),\n    exponent2: toBn(jwk.dq),\n    coefficient: toBn(jwk.qi)\n  }, 'der');\n};\n\n// Convert a PKCIX in ASN1 DER format to a JWK key\nexports.pkixToJwk = function (bytes) {\n  const ndata = PublicKey.decode(bytes, 'der');\n  const asn1 = RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');\n  return {\n    kty: 'RSA',\n    n: toBase64(asn1.modulus),\n    e: toBase64(asn1.publicExponent),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  };\n};\n\n// Convert a JWK key to PKCIX in ASN1 DER format\nexports.jwkToPkix = function (jwk) {\n  return PublicKey.encode({\n    algorithm: {\n      algorithm: 'rsa',\n      none: null\n    },\n    subjectPublicKey: {\n      data: RSAPublicKey.encode({\n        modulus: toBn(jwk.n),\n        publicExponent: toBn(jwk.e)\n      }, 'der')\n    }\n  }, 'der');\n};","map":{"version":3,"names":["asn1","require","util","toBase64","toBn","RSAPrivateKey","define","seq","obj","key","int","AlgorithmIdentifier","objid","optional","null_","PublicKey","use","bitstr","RSAPublicKey","exports","pkcs1ToJwk","bytes","decode","kty","n","modulus","e","publicExponent","d","privateExponent","p","prime1","q","prime2","dp","exponent1","dq","exponent2","qi","coefficient","alg","kid","jwkToPkcs1","jwk","encode","version","pkixToJwk","ndata","subjectPublicKey","data","jwkToPkix","algorithm","none"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/libp2p-crypto/src/keys/rsa-utils.js"],"sourcesContent":["'use strict'\n\nconst asn1 = require('asn1.js')\n\nconst util = require('./../util')\nconst toBase64 = util.toBase64\nconst toBn = util.toBn\n\nconst RSAPrivateKey = asn1.define('RSAPrivateKey', function () {\n  this.seq().obj(\n    this.key('version').int(),\n    this.key('modulus').int(),\n    this.key('publicExponent').int(),\n    this.key('privateExponent').int(),\n    this.key('prime1').int(),\n    this.key('prime2').int(),\n    this.key('exponent1').int(),\n    this.key('exponent2').int(),\n    this.key('coefficient').int()\n  )\n})\n\nconst AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {\n  this.seq().obj(\n    this.key('algorithm').objid({\n      '1.2.840.113549.1.1.1': 'rsa'\n    }),\n    this.key('none').optional().null_(),\n    this.key('curve').optional().objid(),\n    this.key('params').optional().seq().obj(\n      this.key('p').int(),\n      this.key('q').int(),\n      this.key('g').int()\n    )\n  )\n})\n\nconst PublicKey = asn1.define('RSAPublicKey', function () {\n  this.seq().obj(\n    this.key('algorithm').use(AlgorithmIdentifier),\n    this.key('subjectPublicKey').bitstr()\n  )\n})\n\nconst RSAPublicKey = asn1.define('RSAPublicKey', function () {\n  this.seq().obj(\n    this.key('modulus').int(),\n    this.key('publicExponent').int()\n  )\n})\n\n// Convert a PKCS#1 in ASN1 DER format to a JWK key\nexports.pkcs1ToJwk = function (bytes) {\n  const asn1 = RSAPrivateKey.decode(bytes, 'der')\n\n  return {\n    kty: 'RSA',\n    n: toBase64(asn1.modulus),\n    e: toBase64(asn1.publicExponent),\n    d: toBase64(asn1.privateExponent),\n    p: toBase64(asn1.prime1),\n    q: toBase64(asn1.prime2),\n    dp: toBase64(asn1.exponent1),\n    dq: toBase64(asn1.exponent2),\n    qi: toBase64(asn1.coefficient),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  }\n}\n\n// Convert a JWK key into PKCS#1 in ASN1 DER format\nexports.jwkToPkcs1 = function (jwk) {\n  return RSAPrivateKey.encode({\n    version: 0,\n    modulus: toBn(jwk.n),\n    publicExponent: toBn(jwk.e),\n    privateExponent: toBn(jwk.d),\n    prime1: toBn(jwk.p),\n    prime2: toBn(jwk.q),\n    exponent1: toBn(jwk.dp),\n    exponent2: toBn(jwk.dq),\n    coefficient: toBn(jwk.qi)\n  }, 'der')\n}\n\n// Convert a PKCIX in ASN1 DER format to a JWK key\nexports.pkixToJwk = function (bytes) {\n  const ndata = PublicKey.decode(bytes, 'der')\n  const asn1 = RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')\n\n  return {\n    kty: 'RSA',\n    n: toBase64(asn1.modulus),\n    e: toBase64(asn1.publicExponent),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  }\n}\n\n// Convert a JWK key to PKCIX in ASN1 DER format\nexports.jwkToPkix = function (jwk) {\n  return PublicKey.encode({\n    algorithm: {\n      algorithm: 'rsa',\n      none: null\n    },\n    subjectPublicKey: {\n      data: RSAPublicKey.encode({\n        modulus: toBn(jwk.n),\n        publicExponent: toBn(jwk.e)\n      }, 'der')\n    }\n  }, 'der')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}