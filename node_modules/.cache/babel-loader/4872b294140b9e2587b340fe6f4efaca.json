{"ast":null,"code":"'use strict';\n\nconst multihash = require('multihashes');\nconst crypto = require('./crypto');\nmodule.exports = Multihashing;\n\n/**\n * Hash the given `buf` using the algorithm specified\n * by `func`.\n *\n * @param {Buffer} buf - The value to hash.\n * @param {number|string} func - The algorithm to use.\n * @param {number} [length] - Optionally trim the result to this length.\n * @param {function(Error, Buffer)} callback\n * @returns {undefined}\n */\nfunction Multihashing(buf, func, length, callback) {\n  if (typeof length === 'function') {\n    callback = length;\n    length = undefined;\n  }\n  if (!callback) {\n    throw new Error('Missing callback');\n  }\n  Multihashing.digest(buf, func, length, (err, digest) => {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, multihash.encode(digest, func, length));\n  });\n}\n\n/**\n * The `buffer` module for easy use in the browser.\n *\n * @type {Buffer}\n */\nMultihashing.Buffer = Buffer; // for browser things\n\n/**\n * Expose multihash itself, to avoid silly double requires.\n */\nMultihashing.multihash = multihash;\n\n/**\n * @param {Buffer} buf - The value to hash.\n * @param {number|string} func - The algorithm to use.\n * @param {number} [length] - Optionally trim the result to this length.\n * @param {function(Error, Buffer)} callback\n * @returns {undefined}\n */\nMultihashing.digest = function (buf, func, length, callback) {\n  if (typeof length === 'function') {\n    callback = length;\n    length = undefined;\n  }\n  if (!callback) {\n    throw new Error('Missing callback');\n  }\n  let cb = callback;\n  if (length) {\n    cb = (err, digest) => {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, digest.slice(0, length));\n    };\n  }\n  let hash;\n  try {\n    hash = Multihashing.createHash(func);\n  } catch (err) {\n    return cb(err);\n  }\n  hash(buf, cb);\n};\n\n/**\n * @param {string|number} func\n *\n * @returns {function} - The to `func` corresponding hash function.\n */\nMultihashing.createHash = function (func) {\n  func = multihash.coerceCode(func);\n  if (!Multihashing.functions[func]) {\n    throw new Error('multihash function ' + func + ' not yet supported');\n  }\n  return Multihashing.functions[func];\n};\n\n/**\n * Mapping of multihash codes to their hashing functions.\n * @type {Object}\n */\nMultihashing.functions = {\n  // sha1\n  0x11: crypto.sha1,\n  // sha2-256\n  0x12: crypto.sha2256,\n  // sha2-512\n  0x13: crypto.sha2512,\n  // sha3-512\n  0x14: crypto.sha3512,\n  // sha3-384\n  0x15: crypto.sha3384,\n  // sha3-256\n  0x16: crypto.sha3256,\n  // sha3-224\n  0x17: crypto.sha3224,\n  // shake-128\n  0x18: crypto.shake128,\n  // shake-256\n  0x19: crypto.shake256,\n  // keccak-224\n  0x1A: crypto.keccak224,\n  // keccak-256\n  0x1B: crypto.keccak256,\n  // keccak-384\n  0x1C: crypto.keccak384,\n  // keccak-512\n  0x1D: crypto.keccak512,\n  // murmur3-128\n  0x22: crypto.murmur3128,\n  // murmur3-32\n  0x23: crypto.murmur332,\n  // dbl-sha2-256\n  0x56: crypto.dblSha2256\n};\n\n// add blake functions\ncrypto.addBlake(Multihashing.functions);\nMultihashing.validate = (data, hash, callback) => {\n  let algo = multihash.decode(hash).name;\n  Multihashing(data, algo, (err, newHash) => {\n    if (err) return callback(err);\n    callback(err, Buffer.compare(hash, newHash) === 0);\n  });\n};","map":{"version":3,"names":["multihash","require","crypto","module","exports","Multihashing","buf","func","length","callback","undefined","Error","digest","err","encode","Buffer","cb","slice","hash","createHash","coerceCode","functions","sha1","sha2256","sha2512","sha3512","sha3384","sha3256","sha3224","shake128","shake256","keccak224","keccak256","keccak384","keccak512","murmur3128","murmur332","dblSha2256","addBlake","validate","data","algo","decode","name","newHash","compare"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/libp2p-crypto-secp256k1/node_modules/multihashing-async/src/index.js"],"sourcesContent":["'use strict'\n\nconst multihash = require('multihashes')\nconst crypto = require('./crypto')\n\nmodule.exports = Multihashing\n\n/**\n * Hash the given `buf` using the algorithm specified\n * by `func`.\n *\n * @param {Buffer} buf - The value to hash.\n * @param {number|string} func - The algorithm to use.\n * @param {number} [length] - Optionally trim the result to this length.\n * @param {function(Error, Buffer)} callback\n * @returns {undefined}\n */\nfunction Multihashing (buf, func, length, callback) {\n  if (typeof length === 'function') {\n    callback = length\n    length = undefined\n  }\n\n  if (!callback) {\n    throw new Error('Missing callback')\n  }\n\n  Multihashing.digest(buf, func, length, (err, digest) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, multihash.encode(digest, func, length))\n  })\n}\n\n/**\n * The `buffer` module for easy use in the browser.\n *\n * @type {Buffer}\n */\nMultihashing.Buffer = Buffer // for browser things\n\n/**\n * Expose multihash itself, to avoid silly double requires.\n */\nMultihashing.multihash = multihash\n\n/**\n * @param {Buffer} buf - The value to hash.\n * @param {number|string} func - The algorithm to use.\n * @param {number} [length] - Optionally trim the result to this length.\n * @param {function(Error, Buffer)} callback\n * @returns {undefined}\n */\nMultihashing.digest = function (buf, func, length, callback) {\n  if (typeof length === 'function') {\n    callback = length\n    length = undefined\n  }\n\n  if (!callback) {\n    throw new Error('Missing callback')\n  }\n\n  let cb = callback\n  if (length) {\n    cb = (err, digest) => {\n      if (err) {\n        return callback(err)\n      }\n\n      callback(null, digest.slice(0, length))\n    }\n  }\n\n  let hash\n  try {\n    hash = Multihashing.createHash(func)\n  } catch (err) {\n    return cb(err)\n  }\n\n  hash(buf, cb)\n}\n\n/**\n * @param {string|number} func\n *\n * @returns {function} - The to `func` corresponding hash function.\n */\nMultihashing.createHash = function (func) {\n  func = multihash.coerceCode(func)\n  if (!Multihashing.functions[func]) {\n    throw new Error('multihash function ' + func + ' not yet supported')\n  }\n\n  return Multihashing.functions[func]\n}\n\n/**\n * Mapping of multihash codes to their hashing functions.\n * @type {Object}\n */\nMultihashing.functions = {\n  // sha1\n  0x11: crypto.sha1,\n  // sha2-256\n  0x12: crypto.sha2256,\n  // sha2-512\n  0x13: crypto.sha2512,\n  // sha3-512\n  0x14: crypto.sha3512,\n  // sha3-384\n  0x15: crypto.sha3384,\n  // sha3-256\n  0x16: crypto.sha3256,\n  // sha3-224\n  0x17: crypto.sha3224,\n  // shake-128\n  0x18: crypto.shake128,\n  // shake-256\n  0x19: crypto.shake256,\n  // keccak-224\n  0x1A: crypto.keccak224,\n  // keccak-256\n  0x1B: crypto.keccak256,\n  // keccak-384\n  0x1C: crypto.keccak384,\n  // keccak-512\n  0x1D: crypto.keccak512,\n  // murmur3-128\n  0x22: crypto.murmur3128,\n  // murmur3-32\n  0x23: crypto.murmur332,\n  // dbl-sha2-256\n  0x56: crypto.dblSha2256\n}\n\n// add blake functions\ncrypto.addBlake(Multihashing.functions)\n\nMultihashing.validate = (data, hash, callback) => {\n  let algo = multihash.decode(hash).name\n  Multihashing(data, algo, (err, newHash) => {\n    if (err) return callback(err)\n    callback(err, Buffer.compare(hash, newHash) === 0)\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}