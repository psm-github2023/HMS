{"ast":null,"code":"'use strict';\n\nconst nacl = require('tweetnacl');\nconst nextTick = require('async/nextTick');\nexports.publicKeyLength = nacl.sign.publicKeyLength;\nexports.privateKeyLength = nacl.sign.secretKeyLength;\nexports.generateKey = function (callback) {\n  nextTick(() => {\n    let result;\n    try {\n      result = nacl.sign.keyPair();\n    } catch (err) {\n      return callback(err);\n    }\n    callback(null, result);\n  });\n};\n\n// seed should be a 32 byte uint8array\nexports.generateKeyFromSeed = function (seed, callback) {\n  nextTick(() => {\n    let result;\n    try {\n      result = nacl.sign.keyPair.fromSeed(seed);\n    } catch (err) {\n      return callback(err);\n    }\n    callback(null, result);\n  });\n};\nexports.hashAndSign = function (key, msg, callback) {\n  nextTick(() => {\n    callback(null, Buffer.from(nacl.sign.detached(msg, key)));\n  });\n};\nexports.hashAndVerify = function (key, sig, msg, callback) {\n  nextTick(() => {\n    let result;\n    try {\n      result = nacl.sign.detached.verify(msg, sig, key);\n    } catch (err) {\n      return callback(err);\n    }\n    callback(null, result);\n  });\n};","map":{"version":3,"names":["nacl","require","nextTick","exports","publicKeyLength","sign","privateKeyLength","secretKeyLength","generateKey","callback","result","keyPair","err","generateKeyFromSeed","seed","fromSeed","hashAndSign","key","msg","Buffer","from","detached","hashAndVerify","sig","verify"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/libp2p-crypto/src/keys/ed25519.js"],"sourcesContent":["'use strict'\n\nconst nacl = require('tweetnacl')\nconst nextTick = require('async/nextTick')\n\nexports.publicKeyLength = nacl.sign.publicKeyLength\nexports.privateKeyLength = nacl.sign.secretKeyLength\n\nexports.generateKey = function (callback) {\n  nextTick(() => {\n    let result\n    try {\n      result = nacl.sign.keyPair()\n    } catch (err) {\n      return callback(err)\n    }\n    callback(null, result)\n  })\n}\n\n// seed should be a 32 byte uint8array\nexports.generateKeyFromSeed = function (seed, callback) {\n  nextTick(() => {\n    let result\n    try {\n      result = nacl.sign.keyPair.fromSeed(seed)\n    } catch (err) {\n      return callback(err)\n    }\n    callback(null, result)\n  })\n}\n\nexports.hashAndSign = function (key, msg, callback) {\n  nextTick(() => {\n    callback(null, Buffer.from(nacl.sign.detached(msg, key)))\n  })\n}\n\nexports.hashAndVerify = function (key, sig, msg, callback) {\n  nextTick(() => {\n    let result\n    try {\n      result = nacl.sign.detached.verify(msg, sig, key)\n    } catch (err) {\n      return callback(err)\n    }\n\n    callback(null, result)\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,WAAW,CAAC;AACjC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAE1CE,OAAO,CAACC,eAAe,GAAGJ,IAAI,CAACK,IAAI,CAACD,eAAe;AACnDD,OAAO,CAACG,gBAAgB,GAAGN,IAAI,CAACK,IAAI,CAACE,eAAe;AAEpDJ,OAAO,CAACK,WAAW,GAAG,UAAUC,QAAQ,EAAE;EACxCP,QAAQ,CAAC,MAAM;IACb,IAAIQ,MAAM;IACV,IAAI;MACFA,MAAM,GAAGV,IAAI,CAACK,IAAI,CAACM,OAAO,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,OAAOH,QAAQ,CAACG,GAAG,CAAC;IACtB;IACAH,QAAQ,CAAC,IAAI,EAAEC,MAAM,CAAC;EACxB,CAAC,CAAC;AACJ,CAAC;;AAED;AACAP,OAAO,CAACU,mBAAmB,GAAG,UAAUC,IAAI,EAAEL,QAAQ,EAAE;EACtDP,QAAQ,CAAC,MAAM;IACb,IAAIQ,MAAM;IACV,IAAI;MACFA,MAAM,GAAGV,IAAI,CAACK,IAAI,CAACM,OAAO,CAACI,QAAQ,CAACD,IAAI,CAAC;IAC3C,CAAC,CAAC,OAAOF,GAAG,EAAE;MACZ,OAAOH,QAAQ,CAACG,GAAG,CAAC;IACtB;IACAH,QAAQ,CAAC,IAAI,EAAEC,MAAM,CAAC;EACxB,CAAC,CAAC;AACJ,CAAC;AAEDP,OAAO,CAACa,WAAW,GAAG,UAAUC,GAAG,EAAEC,GAAG,EAAET,QAAQ,EAAE;EAClDP,QAAQ,CAAC,MAAM;IACbO,QAAQ,CAAC,IAAI,EAAEU,MAAM,CAACC,IAAI,CAACpB,IAAI,CAACK,IAAI,CAACgB,QAAQ,CAACH,GAAG,EAAED,GAAG,CAAC,CAAC,CAAC;EAC3D,CAAC,CAAC;AACJ,CAAC;AAEDd,OAAO,CAACmB,aAAa,GAAG,UAAUL,GAAG,EAAEM,GAAG,EAAEL,GAAG,EAAET,QAAQ,EAAE;EACzDP,QAAQ,CAAC,MAAM;IACb,IAAIQ,MAAM;IACV,IAAI;MACFA,MAAM,GAAGV,IAAI,CAACK,IAAI,CAACgB,QAAQ,CAACG,MAAM,CAACN,GAAG,EAAEK,GAAG,EAAEN,GAAG,CAAC;IACnD,CAAC,CAAC,OAAOL,GAAG,EAAE;MACZ,OAAOH,QAAQ,CAACG,GAAG,CAAC;IACtB;IAEAH,QAAQ,CAAC,IAAI,EAAEC,MAAM,CAAC;EACxB,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}