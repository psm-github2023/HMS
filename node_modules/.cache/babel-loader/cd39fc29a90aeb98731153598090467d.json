{"ast":null,"code":"'use strict';\n\nconst forge = {\n  util: require('node-forge/lib/util'),\n  pki: require('node-forge/lib/pki'),\n  jsbn: require('node-forge/lib/jsbn')\n};\nfunction base64urlToBigInteger(str) {\n  var bytes = forge.util.decode64((str + '==='.slice((str.length + 3) % 4)).replace(/-/g, '+').replace(/_/g, '/'));\n  return new forge.jsbn.BigInteger(forge.util.bytesToHex(bytes), 16);\n}\nfunction convert(key, types) {\n  return types.map(t => base64urlToBigInteger(key[t]));\n}\nfunction jwk2priv(key) {\n  return forge.pki.setRsaPrivateKey(...convert(key, ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi']));\n}\nfunction jwk2privPem(key) {\n  return forge.pki.privateKeyToPem(jwk2priv(key));\n}\nfunction jwk2pub(key) {\n  return forge.pki.setRsaPublicKey(...convert(key, ['n', 'e']));\n}\nfunction jwk2pubPem(key) {\n  return forge.pki.publicKeyToPem(jwk2pub(key));\n}\nmodule.exports = {\n  jwk2pub,\n  jwk2pubPem,\n  jwk2priv,\n  jwk2privPem\n};","map":{"version":3,"names":["forge","util","require","pki","jsbn","base64urlToBigInteger","str","bytes","decode64","slice","length","replace","BigInteger","bytesToHex","convert","key","types","map","t","jwk2priv","setRsaPrivateKey","jwk2privPem","privateKeyToPem","jwk2pub","setRsaPublicKey","jwk2pubPem","publicKeyToPem","module","exports"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/libp2p-crypto/src/keys/jwk2pem.js"],"sourcesContent":["'use strict'\n\nconst forge = {\n  util: require('node-forge/lib/util'),\n  pki: require('node-forge/lib/pki'),\n  jsbn: require('node-forge/lib/jsbn')\n}\n\nfunction base64urlToBigInteger (str) {\n  var bytes = forge.util.decode64(\n    (str + '==='.slice((str.length + 3) % 4))\n      .replace(/-/g, '+')\n      .replace(/_/g, '/'))\n  return new forge.jsbn.BigInteger(forge.util.bytesToHex(bytes), 16)\n}\n\nfunction convert (key, types) {\n  return types.map(t => base64urlToBigInteger(key[t]))\n}\n\nfunction jwk2priv (key) {\n  return forge.pki.setRsaPrivateKey(...convert(key, ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi']))\n}\n\nfunction jwk2privPem (key) {\n  return forge.pki.privateKeyToPem(jwk2priv(key))\n}\n\nfunction jwk2pub (key) {\n  return forge.pki.setRsaPublicKey(...convert(key, ['n', 'e']))\n}\n\nfunction jwk2pubPem (key) {\n  return forge.pki.publicKeyToPem(jwk2pub(key))\n}\n\nmodule.exports = {\n  jwk2pub,\n  jwk2pubPem,\n  jwk2priv,\n  jwk2privPem\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,KAAK,GAAG;EACZC,IAAI,EAAEC,OAAO,CAAC,qBAAqB,CAAC;EACpCC,GAAG,EAAED,OAAO,CAAC,oBAAoB,CAAC;EAClCE,IAAI,EAAEF,OAAO,CAAC,qBAAqB;AACrC,CAAC;AAED,SAASG,qBAAqBA,CAAEC,GAAG,EAAE;EACnC,IAAIC,KAAK,GAAGP,KAAK,CAACC,IAAI,CAACO,QAAQ,CAC7B,CAACF,GAAG,GAAG,KAAK,CAACG,KAAK,CAAC,CAACH,GAAG,CAACI,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,EACrCC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAClBA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;EACxB,OAAO,IAAIX,KAAK,CAACI,IAAI,CAACQ,UAAU,CAACZ,KAAK,CAACC,IAAI,CAACY,UAAU,CAACN,KAAK,CAAC,EAAE,EAAE,CAAC;AACpE;AAEA,SAASO,OAAOA,CAAEC,GAAG,EAAEC,KAAK,EAAE;EAC5B,OAAOA,KAAK,CAACC,GAAG,CAACC,CAAC,IAAIb,qBAAqB,CAACU,GAAG,CAACG,CAAC,CAAC,CAAC,CAAC;AACtD;AAEA,SAASC,QAAQA,CAAEJ,GAAG,EAAE;EACtB,OAAOf,KAAK,CAACG,GAAG,CAACiB,gBAAgB,CAAC,GAAGN,OAAO,CAACC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AACjG;AAEA,SAASM,WAAWA,CAAEN,GAAG,EAAE;EACzB,OAAOf,KAAK,CAACG,GAAG,CAACmB,eAAe,CAACH,QAAQ,CAACJ,GAAG,CAAC,CAAC;AACjD;AAEA,SAASQ,OAAOA,CAAER,GAAG,EAAE;EACrB,OAAOf,KAAK,CAACG,GAAG,CAACqB,eAAe,CAAC,GAAGV,OAAO,CAACC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAC/D;AAEA,SAASU,UAAUA,CAAEV,GAAG,EAAE;EACxB,OAAOf,KAAK,CAACG,GAAG,CAACuB,cAAc,CAACH,OAAO,CAACR,GAAG,CAAC,CAAC;AAC/C;AAEAY,MAAM,CAACC,OAAO,GAAG;EACfL,OAAO;EACPE,UAAU;EACVN,QAAQ;EACRE;AACF,CAAC"},"metadata":{},"sourceType":"script"}