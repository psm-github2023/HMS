{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst ip = require('./ip');\nconst protocols = require('./protocols-table');\nconst CID = require('cids');\nconst multibase = require('multibase');\nconst varint = require('varint');\nmodule.exports = Convert;\n\n// converts (serializes) addresses\nfunction Convert(proto, a) {\n  if (a instanceof Buffer) {\n    return Convert.toString(proto, a);\n  } else {\n    return Convert.toBuffer(proto, a);\n  }\n}\nConvert.toString = function convertToString(proto, buf) {\n  proto = protocols(proto);\n  switch (proto.code) {\n    case 4: // ipv4\n    case 41:\n      // ipv6\n      return buf2ip(buf);\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132:\n      // sctp\n      return buf2port(buf);\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777:\n      // memory\n      return buf2str(buf);\n    case 421:\n      // ipfs\n      return buf2mh(buf);\n    case 444:\n      // onion\n      return buf2onion(buf);\n    case 445:\n      // onion3\n      return buf2onion(buf);\n    default:\n      return buf.toString('hex');\n    // no clue. convert to hex\n  }\n};\n\nConvert.toBuffer = function convertToBuffer(proto, str) {\n  proto = protocols(proto);\n  switch (proto.code) {\n    case 4:\n      // ipv4\n      return ip2buf(str);\n    case 41:\n      // ipv6\n      return ip2buf(str);\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132:\n      // sctp\n      return port2buf(parseInt(str, 10));\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777:\n      // memory\n      return str2buf(str);\n    case 421:\n      // ipfs\n      return mh2buf(str);\n    case 444:\n      // onion\n      return onion2buf(str);\n    case 445:\n      // onion3\n      return onion32buf(str);\n    default:\n      return Buffer.from(str, 'hex');\n    // no clue. convert from hex\n  }\n};\n\nfunction ip2buf(ipString) {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address');\n  }\n  return ip.toBuffer(ipString);\n}\nfunction buf2ip(ipBuff) {\n  const ipString = ip.toString(ipBuff);\n  if (!ipString || !ip.isIP(ipString)) {\n    throw new Error('invalid ip address');\n  }\n  return ipString;\n}\nfunction port2buf(port) {\n  const buf = Buffer.alloc(2);\n  buf.writeUInt16BE(port, 0);\n  return buf;\n}\nfunction buf2port(buf) {\n  return buf.readUInt16BE(0);\n}\nfunction str2buf(str) {\n  const buf = Buffer.from(str);\n  const size = Buffer.from(varint.encode(buf.length));\n  return Buffer.concat([size, buf]);\n}\nfunction buf2str(buf) {\n  const size = varint.decode(buf);\n  buf = buf.slice(varint.decode.bytes);\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n  return buf.toString();\n}\nfunction mh2buf(hash) {\n  // the address is a varint prefixed multihash string representation\n  const mh = new CID(hash).multihash;\n  const size = Buffer.from(varint.encode(mh.length));\n  return Buffer.concat([size, mh]);\n}\nfunction buf2mh(buf) {\n  const size = varint.decode(buf);\n  const address = buf.slice(varint.decode.bytes);\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n  return multibase.encode('base58btc', address).toString().slice(1);\n}\nfunction onion2buf(str) {\n  const addr = str.split(':');\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number');\n  }\n  if (addr[0].length !== 16) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.');\n  }\n\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = multibase.decode('b' + addr[0]);\n\n  // onion port number\n  const port = parseInt(addr[1], 10);\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)');\n  }\n  const portBuf = port2buf(port);\n  return Buffer.concat([buf, portBuf]);\n}\nfunction onion32buf(str) {\n  const addr = str.split(':');\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number');\n  }\n  if (addr[0].length !== 56) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.');\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = multibase.decode('b' + addr[0]);\n\n  // onion port number\n  const port = parseInt(addr[1], 10);\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)');\n  }\n  const portBuf = port2buf(port);\n  return Buffer.concat([buf, portBuf]);\n}\nfunction buf2onion(buf) {\n  const addrBytes = buf.slice(0, buf.length - 2);\n  const portBytes = buf.slice(buf.length - 2);\n  const addr = multibase.encode('base32', addrBytes).toString().slice(1);\n  const port = buf2port(portBytes);\n  return addr + ':' + port;\n}","map":{"version":3,"names":["Buffer","require","ip","protocols","CID","multibase","varint","module","exports","Convert","proto","a","toString","toBuffer","convertToString","buf","code","buf2ip","buf2port","buf2str","buf2mh","buf2onion","convertToBuffer","str","ip2buf","port2buf","parseInt","str2buf","mh2buf","onion2buf","onion32buf","from","ipString","isIP","Error","ipBuff","port","alloc","writeUInt16BE","readUInt16BE","size","encode","length","concat","decode","slice","bytes","hash","mh","multihash","address","addr","split","portBuf","addrBytes","portBytes"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/is-ipfs/node_modules/multiaddr/src/convert.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst ip = require('./ip')\nconst protocols = require('./protocols-table')\nconst CID = require('cids')\nconst multibase = require('multibase')\nconst varint = require('varint')\n\nmodule.exports = Convert\n\n// converts (serializes) addresses\nfunction Convert (proto, a) {\n  if (a instanceof Buffer) {\n    return Convert.toString(proto, a)\n  } else {\n    return Convert.toBuffer(proto, a)\n  }\n}\n\nConvert.toString = function convertToString (proto, buf) {\n  proto = protocols(proto)\n  switch (proto.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return buf2ip(buf)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return buf2port(buf)\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777: // memory\n      return buf2str(buf)\n\n    case 421: // ipfs\n      return buf2mh(buf)\n    case 444: // onion\n      return buf2onion(buf)\n    case 445: // onion3\n      return buf2onion(buf)\n    default:\n      return buf.toString('hex') // no clue. convert to hex\n  }\n}\n\nConvert.toBuffer = function convertToBuffer (proto, str) {\n  proto = protocols(proto)\n  switch (proto.code) {\n    case 4: // ipv4\n      return ip2buf(str)\n    case 41: // ipv6\n      return ip2buf(str)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2buf(parseInt(str, 10))\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777: // memory\n      return str2buf(str)\n\n    case 421: // ipfs\n      return mh2buf(str)\n    case 444: // onion\n      return onion2buf(str)\n    case 445: // onion3\n      return onion32buf(str)\n    default:\n      return Buffer.from(str, 'hex') // no clue. convert from hex\n  }\n}\n\nfunction ip2buf (ipString) {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ip.toBuffer(ipString)\n}\n\nfunction buf2ip (ipBuff) {\n  const ipString = ip.toString(ipBuff)\n  if (!ipString || !ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ipString\n}\n\nfunction port2buf (port) {\n  const buf = Buffer.alloc(2)\n  buf.writeUInt16BE(port, 0)\n  return buf\n}\n\nfunction buf2port (buf) {\n  return buf.readUInt16BE(0)\n}\n\nfunction str2buf (str) {\n  const buf = Buffer.from(str)\n  const size = Buffer.from(varint.encode(buf.length))\n  return Buffer.concat([size, buf])\n}\n\nfunction buf2str (buf) {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return buf.toString()\n}\n\nfunction mh2buf (hash) {\n  // the address is a varint prefixed multihash string representation\n  const mh = new CID(hash).multihash\n  const size = Buffer.from(varint.encode(mh.length))\n  return Buffer.concat([size, mh])\n}\n\nfunction buf2mh (buf) {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.decode.bytes)\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n  return multibase.encode('base58btc', address).toString().slice(1)\n}\n\nfunction onion2buf (str) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\n  }\n  if (addr[0].length !== 16) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.')\n  }\n\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = multibase.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2buf(port)\n  return Buffer.concat([buf, portBuf])\n}\n\nfunction onion32buf (str) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\n  }\n  if (addr[0].length !== 56) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.')\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = multibase.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2buf(port)\n  return Buffer.concat([buf, portBuf])\n}\n\nfunction buf2onion (buf) {\n  const addrBytes = buf.slice(0, buf.length - 2)\n  const portBytes = buf.slice(buf.length - 2)\n  const addr = multibase.encode('base32', addrBytes).toString().slice(1)\n  const port = buf2port(portBytes)\n  return addr + ':' + port\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}