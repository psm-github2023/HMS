{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst isIp = require('is-ip');\nconst isIP = isIp;\nconst isV4 = isIp.v4;\nconst isV6 = isIp.v6;\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\nconst toBuffer = function (ip, buff, offset) {\n  offset = ~~offset;\n  var result;\n  if (isV4(ip)) {\n    result = buff || Buffer.alloc(offset + 4);\n    ip.split(/\\./g).map(function (byte) {\n      result[offset++] = parseInt(byte, 10) & 0xff;\n    });\n  } else if (isV6(ip)) {\n    var sections = ip.split(':', 8);\n    var i;\n    for (i = 0; i < sections.length; i++) {\n      var isv4 = isV4(sections[i]);\n      var v4Buffer;\n      if (isv4) {\n        v4Buffer = toBuffer(sections[i]);\n        sections[i] = v4Buffer.slice(0, 2).toString('hex');\n      }\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'));\n      }\n    }\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0');\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0');\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      var argv = [i, '1'];\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0');\n      }\n      sections.splice.apply(sections, argv);\n    }\n    result = buff || Buffer.alloc(offset + 16);\n    for (i = 0; i < sections.length; i++) {\n      var word = parseInt(sections[i], 16);\n      result[offset++] = word >> 8 & 0xff;\n      result[offset++] = word & 0xff;\n    }\n  }\n  if (!result) {\n    throw Error('Invalid ip address: ' + ip);\n  }\n  return result;\n};\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nconst toString = function (buff, offset, length) {\n  offset = ~~offset;\n  length = length || buff.length - offset;\n  var result = [];\n  var string;\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buff[offset + i]);\n    }\n    string = result.join('.');\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(buff.readUInt16BE(offset + i).toString(16));\n    }\n    string = result.join(':');\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');\n    string = string.replace(/:{3,4}/, '::');\n  }\n  return string;\n};\nmodule.exports = {\n  isIP,\n  isV4,\n  isV6,\n  toBuffer,\n  toString\n};","map":{"version":3,"names":["Buffer","require","isIp","isIP","isV4","v4","isV6","v6","toBuffer","ip","buff","offset","result","alloc","split","map","byte","parseInt","sections","i","length","isv4","v4Buffer","slice","toString","splice","unshift","push","argv","apply","word","Error","string","join","readUInt16BE","replace","module","exports"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/mafmt/node_modules/multiaddr/src/ip.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst isIp = require('is-ip')\n\nconst isIP = isIp\nconst isV4 = isIp.v4\nconst isV6 = isIp.v6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\nconst toBuffer = function (ip, buff, offset) {\n  offset = ~~offset\n\n  var result\n\n  if (isV4(ip)) {\n    result = buff || Buffer.alloc(offset + 4)\n    ip.split(/\\./g).map(function (byte) {\n      result[offset++] = parseInt(byte, 10) & 0xff\n    })\n  } else if (isV6(ip)) {\n    var sections = ip.split(':', 8)\n\n    var i\n    for (i = 0; i < sections.length; i++) {\n      var isv4 = isV4(sections[i])\n      var v4Buffer\n\n      if (isv4) {\n        v4Buffer = toBuffer(sections[i])\n        sections[i] = v4Buffer.slice(0, 2).toString('hex')\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, v4Buffer.slice(2, 4).toString('hex'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0')\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0')\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      var argv = [i, '1']\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    result = buff || Buffer.alloc(offset + 16)\n    for (i = 0; i < sections.length; i++) {\n      var word = parseInt(sections[i], 16)\n      result[offset++] = (word >> 8) & 0xff\n      result[offset++] = word & 0xff\n    }\n  }\n\n  if (!result) {\n    throw Error('Invalid ip address: ' + ip)\n  }\n\n  return result\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nconst toString = function (buff, offset, length) {\n  offset = ~~offset\n  length = length || (buff.length - offset)\n\n  var result = []\n  var string\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buff[offset + i])\n    }\n    string = result.join('.')\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(buff.readUInt16BE(offset + i).toString(16))\n    }\n    string = result.join(':')\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n    string = string.replace(/:{3,4}/, '::')\n  }\n\n  return string\n}\n\nmodule.exports = {\n  isIP,\n  isV4,\n  isV6,\n  toBuffer,\n  toString\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACpC,MAAMC,IAAI,GAAGD,OAAO,CAAC,OAAO,CAAC;AAE7B,MAAME,IAAI,GAAGD,IAAI;AACjB,MAAME,IAAI,GAAGF,IAAI,CAACG,EAAE;AACpB,MAAMC,IAAI,GAAGJ,IAAI,CAACK,EAAE;;AAEpB;AACA,MAAMC,QAAQ,GAAG,SAAAA,CAAUC,EAAE,EAAEC,IAAI,EAAEC,MAAM,EAAE;EAC3CA,MAAM,GAAG,CAAC,CAACA,MAAM;EAEjB,IAAIC,MAAM;EAEV,IAAIR,IAAI,CAACK,EAAE,CAAC,EAAE;IACZG,MAAM,GAAGF,IAAI,IAAIV,MAAM,CAACa,KAAK,CAACF,MAAM,GAAG,CAAC,CAAC;IACzCF,EAAE,CAACK,KAAK,CAAC,KAAK,CAAC,CAACC,GAAG,CAAC,UAAUC,IAAI,EAAE;MAClCJ,MAAM,CAACD,MAAM,EAAE,CAAC,GAAGM,QAAQ,CAACD,IAAI,EAAE,EAAE,CAAC,GAAG,IAAI;IAC9C,CAAC,CAAC;EACJ,CAAC,MAAM,IAAIV,IAAI,CAACG,EAAE,CAAC,EAAE;IACnB,IAAIS,QAAQ,GAAGT,EAAE,CAACK,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;IAE/B,IAAIK,CAAC;IACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAIE,IAAI,GAAGjB,IAAI,CAACc,QAAQ,CAACC,CAAC,CAAC,CAAC;MAC5B,IAAIG,QAAQ;MAEZ,IAAID,IAAI,EAAE;QACRC,QAAQ,GAAGd,QAAQ,CAACU,QAAQ,CAACC,CAAC,CAAC,CAAC;QAChCD,QAAQ,CAACC,CAAC,CAAC,GAAGG,QAAQ,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;MACpD;MAEA,IAAIF,QAAQ,IAAI,EAAEH,CAAC,GAAG,CAAC,EAAE;QACvBD,QAAQ,CAACO,MAAM,CAACN,CAAC,EAAE,CAAC,EAAEG,QAAQ,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC,CAAC;MAC7D;IACF;IAEA,IAAIN,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;MACtB,OAAOA,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAEF,QAAQ,CAACQ,OAAO,CAAC,GAAG,CAAC;IACnD,CAAC,MAAM,IAAIR,QAAQ,CAACA,QAAQ,CAACE,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;MAC/C,OAAOF,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAEF,QAAQ,CAACS,IAAI,CAAC,GAAG,CAAC;IAChD,CAAC,MAAM,IAAIT,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;MAC9B,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,CAACE,MAAM,IAAIF,QAAQ,CAACC,CAAC,CAAC,KAAK,EAAE,EAAEA,CAAC,EAAE,CAAC;MAC3D,IAAIS,IAAI,GAAG,CAACT,CAAC,EAAE,GAAG,CAAC;MACnB,KAAKA,CAAC,GAAG,CAAC,GAAGD,QAAQ,CAACE,MAAM,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACxCS,IAAI,CAACD,IAAI,CAAC,GAAG,CAAC;MAChB;MACAT,QAAQ,CAACO,MAAM,CAACI,KAAK,CAACX,QAAQ,EAAEU,IAAI,CAAC;IACvC;IAEAhB,MAAM,GAAGF,IAAI,IAAIV,MAAM,CAACa,KAAK,CAACF,MAAM,GAAG,EAAE,CAAC;IAC1C,KAAKQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAIW,IAAI,GAAGb,QAAQ,CAACC,QAAQ,CAACC,CAAC,CAAC,EAAE,EAAE,CAAC;MACpCP,MAAM,CAACD,MAAM,EAAE,CAAC,GAAImB,IAAI,IAAI,CAAC,GAAI,IAAI;MACrClB,MAAM,CAACD,MAAM,EAAE,CAAC,GAAGmB,IAAI,GAAG,IAAI;IAChC;EACF;EAEA,IAAI,CAAClB,MAAM,EAAE;IACX,MAAMmB,KAAK,CAAC,sBAAsB,GAAGtB,EAAE,CAAC;EAC1C;EAEA,OAAOG,MAAM;AACf,CAAC;;AAED;AACA,MAAMY,QAAQ,GAAG,SAAAA,CAAUd,IAAI,EAAEC,MAAM,EAAES,MAAM,EAAE;EAC/CT,MAAM,GAAG,CAAC,CAACA,MAAM;EACjBS,MAAM,GAAGA,MAAM,IAAKV,IAAI,CAACU,MAAM,GAAGT,MAAO;EAEzC,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIoB,MAAM;EACV,IAAIZ,MAAM,KAAK,CAAC,EAAE;IAChB;IACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,EAAED,CAAC,EAAE,EAAE;MAC/BP,MAAM,CAACe,IAAI,CAACjB,IAAI,CAACC,MAAM,GAAGQ,CAAC,CAAC,CAAC;IAC/B;IACAa,MAAM,GAAGpB,MAAM,CAACqB,IAAI,CAAC,GAAG,CAAC;EAC3B,CAAC,MAAM,IAAIb,MAAM,KAAK,EAAE,EAAE;IACxB;IACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MAClCP,MAAM,CAACe,IAAI,CAACjB,IAAI,CAACwB,YAAY,CAACvB,MAAM,GAAGQ,CAAC,CAAC,CAACK,QAAQ,CAAC,EAAE,CAAC,CAAC;IACzD;IACAQ,MAAM,GAAGpB,MAAM,CAACqB,IAAI,CAAC,GAAG,CAAC;IACzBD,MAAM,GAAGA,MAAM,CAACG,OAAO,CAAC,oBAAoB,EAAE,QAAQ,CAAC;IACvDH,MAAM,GAAGA,MAAM,CAACG,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;EACzC;EAEA,OAAOH,MAAM;AACf,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAG;EACflC,IAAI;EACJC,IAAI;EACJE,IAAI;EACJE,QAAQ;EACRgB;AACF,CAAC"},"metadata":{},"sourceType":"script"}