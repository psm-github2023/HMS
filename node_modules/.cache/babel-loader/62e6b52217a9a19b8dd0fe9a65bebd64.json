{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\nconst dagCBOR = require('ipld-dag-cbor');\nconst raw = require('ipld-raw');\nconst promisify = require('promisify-es6');\nconst CID = require('cids');\nconst waterfall = require('async/waterfall');\nconst block = require('../block');\nconst resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver,\n  raw: raw.resolver\n};\nmodule.exports = send => {\n  return promisify((cid, path, options, callback) => {\n    if (typeof path === 'function') {\n      callback = path;\n      path = undefined;\n    }\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    path = path || '';\n    if (CID.isCID(cid)) {\n      cid = cid.toBaseEncodedString();\n    }\n    waterfall([cb => {\n      send({\n        path: 'dag/resolve',\n        args: cid + '/' + path,\n        qs: options\n      }, cb);\n    }, (resolved, cb) => {\n      block(send).get(new CID(resolved['Cid']['/']), (err, ipfsBlock) => {\n        cb(err, ipfsBlock, resolved['RemPath']);\n      });\n    }, (ipfsBlock, path, cb) => {\n      const dagResolver = resolvers[ipfsBlock.cid.codec];\n      if (!dagResolver) {\n        const error = new Error(`Missing IPLD format \"${ipfsBlock.cid.codec}\"`);\n        error.missingMulticodec = ipfsBlock.cid.codec;\n        return cb(error);\n      }\n      let res;\n      try {\n        res = dagResolver.resolve(ipfsBlock.data, path);\n      } catch (err) {\n        return cb(err);\n      }\n      cb(null, res);\n    }], callback);\n  });\n};","map":{"version":3,"names":["dagPB","require","dagCBOR","raw","promisify","CID","waterfall","block","resolvers","resolver","module","exports","send","cid","path","options","callback","undefined","isCID","toBaseEncodedString","cb","args","qs","resolved","get","err","ipfsBlock","dagResolver","codec","error","Error","missingMulticodec","res","resolve","data"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/dag/get.js"],"sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst raw = require('ipld-raw')\nconst promisify = require('promisify-es6')\nconst CID = require('cids')\nconst waterfall = require('async/waterfall')\nconst block = require('../block')\n\nconst resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver,\n  raw: raw.resolver\n}\n\nmodule.exports = (send) => {\n  return promisify((cid, path, options, callback) => {\n    if (typeof path === 'function') {\n      callback = path\n      path = undefined\n    }\n\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    options = options || {}\n    path = path || ''\n\n    if (CID.isCID(cid)) {\n      cid = cid.toBaseEncodedString()\n    }\n\n    waterfall([\n      cb => {\n        send({\n          path: 'dag/resolve',\n          args: cid + '/' + path,\n          qs: options\n        }, cb)\n      },\n      (resolved, cb) => {\n        block(send).get(new CID(resolved['Cid']['/']), (err, ipfsBlock) => {\n          cb(err, ipfsBlock, resolved['RemPath'])\n        })\n      },\n      (ipfsBlock, path, cb) => {\n        const dagResolver = resolvers[ipfsBlock.cid.codec]\n\n        if (!dagResolver) {\n          const error = new Error(`Missing IPLD format \"${ipfsBlock.cid.codec}\"`)\n          error.missingMulticodec = ipfsBlock.cid.codec\n          return cb(error)\n        }\n\n        let res\n        try {\n          res = dagResolver.resolve(ipfsBlock.data, path)\n        } catch (err) {\n          return cb(err)\n        }\n\n        cb(null, res)\n      }\n    ], callback)\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AACpC,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAe,CAAC;AACxC,MAAME,GAAG,GAAGF,OAAO,CAAC,UAAU,CAAC;AAC/B,MAAMG,SAAS,GAAGH,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMI,GAAG,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMK,SAAS,GAAGL,OAAO,CAAC,iBAAiB,CAAC;AAC5C,MAAMM,KAAK,GAAGN,OAAO,CAAC,UAAU,CAAC;AAEjC,MAAMO,SAAS,GAAG;EAChB,UAAU,EAAEN,OAAO,CAACO,QAAQ;EAC5B,QAAQ,EAAET,KAAK,CAACS,QAAQ;EACxBN,GAAG,EAAEA,GAAG,CAACM;AACX,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAOR,SAAS,CAAC,CAACS,GAAG,EAAEC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,KAAK;IACjD,IAAI,OAAOF,IAAI,KAAK,UAAU,EAAE;MAC9BE,QAAQ,GAAGF,IAAI;MACfA,IAAI,GAAGG,SAAS;IAClB;IAEA,IAAI,OAAOF,OAAO,KAAK,UAAU,EAAE;MACjCC,QAAQ,GAAGD,OAAO;MAClBA,OAAO,GAAG,CAAC,CAAC;IACd;IAEAA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBD,IAAI,GAAGA,IAAI,IAAI,EAAE;IAEjB,IAAIT,GAAG,CAACa,KAAK,CAACL,GAAG,CAAC,EAAE;MAClBA,GAAG,GAAGA,GAAG,CAACM,mBAAmB,CAAC,CAAC;IACjC;IAEAb,SAAS,CAAC,CACRc,EAAE,IAAI;MACJR,IAAI,CAAC;QACHE,IAAI,EAAE,aAAa;QACnBO,IAAI,EAAER,GAAG,GAAG,GAAG,GAAGC,IAAI;QACtBQ,EAAE,EAAEP;MACN,CAAC,EAAEK,EAAE,CAAC;IACR,CAAC,EACD,CAACG,QAAQ,EAAEH,EAAE,KAAK;MAChBb,KAAK,CAACK,IAAI,CAAC,CAACY,GAAG,CAAC,IAAInB,GAAG,CAACkB,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAACE,GAAG,EAAEC,SAAS,KAAK;QACjEN,EAAE,CAACK,GAAG,EAAEC,SAAS,EAAEH,QAAQ,CAAC,SAAS,CAAC,CAAC;MACzC,CAAC,CAAC;IACJ,CAAC,EACD,CAACG,SAAS,EAAEZ,IAAI,EAAEM,EAAE,KAAK;MACvB,MAAMO,WAAW,GAAGnB,SAAS,CAACkB,SAAS,CAACb,GAAG,CAACe,KAAK,CAAC;MAElD,IAAI,CAACD,WAAW,EAAE;QAChB,MAAME,KAAK,GAAG,IAAIC,KAAK,CAAE,wBAAuBJ,SAAS,CAACb,GAAG,CAACe,KAAM,GAAE,CAAC;QACvEC,KAAK,CAACE,iBAAiB,GAAGL,SAAS,CAACb,GAAG,CAACe,KAAK;QAC7C,OAAOR,EAAE,CAACS,KAAK,CAAC;MAClB;MAEA,IAAIG,GAAG;MACP,IAAI;QACFA,GAAG,GAAGL,WAAW,CAACM,OAAO,CAACP,SAAS,CAACQ,IAAI,EAAEpB,IAAI,CAAC;MACjD,CAAC,CAAC,OAAOW,GAAG,EAAE;QACZ,OAAOL,EAAE,CAACK,GAAG,CAAC;MAChB;MAEAL,EAAE,CAAC,IAAI,EAAEY,GAAG,CAAC;IACf,CAAC,CACF,EAAEhB,QAAQ,CAAC;EACd,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}