{"ast":null,"code":"'use strict';\n\n/* global self */\nconst isIPFS = require('is-ipfs');\nconst {\n  Buffer\n} = require('buffer');\nconst CID = require('cids');\nconst multiaddr = require('multiaddr');\nconst multibase = require('multibase');\nconst multicodec = require('multicodec');\nconst multihash = require('multihashes');\nconst PeerId = require('peer-id');\nconst PeerInfo = require('peer-info');\nconst loadCommands = require('./utils/load-commands');\nconst getConfig = require('./utils/default-config');\nconst sendRequest = require('./utils/send-request');\nfunction ipfsClient(hostOrMultiaddr, port, userOptions) {\n  // convert all three params to objects that we can merge.\n  let options = {};\n  if (!hostOrMultiaddr) {\n    // autoconfigure host and port in browser\n    if (typeof self !== 'undefined') {\n      options = urlToOptions(self.location);\n    }\n  } else if (multiaddr.isMultiaddr(hostOrMultiaddr)) {\n    options = maToOptions(hostOrMultiaddr);\n  } else if (typeof hostOrMultiaddr === 'object') {\n    options = hostOrMultiaddr;\n  } else if (typeof hostOrMultiaddr === 'string') {\n    if (hostOrMultiaddr[0] === '/') {\n      // throws if multiaddr is malformed or can't be converted to a nodeAddress\n      options = maToOptions(multiaddr(hostOrMultiaddr));\n    } else {\n      // hostOrMultiaddr is domain or ip address as a string\n      options.host = hostOrMultiaddr;\n    }\n  }\n  if (port && typeof port !== 'object') {\n    port = {\n      port: port\n    };\n  }\n  const config = Object.assign(getConfig(), options, port, userOptions);\n  const requestAPI = sendRequest(config);\n  const cmds = loadCommands(requestAPI, config);\n  cmds.send = requestAPI;\n  return cmds;\n}\nfunction maToOptions(multiaddr) {\n  // ma.nodeAddress() throws if multiaddr can't be converted to a nodeAddress\n  const nodeAddr = multiaddr.nodeAddress();\n  const protos = multiaddr.protos();\n  // only http and https are allowed as protocol,\n  // anything else will be replaced with http\n  const exitProtocol = protos[protos.length - 1].name;\n  return {\n    host: nodeAddr.address,\n    port: nodeAddr.port,\n    protocol: exitProtocol.startsWith('http') ? exitProtocol : 'http'\n  };\n}\nfunction urlToOptions(url) {\n  return {\n    host: url.hostname,\n    port: url.port || (url.protocol.startsWith('https') ? 443 : 80),\n    protocol: url.protocol.startsWith('http') ? url.protocol.split(':')[0] : 'http'\n  };\n}\nmodule.exports = ipfsClient;\nObject.assign(module.exports, {\n  isIPFS,\n  Buffer,\n  CID,\n  multiaddr,\n  multibase,\n  multicodec,\n  multihash,\n  PeerId,\n  PeerInfo\n});","map":{"version":3,"names":["isIPFS","require","Buffer","CID","multiaddr","multibase","multicodec","multihash","PeerId","PeerInfo","loadCommands","getConfig","sendRequest","ipfsClient","hostOrMultiaddr","port","userOptions","options","self","urlToOptions","location","isMultiaddr","maToOptions","host","config","Object","assign","requestAPI","cmds","send","nodeAddr","nodeAddress","protos","exitProtocol","length","name","address","protocol","startsWith","url","hostname","split","module","exports"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/index.js"],"sourcesContent":["'use strict'\n/* global self */\n\nconst isIPFS = require('is-ipfs')\nconst { Buffer } = require('buffer')\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst multihash = require('multihashes')\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst loadCommands = require('./utils/load-commands')\nconst getConfig = require('./utils/default-config')\nconst sendRequest = require('./utils/send-request')\n\nfunction ipfsClient (hostOrMultiaddr, port, userOptions) {\n  // convert all three params to objects that we can merge.\n  let options = {}\n\n  if (!hostOrMultiaddr) {\n    // autoconfigure host and port in browser\n    if (typeof self !== 'undefined') {\n      options = urlToOptions(self.location)\n    }\n  } else if (multiaddr.isMultiaddr(hostOrMultiaddr)) {\n    options = maToOptions(hostOrMultiaddr)\n  } else if (typeof hostOrMultiaddr === 'object') {\n    options = hostOrMultiaddr\n  } else if (typeof hostOrMultiaddr === 'string') {\n    if (hostOrMultiaddr[0] === '/') {\n      // throws if multiaddr is malformed or can't be converted to a nodeAddress\n      options = maToOptions(multiaddr(hostOrMultiaddr))\n    } else {\n      // hostOrMultiaddr is domain or ip address as a string\n      options.host = hostOrMultiaddr\n    }\n  }\n\n  if (port && typeof port !== 'object') {\n    port = { port: port }\n  }\n\n  const config = Object.assign(getConfig(), options, port, userOptions)\n  const requestAPI = sendRequest(config)\n  const cmds = loadCommands(requestAPI, config)\n  cmds.send = requestAPI\n\n  return cmds\n}\n\nfunction maToOptions (multiaddr) {\n  // ma.nodeAddress() throws if multiaddr can't be converted to a nodeAddress\n  const nodeAddr = multiaddr.nodeAddress()\n  const protos = multiaddr.protos()\n  // only http and https are allowed as protocol,\n  // anything else will be replaced with http\n  const exitProtocol = protos[protos.length - 1].name\n  return {\n    host: nodeAddr.address,\n    port: nodeAddr.port,\n    protocol: exitProtocol.startsWith('http') ? exitProtocol : 'http'\n  }\n}\n\nfunction urlToOptions (url) {\n  return {\n    host: url.hostname,\n    port: url.port || (url.protocol.startsWith('https') ? 443 : 80),\n    protocol: url.protocol.startsWith('http') ? url.protocol.split(':')[0] : 'http'\n  }\n}\n\nmodule.exports = ipfsClient\n\nObject.assign(module.exports, { isIPFS, Buffer, CID, multiaddr, multibase, multicodec, multihash, PeerId, PeerInfo })\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}