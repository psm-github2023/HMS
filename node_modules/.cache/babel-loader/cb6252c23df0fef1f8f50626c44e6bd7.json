{"ast":null,"code":"'use strict';\n\nvar assert = require('./assert');\nvar der = require('./der');\nvar messages = require('./messages.json');\nfunction initCompressedValue(value, defaultValue) {\n  if (value === undefined) return defaultValue;\n  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID);\n  return value;\n}\nmodule.exports = function (secp256k1) {\n  return {\n    privateKeyVerify: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey);\n    },\n    privateKeyExport: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      var publicKey = secp256k1.privateKeyExport(privateKey, compressed);\n      return der.privateKeyExport(privateKey, publicKey, compressed);\n    },\n    privateKeyImport: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      privateKey = der.privateKeyImport(privateKey);\n      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey;\n      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL);\n    },\n    privateKeyNegate: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      return secp256k1.privateKeyNegate(privateKey);\n    },\n    privateKeyModInverse: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      return secp256k1.privateKeyModInverse(privateKey);\n    },\n    privateKeyTweakAdd: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);\n      return secp256k1.privateKeyTweakAdd(privateKey, tweak);\n    },\n    privateKeyTweakMul: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);\n      return secp256k1.privateKeyTweakMul(privateKey, tweak);\n    },\n    publicKeyCreate: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.publicKeyCreate(privateKey, compressed);\n    },\n    publicKeyConvert: function (publicKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.publicKeyConvert(publicKey, compressed);\n    },\n    publicKeyVerify: function (publicKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      return secp256k1.publicKeyVerify(publicKey);\n    },\n    publicKeyTweakAdd: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed);\n    },\n    publicKeyTweakMul: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed);\n    },\n    publicKeyCombine: function (publicKeys, compressed) {\n      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID);\n      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID);\n      for (var i = 0; i < publicKeys.length; ++i) {\n        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID);\n        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      }\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.publicKeyCombine(publicKeys, compressed);\n    },\n    signatureNormalize: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);\n      return secp256k1.signatureNormalize(signature);\n    },\n    signatureExport: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);\n      var sigObj = secp256k1.signatureExport(signature);\n      return der.signatureExport(sigObj);\n    },\n    signatureImport: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID);\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID);\n      var sigObj = der.signatureImport(sig);\n      if (sigObj) return secp256k1.signatureImport(sigObj);\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL);\n    },\n    signatureImportLax: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID);\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID);\n      var sigObj = der.signatureImportLax(sig);\n      if (sigObj) return secp256k1.signatureImport(sigObj);\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL);\n    },\n    sign: function (message, privateKey, options) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID);\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      var data = null;\n      var noncefn = null;\n      if (options !== undefined) {\n        assert.isObject(options, messages.OPTIONS_TYPE_INVALID);\n        if (options.data !== undefined) {\n          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID);\n          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID);\n          data = options.data;\n        }\n        if (options.noncefn !== undefined) {\n          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID);\n          noncefn = options.noncefn;\n        }\n      }\n      return secp256k1.sign(message, privateKey, noncefn, data);\n    },\n    verify: function (message, signature, publicKey) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID);\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      return secp256k1.verify(message, signature, publicKey);\n    },\n    recover: function (message, signature, recovery, compressed) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID);\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);\n      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID);\n      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.recover(message, signature, recovery, compressed);\n    },\n    ecdh: function (publicKey, privateKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      return secp256k1.ecdh(publicKey, privateKey);\n    },\n    ecdhUnsafe: function (publicKey, privateKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);\n      compressed = initCompressedValue(compressed, true);\n      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed);\n    }\n  };\n};","map":{"version":3,"names":["assert","require","der","messages","initCompressedValue","value","defaultValue","undefined","isBoolean","COMPRESSED_TYPE_INVALID","module","exports","secp256k1","privateKeyVerify","privateKey","isBuffer","EC_PRIVATE_KEY_TYPE_INVALID","length","privateKeyExport","compressed","isBufferLength","EC_PRIVATE_KEY_LENGTH_INVALID","publicKey","privateKeyImport","Error","EC_PRIVATE_KEY_IMPORT_DER_FAIL","privateKeyNegate","privateKeyModInverse","privateKeyTweakAdd","tweak","TWEAK_TYPE_INVALID","TWEAK_LENGTH_INVALID","privateKeyTweakMul","publicKeyCreate","publicKeyConvert","EC_PUBLIC_KEY_TYPE_INVALID","isBufferLength2","EC_PUBLIC_KEY_LENGTH_INVALID","publicKeyVerify","publicKeyTweakAdd","publicKeyTweakMul","publicKeyCombine","publicKeys","isArray","EC_PUBLIC_KEYS_TYPE_INVALID","isLengthGTZero","EC_PUBLIC_KEYS_LENGTH_INVALID","i","signatureNormalize","signature","ECDSA_SIGNATURE_TYPE_INVALID","ECDSA_SIGNATURE_LENGTH_INVALID","signatureExport","sigObj","signatureImport","sig","ECDSA_SIGNATURE_PARSE_DER_FAIL","signatureImportLax","sign","message","options","MSG32_TYPE_INVALID","MSG32_LENGTH_INVALID","data","noncefn","isObject","OPTIONS_TYPE_INVALID","OPTIONS_DATA_TYPE_INVALID","OPTIONS_DATA_LENGTH_INVALID","isFunction","OPTIONS_NONCEFN_TYPE_INVALID","verify","recover","recovery","isNumber","RECOVERY_ID_TYPE_INVALID","isNumberInInterval","RECOVERY_ID_VALUE_INVALID","ecdh","ecdhUnsafe"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/libp2p-crypto-secp256k1/node_modules/secp256k1/lib/index.js"],"sourcesContent":["'use strict'\nvar assert = require('./assert')\nvar der = require('./der')\nvar messages = require('./messages.json')\n\nfunction initCompressedValue (value, defaultValue) {\n  if (value === undefined) return defaultValue\n\n  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)\n  return value\n}\n\nmodule.exports = function (secp256k1) {\n  return {\n    privateKeyVerify: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)\n    },\n\n    privateKeyExport: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)\n\n      return der.privateKeyExport(privateKey, publicKey, compressed)\n    },\n\n    privateKeyImport: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n\n      privateKey = der.privateKeyImport(privateKey)\n      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey\n\n      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)\n    },\n\n    privateKeyNegate: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyNegate(privateKey)\n    },\n\n    privateKeyModInverse: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyModInverse(privateKey)\n    },\n\n    privateKeyTweakAdd: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakAdd(privateKey, tweak)\n    },\n\n    privateKeyTweakMul: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakMul(privateKey, tweak)\n    },\n\n    publicKeyCreate: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCreate(privateKey, compressed)\n    },\n\n    publicKeyConvert: function (publicKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyConvert(publicKey, compressed)\n    },\n\n    publicKeyVerify: function (publicKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      return secp256k1.publicKeyVerify(publicKey)\n    },\n\n    publicKeyTweakAdd: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)\n    },\n\n    publicKeyTweakMul: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)\n    },\n\n    publicKeyCombine: function (publicKeys, compressed) {\n      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)\n      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)\n      for (var i = 0; i < publicKeys.length; ++i) {\n        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)\n        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n      }\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCombine(publicKeys, compressed)\n    },\n\n    signatureNormalize: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      return secp256k1.signatureNormalize(signature)\n    },\n\n    signatureExport: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = secp256k1.signatureExport(signature)\n      return der.signatureExport(sigObj)\n    },\n\n    signatureImport: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImport(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    signatureImportLax: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImportLax(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    sign: function (message, privateKey, options) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      var data = null\n      var noncefn = null\n      if (options !== undefined) {\n        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)\n\n        if (options.data !== undefined) {\n          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)\n          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)\n          data = options.data\n        }\n\n        if (options.noncefn !== undefined) {\n          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)\n          noncefn = options.noncefn\n        }\n      }\n\n      return secp256k1.sign(message, privateKey, noncefn, data)\n    },\n\n    verify: function (message, signature, publicKey) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      return secp256k1.verify(message, signature, publicKey)\n    },\n\n    recover: function (message, signature, recovery, compressed) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)\n      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.recover(message, signature, recovery, compressed)\n    },\n\n    ecdh: function (publicKey, privateKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.ecdh(publicKey, privateKey)\n    },\n\n    ecdhUnsafe: function (publicKey, privateKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}