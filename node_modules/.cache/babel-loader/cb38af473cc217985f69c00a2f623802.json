{"ast":null,"code":"'use strict';\n\nconst bs58 = require('bs58');\nconst multihashing = require('multihashing-async');\nmodule.exports = (keysProtobuf, randomBytes, crypto) => {\n  crypto = crypto || require('./crypto')(randomBytes);\n  class Secp256k1PublicKey {\n    constructor(key) {\n      crypto.validatePublicKey(key);\n      this._key = key;\n    }\n    verify(data, sig, callback) {\n      ensure(callback);\n      crypto.hashAndVerify(this._key, sig, data, callback);\n    }\n    marshal() {\n      return crypto.compressPublicKey(this._key);\n    }\n    get bytes() {\n      return keysProtobuf.PublicKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      });\n    }\n    equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n    hash(callback) {\n      ensure(callback);\n      multihashing(this.bytes, 'sha2-256', callback);\n    }\n  }\n  class Secp256k1PrivateKey {\n    constructor(key, publicKey) {\n      this._key = key;\n      this._publicKey = publicKey || crypto.computePublicKey(key);\n      crypto.validatePrivateKey(this._key);\n      crypto.validatePublicKey(this._publicKey);\n    }\n    sign(message, callback) {\n      ensure(callback);\n      crypto.hashAndSign(this._key, message, callback);\n    }\n    get public() {\n      return new Secp256k1PublicKey(this._publicKey);\n    }\n    marshal() {\n      return this._key;\n    }\n    get bytes() {\n      return keysProtobuf.PrivateKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      });\n    }\n    equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n    hash(callback) {\n      ensure(callback);\n      multihashing(this.bytes, 'sha2-256', callback);\n    }\n\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @param {function(Error, id)} callback\n     * @returns {undefined}\n     */\n    id(callback) {\n      this.public.hash((err, hash) => {\n        if (err) {\n          return callback(err);\n        }\n        callback(null, bs58.encode(hash));\n      });\n    }\n  }\n  function unmarshalSecp256k1PrivateKey(bytes, callback) {\n    callback(null, new Secp256k1PrivateKey(bytes));\n  }\n  function unmarshalSecp256k1PublicKey(bytes) {\n    return new Secp256k1PublicKey(bytes);\n  }\n  function generateKeyPair(_bits, callback) {\n    if (callback === undefined && typeof _bits === 'function') {\n      callback = _bits;\n    }\n    ensure(callback);\n    crypto.generateKey((err, privateKeyBytes) => {\n      if (err) {\n        return callback(err);\n      }\n      let privkey;\n      try {\n        privkey = new Secp256k1PrivateKey(privateKeyBytes);\n      } catch (err) {\n        return callback(err);\n      }\n      callback(null, privkey);\n    });\n  }\n  function ensure(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('callback is required');\n    }\n  }\n  return {\n    Secp256k1PublicKey,\n    Secp256k1PrivateKey,\n    unmarshalSecp256k1PrivateKey,\n    unmarshalSecp256k1PublicKey,\n    generateKeyPair\n  };\n};","map":{"version":3,"names":["bs58","require","multihashing","module","exports","keysProtobuf","randomBytes","crypto","Secp256k1PublicKey","constructor","key","validatePublicKey","_key","verify","data","sig","callback","ensure","hashAndVerify","marshal","compressPublicKey","bytes","PublicKey","encode","Type","KeyType","Secp256k1","Data","equals","hash","Secp256k1PrivateKey","publicKey","_publicKey","computePublicKey","validatePrivateKey","sign","message","hashAndSign","public","PrivateKey","id","err","unmarshalSecp256k1PrivateKey","unmarshalSecp256k1PublicKey","generateKeyPair","_bits","undefined","generateKey","privateKeyBytes","privkey","Error"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/libp2p-crypto-secp256k1/src/index.js"],"sourcesContent":["'use strict'\n\nconst bs58 = require('bs58')\nconst multihashing = require('multihashing-async')\n\nmodule.exports = (keysProtobuf, randomBytes, crypto) => {\n  crypto = crypto || require('./crypto')(randomBytes)\n\n  class Secp256k1PublicKey {\n    constructor (key) {\n      crypto.validatePublicKey(key)\n      this._key = key\n    }\n\n    verify (data, sig, callback) {\n      ensure(callback)\n      crypto.hashAndVerify(this._key, sig, data, callback)\n    }\n\n    marshal () {\n      return crypto.compressPublicKey(this._key)\n    }\n\n    get bytes () {\n      return keysProtobuf.PublicKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      })\n    }\n\n    equals (key) {\n      return this.bytes.equals(key.bytes)\n    }\n\n    hash (callback) {\n      ensure(callback)\n      multihashing(this.bytes, 'sha2-256', callback)\n    }\n  }\n\n  class Secp256k1PrivateKey {\n    constructor (key, publicKey) {\n      this._key = key\n      this._publicKey = publicKey || crypto.computePublicKey(key)\n      crypto.validatePrivateKey(this._key)\n      crypto.validatePublicKey(this._publicKey)\n    }\n\n    sign (message, callback) {\n      ensure(callback)\n      crypto.hashAndSign(this._key, message, callback)\n    }\n\n    get public () {\n      return new Secp256k1PublicKey(this._publicKey)\n    }\n\n    marshal () {\n      return this._key\n    }\n\n    get bytes () {\n      return keysProtobuf.PrivateKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      })\n    }\n\n    equals (key) {\n      return this.bytes.equals(key.bytes)\n    }\n\n    hash (callback) {\n      ensure(callback)\n      multihashing(this.bytes, 'sha2-256', callback)\n    }\n\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @param {function(Error, id)} callback\n     * @returns {undefined}\n     */\n    id (callback) {\n      this.public.hash((err, hash) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, bs58.encode(hash))\n      })\n    }\n  }\n\n  function unmarshalSecp256k1PrivateKey (bytes, callback) {\n    callback(null, new Secp256k1PrivateKey(bytes))\n  }\n\n  function unmarshalSecp256k1PublicKey (bytes) {\n    return new Secp256k1PublicKey(bytes)\n  }\n\n  function generateKeyPair (_bits, callback) {\n    if (callback === undefined && typeof _bits === 'function') {\n      callback = _bits\n    }\n\n    ensure(callback)\n\n    crypto.generateKey((err, privateKeyBytes) => {\n      if (err) { return callback(err) }\n\n      let privkey\n      try {\n        privkey = new Secp256k1PrivateKey(privateKeyBytes)\n      } catch (err) { return callback(err) }\n\n      callback(null, privkey)\n    })\n  }\n\n  function ensure (callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('callback is required')\n    }\n  }\n\n  return {\n    Secp256k1PublicKey,\n    Secp256k1PrivateKey,\n    unmarshalSecp256k1PrivateKey,\n    unmarshalSecp256k1PublicKey,\n    generateKeyPair\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}