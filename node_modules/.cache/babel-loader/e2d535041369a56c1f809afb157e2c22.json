{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst cleanCID = require('../utils/clean-cid');\nconst v = require('is-ipfs');\nconst bl = require('bl');\nmodule.exports = send => {\n  return promisify((hash, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    try {\n      hash = cleanCID(hash);\n    } catch (err) {\n      if (!v.ipfsPath(hash)) {\n        return callback(err);\n      }\n    }\n    const query = {\n      offset: opts.offset,\n      length: opts.length\n    };\n    send({\n      path: 'cat',\n      args: hash,\n      buffer: opts.buffer,\n      qs: query\n    }, (err, stream) => {\n      if (err) {\n        return callback(err);\n      }\n      stream.pipe(bl((err, data) => {\n        if (err) {\n          return callback(err);\n        }\n        callback(null, data);\n      }));\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","cleanCID","v","bl","module","exports","send","hash","opts","callback","err","ipfsPath","query","offset","length","path","args","buffer","qs","stream","pipe","data"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/files-regular/cat.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst cleanCID = require('../utils/clean-cid')\nconst v = require('is-ipfs')\nconst bl = require('bl')\n\nmodule.exports = (send) => {\n  return promisify((hash, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    try {\n      hash = cleanCID(hash)\n    } catch (err) {\n      if (!v.ipfsPath(hash)) {\n        return callback(err)\n      }\n    }\n\n    const query = {\n      offset: opts.offset,\n      length: opts.length\n    }\n\n    send({ path: 'cat', args: hash, buffer: opts.buffer, qs: query }, (err, stream) => {\n      if (err) { return callback(err) }\n\n      stream.pipe(bl((err, data) => {\n        if (err) { return callback(err) }\n\n        callback(null, data)\n      }))\n    })\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,QAAQ,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC9C,MAAME,CAAC,GAAGF,OAAO,CAAC,SAAS,CAAC;AAC5B,MAAMG,EAAE,GAAGH,OAAO,CAAC,IAAI,CAAC;AAExBI,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAOP,SAAS,CAAC,CAACQ,IAAI,EAAEC,IAAI,EAAEC,QAAQ,KAAK;IACzC,IAAI,OAAOD,IAAI,KAAK,UAAU,EAAE;MAC9BC,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IAEA,IAAI;MACFD,IAAI,GAAGN,QAAQ,CAACM,IAAI,CAAC;IACvB,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZ,IAAI,CAACR,CAAC,CAACS,QAAQ,CAACJ,IAAI,CAAC,EAAE;QACrB,OAAOE,QAAQ,CAACC,GAAG,CAAC;MACtB;IACF;IAEA,MAAME,KAAK,GAAG;MACZC,MAAM,EAAEL,IAAI,CAACK,MAAM;MACnBC,MAAM,EAAEN,IAAI,CAACM;IACf,CAAC;IAEDR,IAAI,CAAC;MAAES,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAET,IAAI;MAAEU,MAAM,EAAET,IAAI,CAACS,MAAM;MAAEC,EAAE,EAAEN;IAAM,CAAC,EAAE,CAACF,GAAG,EAAES,MAAM,KAAK;MACjF,IAAIT,GAAG,EAAE;QAAE,OAAOD,QAAQ,CAACC,GAAG,CAAC;MAAC;MAEhCS,MAAM,CAACC,IAAI,CAACjB,EAAE,CAAC,CAACO,GAAG,EAAEW,IAAI,KAAK;QAC5B,IAAIX,GAAG,EAAE;UAAE,OAAOD,QAAQ,CAACC,GAAG,CAAC;QAAC;QAEhCD,QAAQ,CAAC,IAAI,EAAEY,IAAI,CAAC;MACtB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}