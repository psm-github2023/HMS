{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\nconst assert = require('assert');\nconst withIs = require('class-is');\nconst visibility = require('../visibility');\n\n// Link represents an IPFS Merkle DAG Link between Nodes.\nclass DAGLink {\n  constructor(name, size, cid) {\n    assert(cid, 'A link requires a cid to point to');\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || '';\n    this._nameBuf = null;\n    this._size = size;\n    this._cid = new CID(cid);\n\n    // Make sure we have a nice public API that can be used by an IPLD resolver\n    visibility.hidePrivateFields(this);\n    visibility.addEnumerableGetters(this, ['Hash', 'Name', 'Tsize']);\n  }\n  toString() {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`;\n  }\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      });\n    }\n    return Object.assign({}, this._json);\n  }\n  get Name() {\n    return this._name;\n  }\n\n  // Memoize the Buffer representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new buffers every time\n  get nameAsBuffer() {\n    if (this._nameBuf !== null) {\n      return this._nameBuf;\n    }\n    this._nameBuf = Buffer.from(this._name);\n    return this._nameBuf;\n  }\n  set Name(name) {\n    throw new Error(\"Can't set property: 'name' is immutable\");\n  }\n  get Tsize() {\n    return this._size;\n  }\n  set Tsize(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n  get Hash() {\n    return this._cid;\n  }\n  set Hash(cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\");\n  }\n}\nexports = module.exports = withIs(DAGLink, {\n  className: 'DAGLink',\n  symbolName: '@ipld/js-ipld-dag-pb/daglink'\n});\nexports.util = require('./util');","map":{"version":3,"names":["CID","require","assert","withIs","visibility","DAGLink","constructor","name","size","cid","_name","_nameBuf","_size","_cid","hidePrivateFields","addEnumerableGetters","toString","toBaseEncodedString","Name","Tsize","toJSON","_json","Object","freeze","Hash","assign","nameAsBuffer","Buffer","from","Error","exports","module","className","symbolName","util"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipld-dag-pb/src/dag-link/index.js"],"sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst assert = require('assert')\nconst withIs = require('class-is')\nconst visibility = require('../visibility')\n\n// Link represents an IPFS Merkle DAG Link between Nodes.\nclass DAGLink {\n  constructor (name, size, cid) {\n    assert(cid, 'A link requires a cid to point to')\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || ''\n    this._nameBuf = null\n    this._size = size\n    this._cid = new CID(cid)\n\n    // Make sure we have a nice public API that can be used by an IPLD resolver\n    visibility.hidePrivateFields(this)\n    visibility.addEnumerableGetters(this, ['Hash', 'Name', 'Tsize'])\n  }\n\n  toString () {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  get Name () {\n    return this._name\n  }\n\n  // Memoize the Buffer representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new buffers every time\n  get nameAsBuffer () {\n    if (this._nameBuf !== null) {\n      return this._nameBuf\n    }\n\n    this._nameBuf = Buffer.from(this._name)\n    return this._nameBuf\n  }\n\n  set Name (name) {\n    throw new Error(\"Can't set property: 'name' is immutable\")\n  }\n\n  get Tsize () {\n    return this._size\n  }\n\n  set Tsize (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get Hash () {\n    return this._cid\n  }\n\n  set Hash (cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGLink, { className: 'DAGLink', symbolName: '@ipld/js-ipld-dag-pb/daglink' })\nexports.util = require('./util')\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMG,UAAU,GAAGH,OAAO,CAAC,eAAe,CAAC;;AAE3C;AACA,MAAMI,OAAO,CAAC;EACZC,WAAWA,CAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAE;IAC5BP,MAAM,CAACO,GAAG,EAAE,mCAAmC,CAAC;IAChD;IACA;IACA;;IAEA,IAAI,CAACC,KAAK,GAAGH,IAAI,IAAI,EAAE;IACvB,IAAI,CAACI,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,KAAK,GAAGJ,IAAI;IACjB,IAAI,CAACK,IAAI,GAAG,IAAIb,GAAG,CAACS,GAAG,CAAC;;IAExB;IACAL,UAAU,CAACU,iBAAiB,CAAC,IAAI,CAAC;IAClCV,UAAU,CAACW,oBAAoB,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;EAClE;EAEAC,QAAQA,CAAA,EAAI;IACV,OAAQ,YAAW,IAAI,CAACH,IAAI,CAACI,mBAAmB,CAAC,CAAE,aAAY,IAAI,CAACC,IAAK,YAAW,IAAI,CAACC,KAAM,GAAE;EACnG;EAEAC,MAAMA,CAAA,EAAI;IACR,IAAI,CAAC,IAAI,CAACC,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC;QACzBhB,IAAI,EAAE,IAAI,CAACW,IAAI;QACfV,IAAI,EAAE,IAAI,CAACW,KAAK;QAChBV,GAAG,EAAE,IAAI,CAACe,IAAI,CAACP,mBAAmB,CAAC;MACrC,CAAC,CAAC;IACJ;IAEA,OAAOK,MAAM,CAACG,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACJ,KAAK,CAAC;EACtC;EAEA,IAAIH,IAAIA,CAAA,EAAI;IACV,OAAO,IAAI,CAACR,KAAK;EACnB;;EAEA;EACA;EACA;EACA,IAAIgB,YAAYA,CAAA,EAAI;IAClB,IAAI,IAAI,CAACf,QAAQ,KAAK,IAAI,EAAE;MAC1B,OAAO,IAAI,CAACA,QAAQ;IACtB;IAEA,IAAI,CAACA,QAAQ,GAAGgB,MAAM,CAACC,IAAI,CAAC,IAAI,CAAClB,KAAK,CAAC;IACvC,OAAO,IAAI,CAACC,QAAQ;EACtB;EAEA,IAAIO,IAAIA,CAAEX,IAAI,EAAE;IACd,MAAM,IAAIsB,KAAK,CAAC,yCAAyC,CAAC;EAC5D;EAEA,IAAIV,KAAKA,CAAA,EAAI;IACX,OAAO,IAAI,CAACP,KAAK;EACnB;EAEA,IAAIO,KAAKA,CAAEX,IAAI,EAAE;IACf,MAAM,IAAIqB,KAAK,CAAC,yCAAyC,CAAC;EAC5D;EAEA,IAAIL,IAAIA,CAAA,EAAI;IACV,OAAO,IAAI,CAACX,IAAI;EAClB;EAEA,IAAIW,IAAIA,CAAEf,GAAG,EAAE;IACb,MAAM,IAAIoB,KAAK,CAAC,wCAAwC,CAAC;EAC3D;AACF;AAEAC,OAAO,GAAGC,MAAM,CAACD,OAAO,GAAG3B,MAAM,CAACE,OAAO,EAAE;EAAE2B,SAAS,EAAE,SAAS;EAAEC,UAAU,EAAE;AAA+B,CAAC,CAAC;AAChHH,OAAO,CAACI,IAAI,GAAGjC,OAAO,CAAC,QAAQ,CAAC"},"metadata":{},"sourceType":"script"}