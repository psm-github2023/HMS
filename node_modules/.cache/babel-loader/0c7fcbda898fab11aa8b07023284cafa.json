{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst crypto = self.crypto || self.msCrypto;\nmodule.exports = algorithm => {\n  if (typeof self === 'undefined' || !self.crypto && !self.msCrypto) {\n    throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context');\n  }\n  return async data => {\n    switch (algorithm) {\n      case 'sha1':\n        return Buffer.from(await crypto.subtle.digest({\n          name: 'SHA-1'\n        }, data));\n      case 'sha2-256':\n        return Buffer.from(await crypto.subtle.digest({\n          name: 'SHA-256'\n        }, data));\n      case 'sha2-512':\n        return Buffer.from(await crypto.subtle.digest({\n          name: 'SHA-512'\n        }, data));\n      case 'dbl-sha2-256':\n        {\n          const d = await crypto.subtle.digest({\n            name: 'SHA-256'\n          }, data);\n          return Buffer.from(await crypto.subtle.digest({\n            name: 'SHA-256'\n          }, d));\n        }\n      default:\n        throw new Error(`${algorithm} is not a supported algorithm`);\n    }\n  };\n};","map":{"version":3,"names":["Buffer","require","crypto","self","msCrypto","module","exports","algorithm","Error","data","from","subtle","digest","name","d"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipld-dag-pb/node_modules/multihashing-async/src/sha.browser.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\n\nconst crypto = self.crypto || self.msCrypto\n\nmodule.exports = (algorithm) => {\n  if (typeof self === 'undefined' || (!self.crypto && !self.msCrypto)) {\n    throw new Error(\n      'Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context'\n    )\n  }\n\n  return async (data) => {\n    switch (algorithm) {\n      case 'sha1':\n        return Buffer.from(await crypto.subtle.digest({ name: 'SHA-1' }, data))\n      case 'sha2-256':\n        return Buffer.from(await crypto.subtle.digest({ name: 'SHA-256' }, data))\n      case 'sha2-512':\n        return Buffer.from(await crypto.subtle.digest({ name: 'SHA-512' }, data))\n      case 'dbl-sha2-256': {\n        const d = await crypto.subtle.digest({ name: 'SHA-256' }, data)\n        return Buffer.from(await crypto.subtle.digest({ name: 'SHA-256' }, d))\n      }\n      default:\n        throw new Error(`${algorithm} is not a supported algorithm`)\n    }\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEpC,MAAMC,MAAM,GAAGC,IAAI,CAACD,MAAM,IAAIC,IAAI,CAACC,QAAQ;AAE3CC,MAAM,CAACC,OAAO,GAAIC,SAAS,IAAK;EAC9B,IAAI,OAAOJ,IAAI,KAAK,WAAW,IAAK,CAACA,IAAI,CAACD,MAAM,IAAI,CAACC,IAAI,CAACC,QAAS,EAAE;IACnE,MAAM,IAAII,KAAK,CACb,2IACF,CAAC;EACH;EAEA,OAAO,MAAOC,IAAI,IAAK;IACrB,QAAQF,SAAS;MACf,KAAK,MAAM;QACT,OAAOP,MAAM,CAACU,IAAI,CAAC,MAAMR,MAAM,CAACS,MAAM,CAACC,MAAM,CAAC;UAAEC,IAAI,EAAE;QAAQ,CAAC,EAAEJ,IAAI,CAAC,CAAC;MACzE,KAAK,UAAU;QACb,OAAOT,MAAM,CAACU,IAAI,CAAC,MAAMR,MAAM,CAACS,MAAM,CAACC,MAAM,CAAC;UAAEC,IAAI,EAAE;QAAU,CAAC,EAAEJ,IAAI,CAAC,CAAC;MAC3E,KAAK,UAAU;QACb,OAAOT,MAAM,CAACU,IAAI,CAAC,MAAMR,MAAM,CAACS,MAAM,CAACC,MAAM,CAAC;UAAEC,IAAI,EAAE;QAAU,CAAC,EAAEJ,IAAI,CAAC,CAAC;MAC3E,KAAK,cAAc;QAAE;UACnB,MAAMK,CAAC,GAAG,MAAMZ,MAAM,CAACS,MAAM,CAACC,MAAM,CAAC;YAAEC,IAAI,EAAE;UAAU,CAAC,EAAEJ,IAAI,CAAC;UAC/D,OAAOT,MAAM,CAACU,IAAI,CAAC,MAAMR,MAAM,CAACS,MAAM,CAACC,MAAM,CAAC;YAAEC,IAAI,EAAE;UAAU,CAAC,EAAEC,CAAC,CAAC,CAAC;QACxE;MACA;QACE,MAAM,IAAIN,KAAK,CAAE,GAAED,SAAU,+BAA8B,CAAC;IAChE;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script"}