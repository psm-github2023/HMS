{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst Bignumber = require('bignumber.js').BigNumber;\nconst constants = require('./constants');\nconst SHIFT32 = constants.SHIFT32;\nconst SHIFT16 = constants.SHIFT16;\nconst MAX_SAFE_HIGH = 0x1fffff;\nexports.parseHalf = function parseHalf(buf) {\n  var exp, mant, sign;\n  sign = buf[0] & 0x80 ? -1 : 1;\n  exp = (buf[0] & 0x7C) >> 2;\n  mant = (buf[0] & 0x03) << 8 | buf[1];\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant;\n  } else if (exp === 0x1f) {\n    return sign * (mant ? 0 / 0 : 2e308);\n  } else {\n    return sign * Math.pow(2, exp - 25) * (1024 + mant);\n  }\n};\nfunction toHex(n) {\n  if (n < 16) {\n    return '0' + n.toString(16);\n  }\n  return n.toString(16);\n}\nexports.arrayBufferToBignumber = function (buf) {\n  const len = buf.byteLength;\n  let res = '';\n  for (let i = 0; i < len; i++) {\n    res += toHex(buf[i]);\n  }\n  return new Bignumber(res, 16);\n};\n\n// convert an Object into a Map\nexports.buildMap = obj => {\n  const res = new Map();\n  const keys = Object.keys(obj);\n  const length = keys.length;\n  for (let i = 0; i < length; i++) {\n    res.set(keys[i], obj[keys[i]]);\n  }\n  return res;\n};\nexports.buildInt32 = (f, g) => {\n  return f * SHIFT16 + g;\n};\nexports.buildInt64 = (f1, f2, g1, g2) => {\n  const f = exports.buildInt32(f1, f2);\n  const g = exports.buildInt32(g1, g2);\n  if (f > MAX_SAFE_HIGH) {\n    return new Bignumber(f).times(SHIFT32).plus(g);\n  } else {\n    return f * SHIFT32 + g;\n  }\n};\nexports.writeHalf = function writeHalf(buf, half) {\n  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n\n  const u32 = Buffer.allocUnsafe(4);\n  u32.writeFloatBE(half, 0);\n  const u = u32.readUInt32BE(0);\n\n  // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n\n  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion\n  if ((u & 0x1FFF) !== 0) {\n    return false;\n  }\n\n  //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n  var s16 = u >> 16 & 0x8000; // top bit is sign\n  const exp = u >> 23 & 0xff; // then 5 bits of exponent\n  const mant = u & 0x7fffff;\n\n  //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n\n  // hildjj: zeros already handled.  Assert if you don't believe me.\n\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n  if (exp >= 113 && exp <= 142) {\n    s16 += (exp - 112 << 10) + (mant >> 13);\n\n    //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n    //     if (mant & ((1 << (126 - exp)) - 1))\n    //       goto float32;         /* loss of precision */\n    //     s16 += ((mant + 0x800000) >> (126 - exp));\n  } else if (exp >= 103 && exp < 113) {\n    if (mant & (1 << 126 - exp) - 1) {\n      return false;\n    }\n    s16 += mant + 0x800000 >> 126 - exp;\n\n    //   } else if (exp == 255 && mant == 0) { /* Inf */\n    //     s16 += 0x7c00;\n\n    // hildjj: Infinity already handled\n\n    //   } else\n    //     goto float32;           /* loss of range */\n  } else {\n    return false;\n  }\n\n  //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n  buf.writeUInt16BE(s16, 0);\n  return true;\n};\nexports.keySorter = function (a, b) {\n  var lenA = a[0].byteLength;\n  var lenB = b[0].byteLength;\n  if (lenA > lenB) {\n    return 1;\n  }\n  if (lenB > lenA) {\n    return -1;\n  }\n  return a[0].compare(b[0]);\n};\n\n// Adapted from http://www.2ality.com/2012/03/signedzero.html\nexports.isNegativeZero = x => {\n  return x === 0 && 1 / x < 0;\n};\nexports.nextPowerOf2 = n => {\n  let count = 0;\n  // First n in the below condition is for\n  // the case where n is 0\n  if (n && !(n & n - 1)) {\n    return n;\n  }\n  while (n !== 0) {\n    n >>= 1;\n    count += 1;\n  }\n  return 1 << count;\n};","map":{"version":3,"names":["Buffer","require","Bignumber","BigNumber","constants","SHIFT32","SHIFT16","MAX_SAFE_HIGH","exports","parseHalf","buf","exp","mant","sign","Math","pow","toHex","n","toString","arrayBufferToBignumber","len","byteLength","res","i","buildMap","obj","Map","keys","Object","length","set","buildInt32","f","g","buildInt64","f1","f2","g1","g2","times","plus","writeHalf","half","u32","allocUnsafe","writeFloatBE","u","readUInt32BE","s16","writeUInt16BE","keySorter","a","b","lenA","lenB","compare","isNegativeZero","x","nextPowerOf2","count"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/borc/src/utils.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst constants = require('./constants')\nconst SHIFT32 = constants.SHIFT32\nconst SHIFT16 = constants.SHIFT16\nconst MAX_SAFE_HIGH = 0x1fffff\n\nexports.parseHalf = function parseHalf (buf) {\n  var exp, mant, sign\n  sign = buf[0] & 0x80 ? -1 : 1\n  exp = (buf[0] & 0x7C) >> 2\n  mant = ((buf[0] & 0x03) << 8) | buf[1]\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant\n  } else if (exp === 0x1f) {\n    return sign * (mant ? 0 / 0 : 2e308)\n  } else {\n    return sign * Math.pow(2, exp - 25) * (1024 + mant)\n  }\n}\n\nfunction toHex (n) {\n  if (n < 16) {\n    return '0' + n.toString(16)\n  }\n\n  return n.toString(16)\n}\n\nexports.arrayBufferToBignumber = function (buf) {\n  const len = buf.byteLength\n  let res = ''\n  for (let i = 0; i < len; i++) {\n    res += toHex(buf[i])\n  }\n\n  return new Bignumber(res, 16)\n}\n\n// convert an Object into a Map\nexports.buildMap = (obj) => {\n  const res = new Map()\n  const keys = Object.keys(obj)\n  const length = keys.length\n  for (let i = 0; i < length; i++) {\n    res.set(keys[i], obj[keys[i]])\n  }\n  return res\n}\n\nexports.buildInt32 = (f, g) => {\n  return f * SHIFT16 + g\n}\n\nexports.buildInt64 = (f1, f2, g1, g2) => {\n  const f = exports.buildInt32(f1, f2)\n  const g = exports.buildInt32(g1, g2)\n\n  if (f > MAX_SAFE_HIGH) {\n    return new Bignumber(f).times(SHIFT32).plus(g)\n  } else {\n    return (f * SHIFT32) + g\n  }\n}\n\nexports.writeHalf = function writeHalf (buf, half) {\n  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n\n  const u32 = Buffer.allocUnsafe(4)\n  u32.writeFloatBE(half, 0)\n  const u = u32.readUInt32BE(0)\n\n  // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n\n  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion\n  if ((u & 0x1FFF) !== 0) {\n    return false\n  }\n\n  //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n  var s16 = (u >> 16) & 0x8000 // top bit is sign\n  const exp = (u >> 23) & 0xff // then 5 bits of exponent\n  const mant = u & 0x7fffff\n\n  //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n\n  // hildjj: zeros already handled.  Assert if you don't believe me.\n\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n  if ((exp >= 113) && (exp <= 142)) {\n    s16 += ((exp - 112) << 10) + (mant >> 13)\n\n  //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n  //     if (mant & ((1 << (126 - exp)) - 1))\n  //       goto float32;         /* loss of precision */\n  //     s16 += ((mant + 0x800000) >> (126 - exp));\n  } else if ((exp >= 103) && (exp < 113)) {\n    if (mant & ((1 << (126 - exp)) - 1)) {\n      return false\n    }\n    s16 += ((mant + 0x800000) >> (126 - exp))\n\n    //   } else if (exp == 255 && mant == 0) { /* Inf */\n    //     s16 += 0x7c00;\n\n    // hildjj: Infinity already handled\n\n  //   } else\n  //     goto float32;           /* loss of range */\n  } else {\n    return false\n  }\n\n  //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n  buf.writeUInt16BE(s16, 0)\n  return true\n}\n\nexports.keySorter = function (a, b) {\n  var lenA = a[0].byteLength\n  var lenB = b[0].byteLength\n\n  if (lenA > lenB) {\n    return 1\n  }\n\n  if (lenB > lenA) {\n    return -1\n  }\n\n  return a[0].compare(b[0])\n}\n\n// Adapted from http://www.2ality.com/2012/03/signedzero.html\nexports.isNegativeZero = (x) => {\n  return x === 0 && (1 / x < 0)\n}\n\nexports.nextPowerOf2 = (n) => {\n  let count = 0\n  // First n in the below condition is for\n  // the case where n is 0\n  if (n && !(n & (n - 1))) {\n    return n\n  }\n\n  while (n !== 0) {\n    n >>= 1\n    count += 1\n  }\n\n  return 1 << count\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}