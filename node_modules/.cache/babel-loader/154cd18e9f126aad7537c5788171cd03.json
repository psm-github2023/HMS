{"ast":null,"code":"'use strict';\n\nconst bs58 = require('bs58');\nmodule.exports = {\n  deserialize(data, enc) {\n    enc = enc ? enc.toLowerCase() : 'json';\n    if (enc === 'json') {\n      return deserializeFromJson(data);\n    } else if (enc === 'base64') {\n      return deserializeFromBase64(data);\n    }\n    throw new Error(`Unsupported encoding: '${enc}'`);\n  }\n};\nfunction deserializeFromJson(data) {\n  const json = JSON.parse(data);\n  return deserializeFromBase64(json);\n}\nfunction deserializeFromBase64(obj) {\n  if (!isPubsubMessage(obj)) {\n    throw new Error(`Not a pubsub message`);\n  }\n  return {\n    from: bs58.encode(Buffer.from(obj.from, 'base64')).toString(),\n    seqno: Buffer.from(obj.seqno, 'base64'),\n    data: Buffer.from(obj.data, 'base64'),\n    topicIDs: obj.topicIDs || obj.topicCIDs\n  };\n}\nfunction isPubsubMessage(obj) {\n  return obj && obj.from && obj.seqno && obj.data && (obj.topicIDs || obj.topicCIDs);\n}","map":{"version":3,"names":["bs58","require","module","exports","deserialize","data","enc","toLowerCase","deserializeFromJson","deserializeFromBase64","Error","json","JSON","parse","obj","isPubsubMessage","from","encode","Buffer","toString","seqno","topicIDs","topicCIDs"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/utils/pubsub-message-utils.js"],"sourcesContent":["'use strict'\n\nconst bs58 = require('bs58')\n\nmodule.exports = {\n  deserialize (data, enc) {\n    enc = enc ? enc.toLowerCase() : 'json'\n\n    if (enc === 'json') {\n      return deserializeFromJson(data)\n    } else if (enc === 'base64') {\n      return deserializeFromBase64(data)\n    }\n\n    throw new Error(`Unsupported encoding: '${enc}'`)\n  }\n}\n\nfunction deserializeFromJson (data) {\n  const json = JSON.parse(data)\n  return deserializeFromBase64(json)\n}\n\nfunction deserializeFromBase64 (obj) {\n  if (!isPubsubMessage(obj)) {\n    throw new Error(`Not a pubsub message`)\n  }\n\n  return {\n    from: bs58.encode(Buffer.from(obj.from, 'base64')).toString(),\n    seqno: Buffer.from(obj.seqno, 'base64'),\n    data: Buffer.from(obj.data, 'base64'),\n    topicIDs: obj.topicIDs || obj.topicCIDs\n  }\n}\n\nfunction isPubsubMessage (obj) {\n  return obj && obj.from && obj.seqno && obj.data && (obj.topicIDs || obj.topicCIDs)\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE5BC,MAAM,CAACC,OAAO,GAAG;EACfC,WAAWA,CAAEC,IAAI,EAAEC,GAAG,EAAE;IACtBA,GAAG,GAAGA,GAAG,GAAGA,GAAG,CAACC,WAAW,CAAC,CAAC,GAAG,MAAM;IAEtC,IAAID,GAAG,KAAK,MAAM,EAAE;MAClB,OAAOE,mBAAmB,CAACH,IAAI,CAAC;IAClC,CAAC,MAAM,IAAIC,GAAG,KAAK,QAAQ,EAAE;MAC3B,OAAOG,qBAAqB,CAACJ,IAAI,CAAC;IACpC;IAEA,MAAM,IAAIK,KAAK,CAAE,0BAAyBJ,GAAI,GAAE,CAAC;EACnD;AACF,CAAC;AAED,SAASE,mBAAmBA,CAAEH,IAAI,EAAE;EAClC,MAAMM,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACR,IAAI,CAAC;EAC7B,OAAOI,qBAAqB,CAACE,IAAI,CAAC;AACpC;AAEA,SAASF,qBAAqBA,CAAEK,GAAG,EAAE;EACnC,IAAI,CAACC,eAAe,CAACD,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIJ,KAAK,CAAE,sBAAqB,CAAC;EACzC;EAEA,OAAO;IACLM,IAAI,EAAEhB,IAAI,CAACiB,MAAM,CAACC,MAAM,CAACF,IAAI,CAACF,GAAG,CAACE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC7DC,KAAK,EAAEF,MAAM,CAACF,IAAI,CAACF,GAAG,CAACM,KAAK,EAAE,QAAQ,CAAC;IACvCf,IAAI,EAAEa,MAAM,CAACF,IAAI,CAACF,GAAG,CAACT,IAAI,EAAE,QAAQ,CAAC;IACrCgB,QAAQ,EAAEP,GAAG,CAACO,QAAQ,IAAIP,GAAG,CAACQ;EAChC,CAAC;AACH;AAEA,SAASP,eAAeA,CAAED,GAAG,EAAE;EAC7B,OAAOA,GAAG,IAAIA,GAAG,CAACE,IAAI,IAAIF,GAAG,CAACM,KAAK,IAAIN,GAAG,CAACT,IAAI,KAAKS,GAAG,CAACO,QAAQ,IAAIP,GAAG,CAACQ,SAAS,CAAC;AACpF"},"metadata":{},"sourceType":"script"}