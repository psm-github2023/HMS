{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst concatStream = require('concat-stream');\nconst once = require('once');\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter');\nconst SendFilesStream = require('../utils/send-files-stream');\nmodule.exports = send => {\n  const sendFilesStream = SendFilesStream(send, 'files/write');\n  return promisify((pathDst, _files, opts, _callback) => {\n    if (typeof opts === 'function' && !_callback) {\n      _callback = opts;\n      opts = {};\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof _callback === 'function') {\n      _callback = opts;\n      opts = {};\n    }\n    const files = [].concat(_files);\n    const callback = once(_callback);\n    const options = {\n      args: pathDst,\n      qs: opts,\n      converter: FileResultStreamConverter\n    };\n    const stream = sendFilesStream({\n      qs: options\n    });\n    const concat = concatStream(result => callback(null, result));\n    stream.once('error', callback);\n    stream.pipe(concat);\n    files.forEach(file => stream.write(file));\n    stream.end();\n  });\n};","map":{"version":3,"names":["promisify","require","concatStream","once","FileResultStreamConverter","SendFilesStream","module","exports","send","sendFilesStream","pathDst","_files","opts","_callback","files","concat","callback","options","args","qs","converter","stream","result","pipe","forEach","file","write","end"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/files-mfs/write.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst concatStream = require('concat-stream')\nconst once = require('once')\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter')\nconst SendFilesStream = require('../utils/send-files-stream')\n\nmodule.exports = (send) => {\n  const sendFilesStream = SendFilesStream(send, 'files/write')\n\n  return promisify((pathDst, _files, opts, _callback) => {\n    if (typeof opts === 'function' &&\n      !_callback) {\n      _callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' &&\n      typeof _callback === 'function') {\n      _callback = opts\n      opts = {}\n    }\n\n    const files = [].concat(_files)\n    const callback = once(_callback)\n\n    const options = {\n      args: pathDst,\n      qs: opts,\n      converter: FileResultStreamConverter\n    }\n\n    const stream = sendFilesStream({ qs: options })\n    const concat = concatStream((result) => callback(null, result))\n    stream.once('error', callback)\n    stream.pipe(concat)\n\n    files.forEach((file) => stream.write(file))\n    stream.end()\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC7C,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,yBAAyB,GAAGH,OAAO,CAAC,uCAAuC,CAAC;AAClF,MAAMI,eAAe,GAAGJ,OAAO,CAAC,4BAA4B,CAAC;AAE7DK,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,MAAMC,eAAe,GAAGJ,eAAe,CAACG,IAAI,EAAE,aAAa,CAAC;EAE5D,OAAOR,SAAS,CAAC,CAACU,OAAO,EAAEC,MAAM,EAAEC,IAAI,EAAEC,SAAS,KAAK;IACrD,IAAI,OAAOD,IAAI,KAAK,UAAU,IAC5B,CAACC,SAAS,EAAE;MACZA,SAAS,GAAGD,IAAI;MAChBA,IAAI,GAAG,CAAC,CAAC;IACX;;IAEA;IACA;IACA,IAAI,OAAOA,IAAI,KAAK,UAAU,IAC5B,OAAOC,SAAS,KAAK,UAAU,EAAE;MACjCA,SAAS,GAAGD,IAAI;MAChBA,IAAI,GAAG,CAAC,CAAC;IACX;IAEA,MAAME,KAAK,GAAG,EAAE,CAACC,MAAM,CAACJ,MAAM,CAAC;IAC/B,MAAMK,QAAQ,GAAGb,IAAI,CAACU,SAAS,CAAC;IAEhC,MAAMI,OAAO,GAAG;MACdC,IAAI,EAAER,OAAO;MACbS,EAAE,EAAEP,IAAI;MACRQ,SAAS,EAAEhB;IACb,CAAC;IAED,MAAMiB,MAAM,GAAGZ,eAAe,CAAC;MAAEU,EAAE,EAAEF;IAAQ,CAAC,CAAC;IAC/C,MAAMF,MAAM,GAAGb,YAAY,CAAEoB,MAAM,IAAKN,QAAQ,CAAC,IAAI,EAAEM,MAAM,CAAC,CAAC;IAC/DD,MAAM,CAAClB,IAAI,CAAC,OAAO,EAAEa,QAAQ,CAAC;IAC9BK,MAAM,CAACE,IAAI,CAACR,MAAM,CAAC;IAEnBD,KAAK,CAACU,OAAO,CAAEC,IAAI,IAAKJ,MAAM,CAACK,KAAK,CAACD,IAAI,CAAC,CAAC;IAC3CJ,MAAM,CAACM,GAAG,CAAC,CAAC;EACd,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}