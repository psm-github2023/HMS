{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\nconst PeerId = require('peer-id');\nconst PeerInfo = require('peer-info');\nmodule.exports = send => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    const handleResult = (res, callback) => {\n      const peerIds = res.map(r => new PeerInfo(PeerId.createFromB58String(r.ID)));\n      callback(null, peerIds);\n    };\n    send({\n      path: 'dht/query',\n      args: peerId,\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","streamToValueWithTransformer","PeerId","PeerInfo","module","exports","send","peerId","opts","callback","handleResult","res","peerIds","map","r","createFromB58String","ID","path","args","qs","err","result"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/node_modules/ipfs-http-client/src/dht/query.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer')\n\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\n\nmodule.exports = (send) => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    const handleResult = (res, callback) => {\n      const peerIds = res.map((r) => (new PeerInfo(PeerId.createFromB58String(r.ID))))\n\n      callback(null, peerIds)\n    }\n\n    send({\n      path: 'dht/query',\n      args: peerId,\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback)\n    })\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,4BAA4B,GAAGD,OAAO,CAAC,2CAA2C,CAAC;AAEzF,MAAME,MAAM,GAAGF,OAAO,CAAC,SAAS,CAAC;AACjC,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAW,CAAC;AAErCI,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAOP,SAAS,CAAC,CAACQ,MAAM,EAAEC,IAAI,EAAEC,QAAQ,KAAK;IAC3C,IAAI,OAAOD,IAAI,KAAK,UAAU,IAAI,CAACC,QAAQ,EAAE;MAC3CA,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;;IAEA;IACA;IACA,IAAI,OAAOA,IAAI,KAAK,UAAU,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;MAChEA,QAAQ,GAAGD,IAAI;MACfA,IAAI,GAAG,CAAC,CAAC;IACX;IAEA,MAAME,YAAY,GAAGA,CAACC,GAAG,EAAEF,QAAQ,KAAK;MACtC,MAAMG,OAAO,GAAGD,GAAG,CAACE,GAAG,CAAEC,CAAC,IAAM,IAAIX,QAAQ,CAACD,MAAM,CAACa,mBAAmB,CAACD,CAAC,CAACE,EAAE,CAAC,CAAE,CAAC;MAEhFP,QAAQ,CAAC,IAAI,EAAEG,OAAO,CAAC;IACzB,CAAC;IAEDN,IAAI,CAAC;MACHW,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAEX,MAAM;MACZY,EAAE,EAAEX;IACN,CAAC,EAAE,CAACY,GAAG,EAAEC,MAAM,KAAK;MAClB,IAAID,GAAG,EAAE;QACP,OAAOX,QAAQ,CAACW,GAAG,CAAC;MACtB;MAEAnB,4BAA4B,CAACoB,MAAM,EAAEX,YAAY,EAAED,QAAQ,CAAC;IAC9D,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}