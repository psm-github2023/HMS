{"ast":null,"code":"var _jsxFileName = \"C:\\\\blockchain\\\\Victus-health-assistant-main\\\\Victus-health-assistant-main\\\\src\\\\pages\\\\hospital.jsx\";\nimport HStorage from \"../abis/HStorage.json\";\nimport React, { Component } from \"react\";\nimport Navbar from \"../components/navbar/navbar\";\nimport Main from \"../components/main-hos\";\nimport Web3 from \"web3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ipfsClient = require(\"ipfs-http-client\");\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5002,\n  protocol: \"https\"\n}); // leaving out the arguments will default to these values\n\nclass Hospital extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  }\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    // Load account\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    // Network ID\n    const networkId = await web3.eth.net.getId();\n    const networkData = HStorage.networks[networkId];\n    if (networkData) {\n      // Assign contract\n      const hstorage = new web3.eth.Contract(HStorage.abi, networkData.address);\n      this.setState({\n        hstorage\n      });\n      // Get files amount\n      const filesCount = await hstorage.methods.fileCount().call();\n      this.setState({\n        filesCount\n      });\n      // Load files&sort by the newest\n      for (var i = filesCount; i >= 1; i--) {\n        const file = await hstorage.methods.files(i).call();\n        this.setState({\n          files: [...this.state.files, file]\n        });\n      }\n    } else {\n      window.alert(\"HStorage contract not deployed to detected network.\");\n    }\n  }\n\n  // Get file from user\n\n  constructor(props) {\n    super(props);\n    this.captureFile = event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result),\n          type: file.type,\n          name: file.name\n        });\n        console.log(\"buffer\", this.state.buffer);\n      };\n    };\n    this.uploadFile = (description, recieverAddress) => {\n      console.log(\"Submitting file to IPFS...\");\n\n      // Add file to the IPFS\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log(\"IPFS result\", result);\n        if (error) {\n          console.error(error);\n          return;\n        }\n        this.setState({\n          loading: true\n        });\n        // Assign value for the file without extension\n        if (this.state.type === \"\") {\n          this.setState({\n            type: \"none\"\n          });\n        }\n        this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description, recieverAddress).send({\n          from: this.state.account\n        }).on(\"transactionHash\", hash => {\n          this.setState({\n            loading: false,\n            type: null,\n            name: null\n          });\n          window.location.reload();\n        }).on(\"error\", e => {\n          window.alert(\"Error\");\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n    this.state = {\n      account: \"\",\n      hstorage: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    };\n    this.uploadFile = this.uploadFile.bind(this);\n    this.captureFile = this.captureFile.bind(this);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        account: this.state.account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), this.state.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loader\",\n        className: \"text-center mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Main, {\n        files: this.state.files,\n        captureFile: this.captureFile,\n        uploadFile: this.uploadFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Hospital;","map":{"version":3,"names":["HStorage","React","Component","Navbar","Main","Web3","jsxDEV","_jsxDEV","ipfsClient","require","ipfs","host","port","protocol","Hospital","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","accounts","eth","getAccounts","setState","account","networkId","net","getId","networkData","networks","hstorage","Contract","abi","address","filesCount","methods","fileCount","call","i","file","files","state","constructor","props","captureFile","event","preventDefault","target","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","type","name","console","log","uploadFile","description","recieverAddress","add","error","loading","dstorage","hash","size","send","from","on","location","reload","e","bind","render","children","fileName","_jsxFileName","lineNumber","columnNumber","id","className"],"sources":["C:/blockchain/Victus-health-assistant-main/Victus-health-assistant-main/src/pages/hospital.jsx"],"sourcesContent":["import HStorage from \"../abis/HStorage.json\";\nimport React, { Component } from \"react\";\nimport Navbar from \"../components/navbar/navbar\";\nimport Main from \"../components/main-hos\";\nimport Web3 from \"web3\";\n\nconst ipfsClient = require(\"ipfs-http-client\");\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5002,\n  protocol: \"https\",\n}); // leaving out the arguments will default to these values\n\nclass Hospital extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    // Load account\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n    // Network ID\n    const networkId = await web3.eth.net.getId();\n    const networkData = HStorage.networks[networkId];\n    if (networkData) {\n      // Assign contract\n      const hstorage = new web3.eth.Contract(HStorage.abi, networkData.address);\n      this.setState({ hstorage });\n      // Get files amount\n      const filesCount = await hstorage.methods.fileCount().call();\n      this.setState({ filesCount });\n      // Load files&sort by the newest\n      for (var i = filesCount; i >= 1; i--) {\n        const file = await hstorage.methods.files(i).call();\n        this.setState({\n          files: [...this.state.files, file],\n        });\n      }\n    } else {\n      window.alert(\"HStorage contract not deployed to detected network.\");\n    }\n  }\n\n  // Get file from user\n  captureFile = (event) => {\n    event.preventDefault();\n\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = () => {\n      this.setState({\n        buffer: Buffer(reader.result),\n        type: file.type,\n        name: file.name,\n      });\n      console.log(\"buffer\", this.state.buffer);\n    };\n  };\n\n  uploadFile = (description, recieverAddress) => {\n    console.log(\"Submitting file to IPFS...\");\n\n    // Add file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log(\"IPFS result\", result);\n      if (error) {\n        console.error(error);\n        return;\n      }\n\n      this.setState({ loading: true });\n      // Assign value for the file without extension\n      if (this.state.type === \"\") {\n        this.setState({ type: \"none\" });\n      }\n      this.state.dstorage.methods\n        .uploadFile(\n          result[0].hash,\n          result[0].size,\n          this.state.type,\n          this.state.name,\n          description,\n          recieverAddress\n        )\n        .send({ from: this.state.account })\n        .on(\"transactionHash\", (hash) => {\n          this.setState({\n            loading: false,\n            type: null,\n            name: null,\n          });\n          window.location.reload();\n        })\n        .on(\"error\", (e) => {\n          window.alert(\"Error\");\n          this.setState({ loading: false });\n        });\n    });\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      hstorage: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null,\n    };\n    this.uploadFile = this.uploadFile.bind(this);\n    this.captureFile = this.captureFile.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        {this.state.loading ? (\n          <div id=\"loader\" className=\"text-center mt-5\">\n            <p>Loading...</p>\n          </div>\n        ) : (\n          <Main\n            files={this.state.files}\n            captureFile={this.captureFile}\n            uploadFile={this.uploadFile}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Hospital;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}